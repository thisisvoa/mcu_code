
E:\A\xf\Code\GitHub\mcu_code\stm32\waterWarning\Cube\TrueSTUDIO\Cube\Debug\Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000988  20000068  08004b64  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000e00  200009f0  08004b64  000209f0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000ca7b  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00035530  00000000  00000000  0002cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006b7b  00000000  00000000  0006203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015b8  00000000  00000000  00068bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001cc8  00000000  00000000  0006a170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000efdc  00000000  00000000  0006be38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000080d3  00000000  00000000  0007ae14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00082ee7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044c0  00000000  00000000  00082f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  00087424  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  000874c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	080049a8 	.word	0x080049a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	080049a8 	.word	0x080049a8

08000224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000224:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000226:	e003      	b.n	8000230 <LoopCopyDataInit>

08000228 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800022a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800022c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800022e:	3104      	adds	r1, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000230:	480a      	ldr	r0, [pc, #40]	; (800025c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000234:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000236:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000238:	d3f6      	bcc.n	8000228 <CopyDataInit>
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800023c:	e002      	b.n	8000244 <LoopFillZerobss>

0800023e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000240:	f842 3b04 	str.w	r3, [r2], #4

08000244 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000248:	d3f9      	bcc.n	800023e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800024a:	f000 fce1 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800024e:	f003 fc3d 	bl	8003acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 f97d 	bl	8000550 <main>
  bx lr
 8000256:	4770      	bx	lr
  ldr r3, =_sidata
 8000258:	08004afc 	.word	0x08004afc
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000260:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000264:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000268:	200009f0 	.word	0x200009f0

0800026c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC3_IRQHandler>
	...

08000270 <HAL_ADC_ConvCpltCallback>:

void vApplicationIdleHook(){
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000270:	b508      	push	{r3, lr}
	UBaseType_t uxSavedInterruptStatus;
	static  BaseType_t xHigherPriorityTaskWoken;

	xSemaphoreGiveFromISR( senseGetDataSemaphore, &xHigherPriorityTaskWoken );
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_ADC_ConvCpltCallback+0x18>)
 8000274:	4905      	ldr	r1, [pc, #20]	; (800028c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f003 f800 	bl	800327c <xQueueGiveFromISR>

	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

}
 800027c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
 8000280:	2000      	movs	r0, #0
 8000282:	f002 bfa1 	b.w	80031c8 <vPortClearInterruptMask>
 8000286:	bf00      	nop
 8000288:	200001e8 	.word	0x200001e8
 800028c:	20000084 	.word	0x20000084

08000290 <HAL_GPIO_EXTI_Callback>:
/*
 * 雨量计的中断
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000290:	b510      	push	{r4, lr}
 8000292:	4604      	mov	r4, r0
	UBaseType_t uxSavedInterruptStatus;
	static  BaseType_t xHigherPriorityTaskWoken;

	portSET_INTERRUPT_MASK_FROM_ISR();
 8000294:	f002 ff90 	bl	80031b8 <ulPortSetInterruptMask>
	if(GPIO_Pin == GPIO_PIN_6){
 8000298:	2c40      	cmp	r4, #64	; 0x40
 800029a:	d107      	bne.n	80002ac <HAL_GPIO_EXTI_Callback+0x1c>
		trigger_rain_signal(&waterInf);
 800029c:	4806      	ldr	r0, [pc, #24]	; (80002b8 <HAL_GPIO_EXTI_Callback+0x28>)
 800029e:	f002 ff3f 	bl	8003120 <trigger_rain_signal>
		 xSemaphoreGiveFromISR( senseGetDataSemaphore, &xHigherPriorityTaskWoken );
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <HAL_GPIO_EXTI_Callback+0x2c>)
 80002a4:	4906      	ldr	r1, [pc, #24]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x30>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	f002 ffe8 	bl	800327c <xQueueGiveFromISR>

	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 80002ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
 80002b0:	2000      	movs	r0, #0
 80002b2:	f002 bf89 	b.w	80031c8 <vPortClearInterruptMask>
 80002b6:	bf00      	nop
 80002b8:	2000078c 	.word	0x2000078c
 80002bc:	200001e8 	.word	0x200001e8
 80002c0:	20000088 	.word	0x20000088

080002c4 <HAL_RTCEx_RTCEventCallback>:
	portSET_INTERRUPT_MASK_FROM_ISR();

	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}

void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc){
 80002c4:	b508      	push	{r3, lr}
	UBaseType_t uxSavedInterruptStatus;
	portSET_INTERRUPT_MASK_FROM_ISR();
 80002c6:	f002 ff77 	bl	80031b8 <ulPortSetInterruptMask>
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 80002ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
 80002ce:	2000      	movs	r0, #0
 80002d0:	f002 bf7a 	b.w	80031c8 <vPortClearInterruptMask>

080002d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80002d4:	b510      	push	{r4, lr}
 80002d6:	4604      	mov	r4, r0

	UBaseType_t uxSavedInterruptStatus;

	portSET_INTERRUPT_MASK_FROM_ISR();
 80002d8:	f002 ff6e 	bl	80031b8 <ulPortSetInterruptMask>

	if (huart->Instance == USART1) {
 80002dc:	6823      	ldr	r3, [r4, #0]
 80002de:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <HAL_UART_RxCpltCallback+0x3c>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d10e      	bne.n	8000302 <HAL_UART_RxCpltCallback+0x2e>
		HAL_UART_Receive_IT(&huart1, uarto_rx_buf, 5);
 80002e4:	2205      	movs	r2, #5
 80002e6:	490b      	ldr	r1, [pc, #44]	; (8000314 <HAL_UART_RxCpltCallback+0x40>)
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <HAL_UART_RxCpltCallback+0x44>)
	} else if (huart->Instance == USART2) {

	} else if (huart->Instance == USART3) {
		HAL_UART_Receive_IT(&huart3, uarto_rx_buf, 1);
 80002ea:	f002 fb34 	bl	8002956 <HAL_UART_Receive_IT>
	} else if (huart->Instance == UART5) {

	}
	TOGGLE_LED2();
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <HAL_UART_RxCpltCallback+0x48>)
 80002f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f4:	f000 febd 	bl	8001072 <HAL_GPIO_TogglePin>
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
}
 80002f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
 80002fc:	2000      	movs	r0, #0
 80002fe:	f002 bf63 	b.w	80031c8 <vPortClearInterruptMask>
	} else if (huart->Instance == USART3) {
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_UART_RxCpltCallback+0x4c>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d1f2      	bne.n	80002ee <HAL_UART_RxCpltCallback+0x1a>
		HAL_UART_Receive_IT(&huart3, uarto_rx_buf, 1);
 8000308:	2201      	movs	r2, #1
 800030a:	4902      	ldr	r1, [pc, #8]	; (8000314 <HAL_UART_RxCpltCallback+0x40>)
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <HAL_UART_RxCpltCallback+0x50>)
 800030e:	e7ec      	b.n	80002ea <HAL_UART_RxCpltCallback+0x16>
 8000310:	40013800 	.word	0x40013800
 8000314:	200001c0 	.word	0x200001c0
 8000318:	2000027c 	.word	0x2000027c
 800031c:	40011400 	.word	0x40011400
 8000320:	40004800 	.word	0x40004800
 8000324:	2000023c 	.word	0x2000023c

08000328 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000328:	4b48      	ldr	r3, [pc, #288]	; (800044c <MX_GPIO_Init+0x124>)
{
 800032a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800032e:	699a      	ldr	r2, [r3, #24]
{
 8000330:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000336:	619a      	str	r2, [r3, #24]
 8000338:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800033a:	f8df a120 	ldr.w	sl, [pc, #288]	; 800045c <MX_GPIO_Init+0x134>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800033e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000342:	9201      	str	r2, [sp, #4]
 8000344:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000348:	4f41      	ldr	r7, [pc, #260]	; (8000450 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034a:	f042 0210 	orr.w	r2, r2, #16
 800034e:	619a      	str	r2, [r3, #24]
 8000350:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 8000352:	4650      	mov	r0, sl
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	f002 0210 	and.w	r2, r2, #16
 8000358:	9202      	str	r2, [sp, #8]
 800035a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800035e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8000460 <MX_GPIO_Init+0x138>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	f042 0204 	orr.w	r2, r2, #4
 8000366:	619a      	str	r2, [r3, #24]
 8000368:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800036a:	f242 0105 	movw	r1, #8197	; 0x2005
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	f002 0204 	and.w	r2, r2, #4
 8000372:	9203      	str	r2, [sp, #12]
 8000374:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000378:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8000464 <MX_GPIO_Init+0x13c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	f042 0208 	orr.w	r2, r2, #8
 8000380:	619a      	str	r2, [r3, #24]
 8000382:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000384:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	f002 0208 	and.w	r2, r2, #8
 800038a:	9204      	str	r2, [sp, #16]
 800038c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PC13 PC0 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000392:	f042 0220 	orr.w	r2, r2, #32
 8000396:	619a      	str	r2, [r3, #24]
 8000398:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	9305      	str	r3, [sp, #20]
 80003a2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 80003a4:	f000 fe60 	bl	8001068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80003a8:	4638      	mov	r0, r7
 80003aa:	2200      	movs	r2, #0
 80003ac:	2130      	movs	r1, #48	; 0x30
 80003ae:	f000 fe5b 	bl	8001068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80003b2:	4648      	mov	r0, r9
 80003b4:	2200      	movs	r2, #0
 80003b6:	f241 0178 	movw	r1, #4216	; 0x1078
 80003ba:	f000 fe55 	bl	8001068 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80003be:	2200      	movs	r2, #0
 80003c0:	4640      	mov	r0, r8
 80003c2:	f24f 2178 	movw	r1, #62072	; 0xf278
 80003c6:	f000 fe4f 	bl	8001068 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80003ca:	237e      	movs	r3, #126	; 0x7e
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003cc:	a906      	add	r1, sp, #24
 80003ce:	4821      	ldr	r0, [pc, #132]	; (8000454 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80003d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003d8:	f000 fd5a 	bl	8000e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2;
 80003dc:	f242 0305 	movw	r3, #8197	; 0x2005
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e0:	a906      	add	r1, sp, #24
 80003e2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2;
 80003e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	f000 fd51 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003ee:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	a906      	add	r1, sp, #24
 80003f2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003f4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f000 fd49 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003fe:	23c0      	movs	r3, #192	; 0xc0
 8000400:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	a906      	add	r1, sp, #24
 8000406:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000408:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f000 fd40 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000410:	f241 0378 	movw	r3, #4216	; 0x1078
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	a906      	add	r1, sp, #24
 8000416:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000418:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041e:	f000 fd37 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD12 PD13 PD14 
                           PD15 PD3 PD4 PD5 
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000422:	f24f 2378 	movw	r3, #62072	; 0xf278
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000426:	a906      	add	r1, sp, #24
 8000428:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800042a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000430:	f000 fd2e 	bl	8000e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000434:	4622      	mov	r2, r4
 8000436:	2105      	movs	r1, #5
 8000438:	2017      	movs	r0, #23
 800043a:	f000 fcc7 	bl	8000dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800043e:	2017      	movs	r0, #23
 8000440:	f000 fcf8 	bl	8000e34 <HAL_NVIC_EnableIRQ>

}
 8000444:	b00a      	add	sp, #40	; 0x28
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	40011800 	.word	0x40011800
 8000458:	10110000 	.word	0x10110000
 800045c:	40011000 	.word	0x40011000
 8000460:	40010c00 	.word	0x40010c00
 8000464:	40011400 	.word	0x40011400

08000468 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000468:	6803      	ldr	r3, [r0, #0]
 800046a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800046e:	d101      	bne.n	8000474 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000470:	f000 bc06 	b.w	8000c80 <HAL_IncTick>
 8000474:	4770      	bx	lr
	...

08000478 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	4606      	mov	r6, r0
 800047c:	460f      	mov	r7, r1
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) {
		HAL_Delay(1000);
		printf("hal lib err in file: %s at line:%d",file,line);
 800047e:	4d0b      	ldr	r5, [pc, #44]	; (80004ac <_Error_Handler+0x34>)
		TOGGLE_LED1();
 8000480:	4c0b      	ldr	r4, [pc, #44]	; (80004b0 <_Error_Handler+0x38>)
		HAL_Delay(1000);
 8000482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000486:	f000 fc09 	bl	8000c9c <HAL_Delay>
		printf("hal lib err in file: %s at line:%d",file,line);
 800048a:	463a      	mov	r2, r7
 800048c:	4631      	mov	r1, r6
 800048e:	4628      	mov	r0, r5
 8000490:	f003 fb48 	bl	8003b24 <iprintf>
		TOGGLE_LED1();
 8000494:	4620      	mov	r0, r4
 8000496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800049a:	f000 fdea 	bl	8001072 <HAL_GPIO_TogglePin>
		TOGGLE_LED2();
 800049e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a2:	4620      	mov	r0, r4
 80004a4:	f000 fde5 	bl	8001072 <HAL_GPIO_TogglePin>
 80004a8:	e7eb      	b.n	8000482 <_Error_Handler+0xa>
 80004aa:	bf00      	nop
 80004ac:	080049f4 	.word	0x080049f4
 80004b0:	40011400 	.word	0x40011400

080004b4 <SystemClock_Config>:
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80004b4:	2305      	movs	r3, #5
{
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ba:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80004bc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004c6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ca:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004d2:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d6:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004d8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	f001 f917 	bl	800170c <HAL_RCC_OscConfig>
 80004de:	b118      	cbz	r0, 80004e8 <SystemClock_Config+0x34>
    _Error_Handler(__FILE__, __LINE__);
 80004e0:	21ac      	movs	r1, #172	; 0xac
    _Error_Handler(__FILE__, __LINE__);
 80004e2:	481a      	ldr	r0, [pc, #104]	; (800054c <SystemClock_Config+0x98>)
 80004e4:	f7ff ffc8 	bl	8000478 <_Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e8:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f0:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f2:	4621      	mov	r1, r4
 80004f4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fa:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004fc:	f001 fba8 	bl	8001c50 <HAL_RCC_ClockConfig>
 8000500:	b108      	cbz	r0, 8000506 <SystemClock_Config+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8000502:	21ba      	movs	r1, #186	; 0xba
 8000504:	e7ed      	b.n	80004e2 <SystemClock_Config+0x2e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8000506:	2313      	movs	r3, #19
 8000508:	9306      	str	r3, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	9307      	str	r3, [sp, #28]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000514:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000516:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000518:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800051a:	f001 fca1 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 800051e:	4604      	mov	r4, r0
 8000520:	b108      	cbz	r0, 8000526 <SystemClock_Config+0x72>
    _Error_Handler(__FILE__, __LINE__);
 8000522:	21c4      	movs	r1, #196	; 0xc4
 8000524:	e7dd      	b.n	80004e2 <SystemClock_Config+0x2e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000526:	f001 fc47 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000532:	f000 fc8b 	bl	8000e4c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000536:	2004      	movs	r0, #4
 8000538:	f000 fc9e 	bl	8000e78 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800053c:	4622      	mov	r2, r4
 800053e:	4629      	mov	r1, r5
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f000 fc42 	bl	8000dcc <HAL_NVIC_SetPriority>
}
 8000548:	b017      	add	sp, #92	; 0x5c
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	080049e0 	.word	0x080049e0

08000550 <main>:
{
 8000550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t a[10]={'A'};
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	9302      	str	r3, [sp, #8]
 8000558:	f8ad 300c 	strh.w	r3, [sp, #12]
 800055c:	2341      	movs	r3, #65	; 0x41
 800055e:	f88d 3004 	strb.w	r3, [sp, #4]
  HAL_Init();
 8000562:	f000 fb7b 	bl	8000c5c <HAL_Init>
  SystemClock_Config();
 8000566:	f7ff ffa5 	bl	80004b4 <SystemClock_Config>
    MX_GPIO_Init();
 800056a:	f7ff fedd 	bl	8000328 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800056e:	f000 f99d 	bl	80008ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f9bb 	bl	80008ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000576:	f000 f9d9 	bl	800092c <MX_USART3_UART_Init>
    MX_RTC_Init();
 800057a:	f000 f825 	bl	80005c8 <MX_RTC_Init>
  MX_UART4_Init();
 800057e:	f000 f975 	bl	800086c <MX_UART4_Init>
	  PWR_VCC_ON();
 8000582:	4c0e      	ldr	r4, [pc, #56]	; (80005bc <main+0x6c>)
	  PWR_NET_ON();
 8000584:	4d0e      	ldr	r5, [pc, #56]	; (80005c0 <main+0x70>)
	  PWR_VCC_ON();
 8000586:	2201      	movs	r2, #1
 8000588:	4620      	mov	r0, r4
 800058a:	4611      	mov	r1, r2
 800058c:	f000 fd6c 	bl	8001068 <HAL_GPIO_WritePin>
	  PWR_SVCC_ON();
 8000590:	4620      	mov	r0, r4
 8000592:	2201      	movs	r2, #1
 8000594:	2104      	movs	r1, #4
 8000596:	f000 fd67 	bl	8001068 <HAL_GPIO_WritePin>
	  PWR_NET_ON();
 800059a:	4628      	mov	r0, r5
 800059c:	2201      	movs	r2, #1
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	f000 fd62 	bl	8001068 <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&RS2322_UART_HANDLE,a,5,10);
 80005a4:	230a      	movs	r3, #10
 80005a6:	2205      	movs	r2, #5
 80005a8:	a901      	add	r1, sp, #4
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x74>)
 80005ac:	f002 f978 	bl	80028a0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b4:	f000 fb72 	bl	8000c9c <HAL_Delay>
 80005b8:	e7e5      	b.n	8000586 <main+0x36>
 80005ba:	bf00      	nop
 80005bc:	40011000 	.word	0x40011000
 80005c0:	40010c00 	.word	0x40010c00
 80005c4:	2000027c 	.word	0x2000027c

080005c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005c8:	b537      	push	{r0, r1, r2, r4, r5, lr}

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f04f 32ff 	mov.w	r2, #4294967295
  hrtc.Instance = RTC;
 80005d0:	4821      	ldr	r0, [pc, #132]	; (8000658 <MX_RTC_Init+0x90>)
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80005d2:	4922      	ldr	r1, [pc, #136]	; (800065c <MX_RTC_Init+0x94>)
 80005d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005d8:	f001 fec0 	bl	800235c <HAL_RTC_Init>
 80005dc:	b118      	cbz	r0, 80005e6 <MX_RTC_Init+0x1e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80005de:	2148      	movs	r1, #72	; 0x48
 80005e0:	481f      	ldr	r0, [pc, #124]	; (8000660 <MX_RTC_Init+0x98>)
 80005e2:	f7ff ff49 	bl	8000478 <_Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80005e6:	2101      	movs	r1, #1
 80005e8:	481b      	ldr	r0, [pc, #108]	; (8000658 <MX_RTC_Init+0x90>)
 80005ea:	f001 ff41 	bl	8002470 <HAL_RTCEx_BKUPRead>
 80005ee:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d02d      	beq.n	8000652 <MX_RTC_Init+0x8a>
  sTime.Hours = 0x1;
 80005f6:	2401      	movs	r4, #1
  sTime.Minutes = 0x54;
 80005f8:	2554      	movs	r5, #84	; 0x54
  sTime.Seconds = 0x0;
 80005fa:	2300      	movs	r3, #0

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80005fc:	4622      	mov	r2, r4
 80005fe:	4669      	mov	r1, sp
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <MX_RTC_Init+0x90>)
  sTime.Hours = 0x1;
 8000602:	f88d 4000 	strb.w	r4, [sp]
  sTime.Minutes = 0x54;
 8000606:	f88d 5001 	strb.w	r5, [sp, #1]
  sTime.Seconds = 0x0;
 800060a:	f88d 3002 	strb.w	r3, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800060e:	f001 fddf 	bl	80021d0 <HAL_RTC_SetTime>
 8000612:	b118      	cbz	r0, 800061c <MX_RTC_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000614:	4629      	mov	r1, r5
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <MX_RTC_Init+0x98>)
 8000618:	f7ff ff2e 	bl	8000478 <_Error_Handler>
  }

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 800061c:	2308      	movs	r3, #8
 800061e:	f88d 3005 	strb.w	r3, [sp, #5]
  DateToUpdate.Date = 0x14;
 8000622:	2314      	movs	r3, #20
 8000624:	f88d 3006 	strb.w	r3, [sp, #6]
  DateToUpdate.Year = 0x17;
 8000628:	2317      	movs	r3, #23

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800062a:	2201      	movs	r2, #1
 800062c:	a901      	add	r1, sp, #4
 800062e:	480a      	ldr	r0, [pc, #40]	; (8000658 <MX_RTC_Init+0x90>)
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000630:	f88d 4004 	strb.w	r4, [sp, #4]
  DateToUpdate.Year = 0x17;
 8000634:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000638:	f001 fe1c 	bl	8002274 <HAL_RTC_SetDate>
 800063c:	b118      	cbz	r0, 8000646 <MX_RTC_Init+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800063e:	215e      	movs	r1, #94	; 0x5e
 8000640:	4807      	ldr	r0, [pc, #28]	; (8000660 <MX_RTC_Init+0x98>)
 8000642:	f7ff ff19 	bl	8000478 <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 8000646:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800064a:	2101      	movs	r1, #1
 800064c:	4802      	ldr	r0, [pc, #8]	; (8000658 <MX_RTC_Init+0x90>)
 800064e:	f001 ff07 	bl	8002460 <HAL_RTCEx_BKUPWrite>
  }

}
 8000652:	b003      	add	sp, #12
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop
 8000658:	200001ec 	.word	0x200001ec
 800065c:	40002800 	.word	0x40002800
 8000660:	08004a17 	.word	0x08004a17

08000664 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000664:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <HAL_RTC_MspInit+0x54>)
 8000668:	6802      	ldr	r2, [r0, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d120      	bne.n	80006b0 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800066e:	f001 f83f 	bl	80016f0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_RTC_MspInit+0x58>)
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800068a:	fa93 f3a3 	rbit	r3, r3
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800068e:	2101      	movs	r1, #1
 8000690:	fab3 f383 	clz	r3, r3
 8000694:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <HAL_RTC_MspInit+0x5c>)

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 8000696:	2003      	movs	r0, #3
    __HAL_RCC_RTC_ENABLE();
 8000698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	f000 fb94 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 fbc5 	bl	8000e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    HAL_RTCEx_SetSecond_IT(&hrtc);
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <HAL_RTC_MspInit+0x60>)
 80006ac:	f001 fea6 	bl	80023fc <HAL_RTCEx_SetSecond_IT>

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006b0:	b003      	add	sp, #12
 80006b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80006b6:	bf00      	nop
 80006b8:	40002800 	.word	0x40002800
 80006bc:	40021000 	.word	0x40021000
 80006c0:	42420400 	.word	0x42420400
 80006c4:	200001ec 	.word	0x200001ec

080006c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <HAL_MspInit+0x84>)
{
 80006ca:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80006cc:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ce:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d0:	f042 0201 	orr.w	r2, r2, #1
 80006d4:	619a      	str	r2, [r3, #24]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	f000 fb62 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f06f 000b 	mvn.w	r0, #11
 80006ea:	4611      	mov	r1, r2
 80006ec:	f000 fb6e 	bl	8000dcc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f06f 000a 	mvn.w	r0, #10
 80006f6:	4611      	mov	r1, r2
 80006f8:	f000 fb68 	bl	8000dcc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f06f 0009 	mvn.w	r0, #9
 8000702:	4611      	mov	r1, r2
 8000704:	f000 fb62 	bl	8000dcc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	f06f 0004 	mvn.w	r0, #4
 800070e:	4611      	mov	r1, r2
 8000710:	f000 fb5c 	bl	8000dcc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	f06f 0003 	mvn.w	r0, #3
 800071a:	4611      	mov	r1, r2
 800071c:	f000 fb56 	bl	8000dcc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	210f      	movs	r1, #15
 8000724:	f06f 0001 	mvn.w	r0, #1
 8000728:	f000 fb50 	bl	8000dcc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f000 fb4a 	bl	8000dcc <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <HAL_MspInit+0x88>)
 800073a:	6853      	ldr	r3, [r2, #4]
 800073c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	b003      	add	sp, #12
 8000748:	f85d fb04 	ldr.w	pc, [sp], #4
 800074c:	40021000 	.word	0x40021000
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000756:	4601      	mov	r1, r0
{
 8000758:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800075a:	2200      	movs	r2, #0
 800075c:	201c      	movs	r0, #28
 800075e:	f000 fb35 	bl	8000dcc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000762:	201c      	movs	r0, #28
 8000764:	f000 fb66 	bl	8000e34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800076a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 800076c:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800076e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000770:	f042 0201 	orr.w	r2, r2, #1
 8000774:	61da      	str	r2, [r3, #28]
 8000776:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000778:	4c12      	ldr	r4, [pc, #72]	; (80007c4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	9302      	str	r3, [sp, #8]
 8000780:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000782:	f001 fb4f 	bl	8001e24 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000786:	f001 fb1d 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800078a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000790:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000794:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_InitTick+0x74>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000798:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800079a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 800079e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007a0:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 80007a2:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80007a4:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 80007a6:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80007aa:	f001 ff63 	bl	8002674 <HAL_TIM_Base_Init>
 80007ae:	b920      	cbnz	r0, 80007ba <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80007b0:	4620      	mov	r0, r4
 80007b2:	f001 fe65 	bl	8002480 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80007b6:	b008      	add	sp, #32
 80007b8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80007ba:	2001      	movs	r0, #1
 80007bc:	e7fb      	b.n	80007b6 <HAL_InitTick+0x62>
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	20000200 	.word	0x20000200
 80007c8:	000f4240 	.word	0x000f4240

080007cc <NMI_Handler>:
 80007cc:	4770      	bx	lr

080007ce <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler>

080007d0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80007d0:	e7fe      	b.n	80007d0 <MemManage_Handler>

080007d2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler>

080007d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler>

080007d6 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80007d8:	f002 bcb6 	b.w	8003148 <osSystickHandler>

080007dc <RTC_IRQHandler>:
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80007dc:	4801      	ldr	r0, [pc, #4]	; (80007e4 <RTC_IRQHandler+0x8>)
 80007de:	f001 be22 	b.w	8002426 <HAL_RTCEx_RTCIRQHandler>
 80007e2:	bf00      	nop
 80007e4:	200001ec 	.word	0x200001ec

080007e8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007e8:	4801      	ldr	r0, [pc, #4]	; (80007f0 <ADC1_2_IRQHandler+0x8>)
 80007ea:	f000 ba65 	b.w	8000cb8 <HAL_ADC_IRQHandler>
 80007ee:	bf00      	nop
 80007f0:	20000184 	.word	0x20000184

080007f4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007f4:	4801      	ldr	r0, [pc, #4]	; (80007fc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80007f6:	f000 bcc9 	b.w	800118c <HAL_PCD_IRQHandler>
 80007fa:	bf00      	nop
 80007fc:	2000033c 	.word	0x2000033c

08000800 <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 8000800:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000802:	2040      	movs	r0, #64	; 0x40
 8000804:	f000 fc3a 	bl	800107c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800080c:	2080      	movs	r0, #128	; 0x80
 800080e:	f000 bc35 	b.w	800107c <HAL_GPIO_EXTI_IRQHandler>
	...

08000814 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000814:	4801      	ldr	r0, [pc, #4]	; (800081c <TIM2_IRQHandler+0x8>)
 8000816:	f001 be42 	b.w	800249e <HAL_TIM_IRQHandler>
 800081a:	bf00      	nop
 800081c:	20000200 	.word	0x20000200

08000820 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000820:	4801      	ldr	r0, [pc, #4]	; (8000828 <USART1_IRQHandler+0x8>)
 8000822:	f002 b8cc 	b.w	80029be <HAL_UART_IRQHandler>
 8000826:	bf00      	nop
 8000828:	2000027c 	.word	0x2000027c

0800082c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800082c:	4801      	ldr	r0, [pc, #4]	; (8000834 <USART2_IRQHandler+0x8>)
 800082e:	f002 b8c6 	b.w	80029be <HAL_UART_IRQHandler>
 8000832:	bf00      	nop
 8000834:	200002fc 	.word	0x200002fc

08000838 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000838:	4801      	ldr	r0, [pc, #4]	; (8000840 <USART3_IRQHandler+0x8>)
 800083a:	f002 b8c0 	b.w	80029be <HAL_UART_IRQHandler>
 800083e:	bf00      	nop
 8000840:	2000023c 	.word	0x2000023c

08000844 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8000844:	6802      	ldr	r2, [r0, #0]
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_TIM_Base_MspInit+0x24>)
{
 8000848:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 800084a:	429a      	cmp	r2, r3
 800084c:	d10a      	bne.n	8000864 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800084e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000858:	619a      	str	r2, [r3, #24]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000864:	b002      	add	sp, #8
 8000866:	4770      	bx	lr
 8000868:	40012c00 	.word	0x40012c00

0800086c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800086c:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
 800086e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart4.Instance = UART4;
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_UART4_Init+0x34>)
  huart4.Init.BaudRate = 115200;
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_UART4_Init+0x38>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000876:	220c      	movs	r2, #12
  huart4.Init.BaudRate = 115200;
 8000878:	e880 4008 	stmia.w	r0, {r3, lr}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800087c:	2300      	movs	r3, #0
  huart4.Init.Mode = UART_MODE_TX_RX;
 800087e:	6142      	str	r2, [r0, #20]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000880:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000882:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000884:	6103      	str	r3, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800088a:	f001 ffdd 	bl	8002848 <HAL_UART_Init>
 800088e:	b128      	cbz	r0, 800089c <MX_UART4_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8000890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000894:	2150      	movs	r1, #80	; 0x50
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_UART4_Init+0x3c>)
 8000898:	f7ff bdee 	b.w	8000478 <_Error_Handler>
 800089c:	bd08      	pop	{r3, pc}
 800089e:	bf00      	nop
 80008a0:	200002bc 	.word	0x200002bc
 80008a4:	40004c00 	.word	0x40004c00
 80008a8:	08004a2a 	.word	0x08004a2a

080008ac <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008ac:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80008ae:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b6:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80008b8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008bc:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008be:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ca:	f001 ffbd 	bl	8002848 <HAL_UART_Init>
 80008ce:	b128      	cbz	r0, 80008dc <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80008d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80008d4:	2163      	movs	r1, #99	; 0x63
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_USART1_UART_Init+0x3c>)
 80008d8:	f7ff bdce 	b.w	8000478 <_Error_Handler>
 80008dc:	bd08      	pop	{r3, pc}
 80008de:	bf00      	nop
 80008e0:	2000027c 	.word	0x2000027c
 80008e4:	40013800 	.word	0x40013800
 80008e8:	08004a2a 	.word	0x08004a2a

080008ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008ec:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80008ee:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x38>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f6:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80008f8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fe:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000900:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000902:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000904:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	f001 ff9d 	bl	8002848 <HAL_UART_Init>
 800090e:	b128      	cbz	r0, 800091c <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8000910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000914:	2176      	movs	r1, #118	; 0x76
 8000916:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_USART2_UART_Init+0x3c>)
 8000918:	f7ff bdae 	b.w	8000478 <_Error_Handler>
 800091c:	bd08      	pop	{r3, pc}
 800091e:	bf00      	nop
 8000920:	200002fc 	.word	0x200002fc
 8000924:	40004400 	.word	0x40004400
 8000928:	08004a2a 	.word	0x08004a2a

0800092c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800092c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 800092e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART3_UART_Init+0x38>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000936:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8000938:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000940:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000942:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000944:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800094a:	f001 ff7d 	bl	8002848 <HAL_UART_Init>
 800094e:	b128      	cbz	r0, 800095c <MX_USART3_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8000950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000954:	2189      	movs	r1, #137	; 0x89
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_USART3_UART_Init+0x3c>)
 8000958:	f7ff bd8e 	b.w	8000478 <_Error_Handler>
 800095c:	bd08      	pop	{r3, pc}
 800095e:	bf00      	nop
 8000960:	2000023c 	.word	0x2000023c
 8000964:	40004800 	.word	0x40004800
 8000968:	08004a2a 	.word	0x08004a2a

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART4)
 800096e:	6803      	ldr	r3, [r0, #0]
 8000970:	4a4f      	ldr	r2, [pc, #316]	; (8000ab0 <HAL_UART_MspInit+0x144>)
{
 8000972:	b088      	sub	sp, #32
  if(uartHandle->Instance==UART4)
 8000974:	4293      	cmp	r3, r2
 8000976:	d120      	bne.n	80009ba <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <HAL_UART_MspInit+0x148>)
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	a904      	add	r1, sp, #16
    __HAL_RCC_UART4_CLK_ENABLE();
 800097c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	484e      	ldr	r0, [pc, #312]	; (8000ab8 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8000980:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000984:	61da      	str	r2, [r3, #28]
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f000 fa77 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	a904      	add	r1, sp, #16
 80009ac:	4842      	ldr	r0, [pc, #264]	; (8000ab8 <HAL_UART_MspInit+0x14c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f000 fa6d 	bl	8000e90 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009b6:	b008      	add	sp, #32
 80009b8:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART1)
 80009ba:	4a40      	ldr	r2, [pc, #256]	; (8000abc <HAL_UART_MspInit+0x150>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d127      	bne.n	8000a10 <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c0:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <HAL_UART_MspInit+0x148>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	483e      	ldr	r0, [pc, #248]	; (8000ac0 <HAL_UART_MspInit+0x154>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009cc:	619a      	str	r2, [r3, #24]
 80009ce:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f000 fa52 	bl	8000e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	a904      	add	r1, sp, #16
 80009f2:	4833      	ldr	r0, [pc, #204]	; (8000ac0 <HAL_UART_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f000 fa49 	bl	8000e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009fe:	2025      	movs	r0, #37	; 0x25
 8000a00:	4622      	mov	r2, r4
 8000a02:	2105      	movs	r1, #5
 8000a04:	f000 f9e2 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a08:	2025      	movs	r0, #37	; 0x25
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a0a:	f000 fa13 	bl	8000e34 <HAL_NVIC_EnableIRQ>
}
 8000a0e:	e7d2      	b.n	80009b6 <HAL_UART_MspInit+0x4a>
  else if(uartHandle->Instance==USART2)
 8000a10:	4a2c      	ldr	r2, [pc, #176]	; (8000ac4 <HAL_UART_MspInit+0x158>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d123      	bne.n	8000a5e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <HAL_UART_MspInit+0x148>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <HAL_UART_MspInit+0x154>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a22:	61da      	str	r2, [r3, #28]
 8000a24:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a30:	2304      	movs	r3, #4
 8000a32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f000 fa28 	bl	8000e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a40:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	a904      	add	r1, sp, #16
 8000a44:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <HAL_UART_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f000 fa20 	bl	8000e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a50:	2026      	movs	r0, #38	; 0x26
 8000a52:	4622      	mov	r2, r4
 8000a54:	2105      	movs	r1, #5
 8000a56:	f000 f9b9 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5a:	2026      	movs	r0, #38	; 0x26
 8000a5c:	e7d5      	b.n	8000a0a <HAL_UART_MspInit+0x9e>
  else if(uartHandle->Instance==USART3)
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <HAL_UART_MspInit+0x15c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d1a8      	bne.n	80009b6 <HAL_UART_MspInit+0x4a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_UART_MspInit+0x148>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a68:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a70:	61da      	str	r2, [r3, #28]
 8000a72:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a7a:	9303      	str	r3, [sp, #12]
 8000a7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f000 fa00 	bl	8000e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	a904      	add	r1, sp, #16
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <HAL_UART_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f000 f9f7 	bl	8000e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	4622      	mov	r2, r4
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	f000 f990 	bl	8000dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aac:	2027      	movs	r0, #39	; 0x27
 8000aae:	e7ac      	b.n	8000a0a <HAL_UART_MspInit+0x9e>
 8000ab0:	40004c00 	.word	0x40004c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40013800 	.word	0x40013800
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	40004400 	.word	0x40004400
 8000ac8:	40004800 	.word	0x40004800
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000ad0:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8000ad4:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000ad8:	f002 bd3e 	b.w	8003558 <USBD_LL_SetupStage>

08000adc <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000adc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8000ae0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ae4:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000ae8:	f002 bd63 	b.w	80035b2 <USBD_LL_DataOutStage>

08000aec <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000aec:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8000af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af2:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000af6:	f002 bd8e 	b.w	8003616 <USBD_LL_DataInStage>

08000afa <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000afa:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000afe:	f002 be0a 	b.w	8003716 <USBD_LL_SOF>

08000b02 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8000b02:	b510      	push	{r4, lr}
 8000b04:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8000b06:	2101      	movs	r1, #1
 8000b08:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000b0c:	f002 fdf1 	bl	80036f2 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000b10:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8000b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000b18:	f002 bdcc 	b.w	80036b4 <USBD_LL_Reset>

08000b1c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000b20:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000b24:	f002 fde8 	bl	80036f8 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8000b28:	69a3      	ldr	r3, [r4, #24]
 8000b2a:	b123      	cbz	r3, 8000b36 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000b2c:	4a02      	ldr	r2, [pc, #8]	; (8000b38 <HAL_PCD_SuspendCallback+0x1c>)
 8000b2e:	6913      	ldr	r3, [r2, #16]
 8000b30:	f043 0306 	orr.w	r3, r3, #6
 8000b34:	6113      	str	r3, [r2, #16]
 8000b36:	bd10      	pop	{r4, pc}
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000b3c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8000b40:	f002 bde3 	b.w	800370a <USBD_LL_Resume>

08000b44 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8000b44:	b510      	push	{r4, lr}
 8000b46:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8000b48:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	4622      	mov	r2, r4
 8000b50:	f000 fab4 	bl	80010bc <HAL_PCD_EP_Open>
 8000b54:	2803      	cmp	r0, #3
 8000b56:	bf9a      	itte	ls
 8000b58:	4b01      	ldrls	r3, [pc, #4]	; (8000b60 <USBD_LL_OpenEP+0x1c>)
 8000b5a:	5c18      	ldrbls	r0, [r3, r0]
 8000b5c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	08004a3f 	.word	0x08004a3f

08000b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000b64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000b66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000b6a:	f000 fd75 	bl	8001658 <HAL_PCD_EP_SetStall>
 8000b6e:	2803      	cmp	r0, #3
 8000b70:	bf9a      	itte	ls
 8000b72:	4b02      	ldrls	r3, [pc, #8]	; (8000b7c <USBD_LL_StallEP+0x18>)
 8000b74:	5c18      	ldrbls	r0, [r3, r0]
 8000b76:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8000b78:	bd08      	pop	{r3, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08004a3f 	.word	0x08004a3f

08000b80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8000b80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8000b82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000b86:	f000 fd90 	bl	80016aa <HAL_PCD_EP_ClrStall>
 8000b8a:	2803      	cmp	r0, #3
 8000b8c:	bf9a      	itte	ls
 8000b8e:	4b02      	ldrls	r3, [pc, #8]	; (8000b98 <USBD_LL_ClearStallEP+0x18>)
 8000b90:	5c18      	ldrbls	r0, [r3, r0]
 8000b92:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8000b94:	bd08      	pop	{r3, pc}
 8000b96:	bf00      	nop
 8000b98:	08004a3f 	.word	0x08004a3f

08000b9c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000b9c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000b9e:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000ba2:	bf45      	ittet	mi
 8000ba4:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8000ba8:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000bac:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000bb0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000bb4:	bf58      	it	pl
 8000bb6:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8000bba:	4770      	bx	lr

08000bbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8000bbc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000bbe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000bc2:	f000 fa67 	bl	8001094 <HAL_PCD_SetAddress>
 8000bc6:	2803      	cmp	r0, #3
 8000bc8:	bf9a      	itte	ls
 8000bca:	4b02      	ldrls	r3, [pc, #8]	; (8000bd4 <USBD_LL_SetUSBAddress+0x18>)
 8000bcc:	5c18      	ldrbls	r0, [r3, r0]
 8000bce:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8000bd0:	bd08      	pop	{r3, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08004a3f 	.word	0x08004a3f

08000bd8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8000bd8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000bda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000bde:	f000 fab4 	bl	800114a <HAL_PCD_EP_Transmit>
 8000be2:	2803      	cmp	r0, #3
 8000be4:	bf9a      	itte	ls
 8000be6:	4b02      	ldrls	r3, [pc, #8]	; (8000bf0 <USBD_LL_Transmit+0x18>)
 8000be8:	5c18      	ldrbls	r0, [r3, r0]
 8000bea:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8000bec:	bd08      	pop	{r3, pc}
 8000bee:	bf00      	nop
 8000bf0:	08004a3f 	.word	0x08004a3f

08000bf4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8000bf4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000bf6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8000bfa:	f000 fa82 	bl	8001102 <HAL_PCD_EP_Receive>
 8000bfe:	2803      	cmp	r0, #3
 8000c00:	bf9a      	itte	ls
 8000c02:	4b02      	ldrls	r3, [pc, #8]	; (8000c0c <USBD_LL_PrepareReceive+0x18>)
 8000c04:	5c18      	ldrbls	r0, [r3, r0]
 8000c06:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8000c08:	bd08      	pop	{r3, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08004a3f 	.word	0x08004a3f

08000c10 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <SystemInit+0x40>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	f042 0201 	orr.w	r2, r2, #1
 8000c18:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c1a:	6859      	ldr	r1, [r3, #4]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <SystemInit+0x44>)
 8000c1e:	400a      	ands	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c2c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c34:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000c3c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000c3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c42:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <SystemInit+0x48>)
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	f8ff0000 	.word	0xf8ff0000
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_Init+0x20>)
{
 8000c5e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	f000 f89d 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fd70 	bl	8000754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fd28 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000c78:	2000      	movs	r0, #0
 8000c7a:	bd08      	pop	{r3, pc}
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000c80:	4a02      	ldr	r2, [pc, #8]	; (8000c8c <HAL_IncTick+0xc>)
 8000c82:	6813      	ldr	r3, [r2, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000008c 	.word	0x2000008c

08000c90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c90:	4b01      	ldr	r3, [pc, #4]	; (8000c98 <HAL_GetTick+0x8>)
 8000c92:	6818      	ldr	r0, [r3, #0]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000008c 	.word	0x2000008c

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c9c:	b513      	push	{r0, r1, r4, lr}
 8000c9e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000ca0:	f7ff fff6 	bl	8000c90 <HAL_GetTick>
 8000ca4:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ca6:	f7ff fff3 	bl	8000c90 <HAL_GetTick>
 8000caa:	9b01      	ldr	r3, [sp, #4]
 8000cac:	1b00      	subs	r0, r0, r4
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d3f9      	bcc.n	8000ca6 <HAL_Delay+0xa>
  {
  }
}
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd10      	pop	{r4, pc}

08000cb6 <HAL_ADC_LevelOutOfWindowCallback>:
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000cb8:	6803      	ldr	r3, [r0, #0]
{
 8000cba:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000cbc:	685a      	ldr	r2, [r3, #4]
{
 8000cbe:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000cc0:	0690      	lsls	r0, r2, #26
 8000cc2:	d527      	bpl.n	8000d14 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	0791      	lsls	r1, r2, #30
 8000cc8:	d524      	bpl.n	8000d14 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ccc:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000cce:	bf5e      	ittt	pl
 8000cd0:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000cd2:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000cd6:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000cde:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000ce2:	d110      	bne.n	8000d06 <HAL_ADC_IRQHandler+0x4e>
 8000ce4:	68e2      	ldr	r2, [r4, #12]
 8000ce6:	b972      	cbnz	r2, 8000d06 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	f022 0220 	bic.w	r2, r2, #32
 8000cee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cf6:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cfa:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cfc:	bf5e      	ittt	pl
 8000cfe:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000d00:	f043 0301 	orrpl.w	r3, r3, #1
 8000d04:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fab2 	bl	8000270 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d0c:	f06f 0212 	mvn.w	r2, #18
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	0610      	lsls	r0, r2, #24
 8000d1a:	d530      	bpl.n	8000d7e <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	0751      	lsls	r1, r2, #29
 8000d20:	d52d      	bpl.n	8000d7e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d24:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d26:	bf5e      	ittt	pl
 8000d28:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000d2a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000d2e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000d36:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000d3a:	d00a      	beq.n	8000d52 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d3c:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d3e:	0550      	lsls	r0, r2, #21
 8000d40:	d416      	bmi.n	8000d70 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d48:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000d4c:	d110      	bne.n	8000d70 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d4e:	68e2      	ldr	r2, [r4, #12]
 8000d50:	b972      	cbnz	r2, 8000d70 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d58:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d60:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d64:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d66:	bf5e      	ittt	pl
 8000d68:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000d6a:	f043 0301 	orrpl.w	r3, r3, #1
 8000d6e:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d70:	4620      	mov	r0, r4
 8000d72:	f000 f817 	bl	8000da4 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d76:	f06f 020c 	mvn.w	r2, #12
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	0652      	lsls	r2, r2, #25
 8000d84:	d50d      	bpl.n	8000da2 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	07db      	lsls	r3, r3, #31
 8000d8a:	d50a      	bpl.n	8000da2 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d8e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d94:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d96:	f7ff ff8e 	bl	8000cb6 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d9a:	f06f 0201 	mvn.w	r2, #1
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	bd10      	pop	{r4, pc}

08000da4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000da4:	4770      	bx	lr
	...

08000da8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000daa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db6:	041b      	lsls	r3, r3, #16
 8000db8:	0c1b      	lsrs	r3, r3, #16
 8000dba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dc2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dc4:	60d3      	str	r3, [r2, #12]
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b530      	push	{r4, r5, lr}
 8000dd0:	68dc      	ldr	r4, [r3, #12]
 8000dd2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	bf28      	it	cs
 8000de0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de8:	bf98      	it	ls
 8000dea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	fa05 f303 	lsl.w	r3, r5, r3
 8000df0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df4:	bf88      	it	hi
 8000df6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4019      	ands	r1, r3
 8000dfa:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	fa05 f404 	lsl.w	r4, r5, r4
 8000e00:	3c01      	subs	r4, #1
 8000e02:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e04:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e06:	ea42 0201 	orr.w	r2, r2, r1
 8000e0a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	bfaf      	iteee	ge
 8000e10:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	4b06      	ldrlt	r3, [pc, #24]	; (8000e30 <HAL_NVIC_SetPriority+0x64>)
 8000e16:	f000 000f 	andlt.w	r0, r0, #15
 8000e1a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	bfa5      	ittet	ge
 8000e1e:	b2d2      	uxtbge	r2, r2
 8000e20:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e2a:	bd30      	pop	{r4, r5, pc}
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	e000ed14 	.word	0xe000ed14

08000e34 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e34:	2301      	movs	r3, #1
 8000e36:	0942      	lsrs	r2, r0, #5
 8000e38:	f000 001f 	and.w	r0, r0, #31
 8000e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e40:	4b01      	ldr	r3, [pc, #4]	; (8000e48 <HAL_NVIC_EnableIRQ+0x14>)
 8000e42:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e52:	d20a      	bcs.n	8000e6a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e7a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	bf0c      	ite	eq
 8000e80:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e84:	f022 0204 	bicne.w	r2, r2, #4
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000e94:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e96:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e98:	4f6c      	ldr	r7, [pc, #432]	; (800104c <HAL_GPIO_Init+0x1bc>)
 8000e9a:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e9c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8001058 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000ea0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800105c <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8000ea4:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea8:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000eaa:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000eb2:	45a0      	cmp	r8, r4
 8000eb4:	f040 8085 	bne.w	8000fc2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000eb8:	684d      	ldr	r5, [r1, #4]
 8000eba:	2d12      	cmp	r5, #18
 8000ebc:	f000 80b7 	beq.w	800102e <HAL_GPIO_Init+0x19e>
 8000ec0:	f200 808d 	bhi.w	8000fde <HAL_GPIO_Init+0x14e>
 8000ec4:	2d02      	cmp	r5, #2
 8000ec6:	f000 80af 	beq.w	8001028 <HAL_GPIO_Init+0x198>
 8000eca:	f200 8081 	bhi.w	8000fd0 <HAL_GPIO_Init+0x140>
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	f000 8091 	beq.w	8000ff6 <HAL_GPIO_Init+0x166>
 8000ed4:	2d01      	cmp	r5, #1
 8000ed6:	f000 80a5 	beq.w	8001024 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000eda:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ede:	2cff      	cmp	r4, #255	; 0xff
 8000ee0:	bf93      	iteet	ls
 8000ee2:	4682      	movls	sl, r0
 8000ee4:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000ee8:	3d08      	subhi	r5, #8
 8000eea:	f8d0 b000 	ldrls.w	fp, [r0]
 8000eee:	bf92      	itee	ls
 8000ef0:	00b5      	lslls	r5, r6, #2
 8000ef2:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ef6:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000ef8:	fa09 f805 	lsl.w	r8, r9, r5
 8000efc:	ea2b 0808 	bic.w	r8, fp, r8
 8000f00:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f04:	bf88      	it	hi
 8000f06:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000f0a:	ea48 0505 	orr.w	r5, r8, r5
 8000f0e:	f8ca 5000 	str.w	r5, [sl]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f12:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f16:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f1a:	d052      	beq.n	8000fc2 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1c:	69bd      	ldr	r5, [r7, #24]
 8000f1e:	f026 0803 	bic.w	r8, r6, #3
 8000f22:	f045 0501 	orr.w	r5, r5, #1
 8000f26:	61bd      	str	r5, [r7, #24]
 8000f28:	69bd      	ldr	r5, [r7, #24]
 8000f2a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f2e:	f005 0501 	and.w	r5, r5, #1
 8000f32:	9501      	str	r5, [sp, #4]
 8000f34:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f38:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f3e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8000f42:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f46:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f4a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f4e:	4d41      	ldr	r5, [pc, #260]	; (8001054 <HAL_GPIO_Init+0x1c4>)
 8000f50:	42a8      	cmp	r0, r5
 8000f52:	d071      	beq.n	8001038 <HAL_GPIO_Init+0x1a8>
 8000f54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f58:	42a8      	cmp	r0, r5
 8000f5a:	d06f      	beq.n	800103c <HAL_GPIO_Init+0x1ac>
 8000f5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d06d      	beq.n	8001040 <HAL_GPIO_Init+0x1b0>
 8000f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d06b      	beq.n	8001044 <HAL_GPIO_Init+0x1b4>
 8000f6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f70:	42a8      	cmp	r0, r5
 8000f72:	d069      	beq.n	8001048 <HAL_GPIO_Init+0x1b8>
 8000f74:	4570      	cmp	r0, lr
 8000f76:	bf0c      	ite	eq
 8000f78:	2505      	moveq	r5, #5
 8000f7a:	2506      	movne	r5, #6
 8000f7c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f80:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 8000f84:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000f88:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000f8e:	bf14      	ite	ne
 8000f90:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000f92:	43a5      	biceq	r5, r4
 8000f94:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000f96:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000f9c:	bf14      	ite	ne
 8000f9e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000fa0:	43a5      	biceq	r5, r4
 8000fa2:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000fa4:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000faa:	bf14      	ite	ne
 8000fac:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000fae:	43a5      	biceq	r5, r4
 8000fb0:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000fb2:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000fb8:	bf14      	ite	ne
 8000fba:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000fbc:	ea25 0404 	biceq.w	r4, r5, r4
 8000fc0:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fc2:	3601      	adds	r6, #1
 8000fc4:	2e10      	cmp	r6, #16
 8000fc6:	f47f af6d 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000fca:	b003      	add	sp, #12
 8000fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000fd0:	2d03      	cmp	r5, #3
 8000fd2:	d025      	beq.n	8001020 <HAL_GPIO_Init+0x190>
 8000fd4:	2d11      	cmp	r5, #17
 8000fd6:	d180      	bne.n	8000eda <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd8:	68ca      	ldr	r2, [r1, #12]
 8000fda:	3204      	adds	r2, #4
          break;
 8000fdc:	e77d      	b.n	8000eda <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000fde:	4565      	cmp	r5, ip
 8000fe0:	d009      	beq.n	8000ff6 <HAL_GPIO_Init+0x166>
 8000fe2:	d812      	bhi.n	800100a <HAL_GPIO_Init+0x17a>
 8000fe4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001060 <HAL_GPIO_Init+0x1d0>
 8000fe8:	454d      	cmp	r5, r9
 8000fea:	d004      	beq.n	8000ff6 <HAL_GPIO_Init+0x166>
 8000fec:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000ff0:	454d      	cmp	r5, r9
 8000ff2:	f47f af72 	bne.w	8000eda <HAL_GPIO_Init+0x4a>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000ff6:	688a      	ldr	r2, [r1, #8]
 8000ff8:	b1e2      	cbz	r2, 8001034 <HAL_GPIO_Init+0x1a4>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000ffa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000ffc:	bf0c      	ite	eq
 8000ffe:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001002:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001006:	2208      	movs	r2, #8
 8001008:	e767      	b.n	8000eda <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800100a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8001064 <HAL_GPIO_Init+0x1d4>
 800100e:	454d      	cmp	r5, r9
 8001010:	d0f1      	beq.n	8000ff6 <HAL_GPIO_Init+0x166>
 8001012:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001016:	454d      	cmp	r5, r9
 8001018:	d0ed      	beq.n	8000ff6 <HAL_GPIO_Init+0x166>
 800101a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800101e:	e7e7      	b.n	8000ff0 <HAL_GPIO_Init+0x160>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001020:	2200      	movs	r2, #0
 8001022:	e75a      	b.n	8000eda <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001024:	68ca      	ldr	r2, [r1, #12]
          break;
 8001026:	e758      	b.n	8000eda <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001028:	68ca      	ldr	r2, [r1, #12]
 800102a:	3208      	adds	r2, #8
          break;
 800102c:	e755      	b.n	8000eda <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102e:	68ca      	ldr	r2, [r1, #12]
 8001030:	320c      	adds	r2, #12
          break;
 8001032:	e752      	b.n	8000eda <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001034:	2204      	movs	r2, #4
 8001036:	e750      	b.n	8000eda <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001038:	2500      	movs	r5, #0
 800103a:	e79f      	b.n	8000f7c <HAL_GPIO_Init+0xec>
 800103c:	2501      	movs	r5, #1
 800103e:	e79d      	b.n	8000f7c <HAL_GPIO_Init+0xec>
 8001040:	2502      	movs	r5, #2
 8001042:	e79b      	b.n	8000f7c <HAL_GPIO_Init+0xec>
 8001044:	2503      	movs	r5, #3
 8001046:	e799      	b.n	8000f7c <HAL_GPIO_Init+0xec>
 8001048:	2504      	movs	r5, #4
 800104a:	e797      	b.n	8000f7c <HAL_GPIO_Init+0xec>
 800104c:	40021000 	.word	0x40021000
 8001050:	40010400 	.word	0x40010400
 8001054:	40010800 	.word	0x40010800
 8001058:	40011c00 	.word	0x40011c00
 800105c:	10210000 	.word	0x10210000
 8001060:	10110000 	.word	0x10110000
 8001064:	10310000 	.word	0x10310000

08001068 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	b10a      	cbz	r2, 800106e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800106a:	6101      	str	r1, [r0, #16]
 800106c:	4770      	bx	lr
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	e7fb      	b.n	800106a <HAL_GPIO_WritePin+0x2>

08001072 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001072:	68c3      	ldr	r3, [r0, #12]
 8001074:	4059      	eors	r1, r3
 8001076:	60c1      	str	r1, [r0, #12]
 8001078:	4770      	bx	lr
	...

0800107c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800107c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001080:	6959      	ldr	r1, [r3, #20]
 8001082:	4201      	tst	r1, r0
 8001084:	d002      	beq.n	800108c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001086:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001088:	f7ff f902 	bl	8000290 <HAL_GPIO_EXTI_Callback>
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001094:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
{
 8001098:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800109a:	2a01      	cmp	r2, #1
{
 800109c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800109e:	d00b      	beq.n	80010b8 <HAL_PCD_SetAddress+0x24>
 80010a0:	2201      	movs	r2, #1
 80010a2:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 80010a6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f001 ff34 	bl	8002f18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
 80010b6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80010b8:	2002      	movs	r0, #2
  return HAL_OK;
}
 80010ba:	bd10      	pop	{r4, pc}

080010bc <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80010bc:	b538      	push	{r3, r4, r5, lr}
 80010be:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80010c0:	b248      	sxtb	r0, r1
 80010c2:	2800      	cmp	r0, #0
 80010c4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010c8:	bfb5      	itete	lt
 80010ca:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80010ce:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010d2:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80010d4:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80010d8:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 80010da:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80010dc:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80010de:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80010e0:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
  ep->maxpacket = ep_mps;
 80010e4:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d009      	beq.n	80010fe <HAL_PCD_EP_Open+0x42>
 80010ea:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80010ec:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80010ee:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80010f2:	f001 fd29 	bl	8002b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80010fe:	2002      	movs	r0, #2
}
 8001100:	bd38      	pop	{r3, r4, r5, pc}

08001102 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001102:	b570      	push	{r4, r5, r6, lr}
 8001104:	4604      	mov	r4, r0
 8001106:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800110a:	0170      	lsls	r0, r6, #5
 800110c:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 800110e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
  ep->xfer_count = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
  ep->is_in = 0;
 8001118:	f885 3209 	strb.w	r3, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 800111c:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
  ep->xfer_buff = pBuf;  
 8001120:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c
  __HAL_LOCK(hpcd);
 8001124:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 8001126:	f885 6208 	strb.w	r6, [r5, #520]	; 0x208
  __HAL_LOCK(hpcd);
 800112a:	d00c      	beq.n	8001146 <HAL_PCD_EP_Receive+0x44>
 800112c:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800112e:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8001132:	1821      	adds	r1, r4, r0
  __HAL_LOCK(hpcd);
 8001134:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001138:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800113a:	f001 ff0b 	bl	8002f54 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 800113e:	2000      	movs	r0, #0
 8001140:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001144:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001146:	2002      	movs	r0, #2
}
 8001148:	bd70      	pop	{r4, r5, r6, pc}

0800114a <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800114a:	b570      	push	{r4, r5, r6, lr}
 800114c:	4604      	mov	r4, r0
 800114e:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001152:	0170      	lsls	r0, r6, #5
 8001154:	1825      	adds	r5, r4, r0
  ep->xfer_len = len;
 8001156:	642b      	str	r3, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	646b      	str	r3, [r5, #68]	; 0x44
  ep->is_in = 1;
 800115c:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 800115e:	63ea      	str	r2, [r5, #60]	; 0x3c
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd);
 8001160:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
  ep->is_in = 1;
 8001164:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  __HAL_LOCK(hpcd);
 8001168:	429a      	cmp	r2, r3
  ep->num = ep_addr & 0x7F;
 800116a:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
  __HAL_LOCK(hpcd);
 800116e:	d00a      	beq.n	8001186 <HAL_PCD_EP_Transmit+0x3c>
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001170:	3028      	adds	r0, #40	; 0x28
 8001172:	1821      	adds	r1, r4, r0
  __HAL_LOCK(hpcd);
 8001174:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001178:	6820      	ldr	r0, [r4, #0]
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800117a:	f001 feeb 	bl	8002f54 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800117e:	2000      	movs	r0, #0
 8001180:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  
  return HAL_OK;
 8001184:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001186:	2002      	movs	r0, #2
}
 8001188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800118c <HAL_PCD_IRQHandler>:
{
 800118c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001190:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001192:	6800      	ldr	r0, [r0, #0]
 8001194:	f001 fec6 	bl	8002f24 <USB_ReadInterrupts>
 8001198:	0400      	lsls	r0, r0, #16
 800119a:	f100 8094 	bmi.w	80012c6 <HAL_PCD_IRQHandler+0x13a>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	f001 fec0 	bl	8002f24 <USB_ReadInterrupts>
 80011a4:	0541      	lsls	r1, r0, #21
 80011a6:	d50f      	bpl.n	80011c8 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011a8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80011aa:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c1b      	lsrs	r3, r3, #16
 80011b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80011bc:	f7ff fca1 	bl	8000b02 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff ff66 	bl	8001094 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80011c8:	6820      	ldr	r0, [r4, #0]
 80011ca:	f001 feab 	bl	8002f24 <USB_ReadInterrupts>
 80011ce:	0447      	lsls	r7, r0, #17
 80011d0:	d508      	bpl.n	80011e4 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80011e4:	6820      	ldr	r0, [r4, #0]
 80011e6:	f001 fe9d 	bl	8002f24 <USB_ReadInterrupts>
 80011ea:	0486      	lsls	r6, r0, #18
 80011ec:	d508      	bpl.n	8001200 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80011f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	0c1b      	lsrs	r3, r3, #16
 80011fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	f001 fe8f 	bl	8002f24 <USB_ReadInterrupts>
 8001206:	04c5      	lsls	r5, r0, #19
 8001208:	d518      	bpl.n	800123c <HAL_PCD_IRQHandler+0xb0>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800120a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800120c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800120e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	041b      	lsls	r3, r3, #16
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800121e:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8001222:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001226:	f7ff fc89 	bl	8000b3c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800122a:	6822      	ldr	r2, [r4, #0]
 800122c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	0c1b      	lsrs	r3, r3, #16
 8001238:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800123c:	6820      	ldr	r0, [r4, #0]
 800123e:	f001 fe71 	bl	8002f24 <USB_ReadInterrupts>
 8001242:	0500      	lsls	r0, r0, #20
 8001244:	d51d      	bpl.n	8001282 <HAL_PCD_IRQHandler+0xf6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001246:	6820      	ldr	r0, [r4, #0]
 8001248:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800124c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001258:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800125c:	b29b      	uxth	r3, r3
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001266:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800126a:	b29b      	uxth	r3, r3
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8001274:	f001 fe56 	bl	8002f24 <USB_ReadInterrupts>
 8001278:	04c1      	lsls	r1, r0, #19
 800127a:	d402      	bmi.n	8001282 <HAL_PCD_IRQHandler+0xf6>
      HAL_PCD_SuspendCallback(hpcd);
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff fc4d 	bl	8000b1c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001282:	6820      	ldr	r0, [r4, #0]
 8001284:	f001 fe4e 	bl	8002f24 <USB_ReadInterrupts>
 8001288:	0582      	lsls	r2, r0, #22
 800128a:	d50b      	bpl.n	80012a4 <HAL_PCD_IRQHandler+0x118>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800128c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800128e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001290:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	0c1b      	lsrs	r3, r3, #16
 800129c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80012a0:	f7ff fc2b 	bl	8000afa <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80012a4:	6820      	ldr	r0, [r4, #0]
 80012a6:	f001 fe3d 	bl	8002f24 <USB_ReadInterrupts>
 80012aa:	05c3      	lsls	r3, r0, #23
 80012ac:	d508      	bpl.n	80012c0 <HAL_PCD_IRQHandler+0x134>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	041b      	lsls	r3, r3, #16
 80012ba:	0c1b      	lsrs	r3, r3, #16
 80012bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80012c0:	b002      	add	sp, #8
 80012c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80012c6:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80012c8:	4fc3      	ldr	r7, [pc, #780]	; (80015d8 <HAL_PCD_IRQHandler+0x44c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80012ca:	f8df 8310 	ldr.w	r8, [pc, #784]	; 80015dc <HAL_PCD_IRQHandler+0x450>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012ce:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80015e0 <HAL_PCD_IRQHandler+0x454>
  __IO uint16_t wIstr = 0;  
 80012d2:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80012d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80012da:	6820      	ldr	r0, [r4, #0]
 80012dc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	f57f af59 	bpl.w	800119e <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80012ec:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 80012f0:	f015 050f 	ands.w	r5, r5, #15
 80012f4:	f040 80ab 	bne.w	800144e <HAL_PCD_IRQHandler+0x2c2>
      if ((wIstr & USB_ISTR_DIR) == 0)
 80012f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80012fc:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 80012fe:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001302:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8001304:	d126      	bne.n	8001354 <HAL_PCD_IRQHandler+0x1c8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001306:	403b      	ands	r3, r7
 8001308:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800130a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800130e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001312:	b29b      	uxth	r3, r3
 8001314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001318:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800131c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001320:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001326:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001328:	4413      	add	r3, r2
 800132a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800132c:	4620      	mov	r0, r4
 800132e:	f7ff fbdd 	bl	8000aec <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8001332:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0cf      	beq.n	80012da <HAL_PCD_IRQHandler+0x14e>
 800133a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800133c:	2a00      	cmp	r2, #0
 800133e:	d1cc      	bne.n	80012da <HAL_PCD_IRQHandler+0x14e>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001340:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001344:	6821      	ldr	r1, [r4, #0]
 8001346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800134e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001352:	e7c2      	b.n	80012da <HAL_PCD_IRQHandler+0x14e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001354:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8001358:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800135c:	051a      	lsls	r2, r3, #20
 800135e:	d51f      	bpl.n	80013a0 <HAL_PCD_IRQHandler+0x214>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001360:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001364:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 8001368:	b29b      	uxth	r3, r3
 800136a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800136e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001372:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001376:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800137a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800137e:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001382:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8001386:	f001 feb9 	bl	80030fc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800138a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800138c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800138e:	8813      	ldrh	r3, [r2, #0]
 8001390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001394:	051b      	lsls	r3, r3, #20
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800139a:	f7ff fb99 	bl	8000ad0 <HAL_PCD_SetupStageCallback>
 800139e:	e79c      	b.n	80012da <HAL_PCD_IRQHandler+0x14e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80013a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	d598      	bpl.n	80012da <HAL_PCD_IRQHandler+0x14e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013a8:	8803      	ldrh	r3, [r0, #0]
 80013aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013ae:	051b      	lsls	r3, r3, #20
 80013b0:	0d1b      	lsrs	r3, r3, #20
 80013b2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013b8:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80013bc:	b29b      	uxth	r3, r3
 80013be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80013c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ce:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          if (ep->xfer_count != 0)
 80013d2:	b163      	cbz	r3, 80013ee <HAL_PCD_IRQHandler+0x262>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80013d4:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 80013d8:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80013dc:	f001 fe8e 	bl	80030fc <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80013e0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80013e4:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80013e8:	4413      	add	r3, r2
 80013ea:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80013ee:	2100      	movs	r1, #0
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fb73 	bl	8000adc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013f6:	6822      	ldr	r2, [r4, #0]
 80013f8:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 80013fc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001400:	2d3e      	cmp	r5, #62	; 0x3e
 8001402:	b289      	uxth	r1, r1
 8001404:	f101 0106 	add.w	r1, r1, #6
 8001408:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800140c:	d917      	bls.n	800143e <HAL_PCD_IRQHandler+0x2b2>
 800140e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001412:	06ee      	lsls	r6, r5, #27
 8001414:	bf04      	itt	eq
 8001416:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800141a:	b29b      	uxtheq	r3, r3
 800141c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001420:	b29b      	uxth	r3, r3
 8001422:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001426:	8813      	ldrh	r3, [r2, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	ea03 0308 	and.w	r3, r3, r8
 800142e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143a:	8013      	strh	r3, [r2, #0]
 800143c:	e74d      	b.n	80012da <HAL_PCD_IRQHandler+0x14e>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800143e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001442:	07ed      	lsls	r5, r5, #31
 8001444:	bf44      	itt	mi
 8001446:	3301      	addmi	r3, #1
 8001448:	b29b      	uxthmi	r3, r3
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	e7e8      	b.n	8001420 <HAL_PCD_IRQHandler+0x294>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800144e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8001458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800145c:	0419      	lsls	r1, r3, #16
 800145e:	d53d      	bpl.n	80014dc <HAL_PCD_IRQHandler+0x350>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001460:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 8001464:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800146c:	051b      	lsls	r3, r3, #20
 800146e:	0d1b      	lsrs	r3, r3, #20
 8001470:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 8001474:	eb04 010a 	add.w	r1, r4, sl
 8001478:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 800147c:	2b00      	cmp	r3, #0
 800147e:	d16f      	bne.n	8001560 <HAL_PCD_IRQHandler+0x3d4>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001480:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001484:	f891 2208 	ldrb.w	r2, [r1, #520]	; 0x208
 8001488:	b29b      	uxth	r3, r3
 800148a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800148e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001492:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8001496:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 800149a:	b136      	cbz	r6, 80014aa <HAL_PCD_IRQHandler+0x31e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800149c:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 80014a0:	4633      	mov	r3, r6
 80014a2:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80014a6:	f001 fe29 	bl	80030fc <USB_ReadPMA>
 80014aa:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80014ae:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 80014b2:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
        ep->xfer_count+=count;
 80014b6:	4433      	add	r3, r6
 80014b8:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80014bc:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
        ep->xfer_buff+=count;
 80014c0:	4432      	add	r2, r6
 80014c2:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80014c6:	b11b      	cbz	r3, 80014d0 <HAL_PCD_IRQHandler+0x344>
 80014c8:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 80014cc:	4286      	cmp	r6, r0
 80014ce:	d27d      	bcs.n	80015cc <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80014d0:	44a2      	add	sl, r4
 80014d2:	f89a 1208 	ldrb.w	r1, [sl, #520]	; 0x208
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fb00 	bl	8000adc <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80014dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80014e0:	061a      	lsls	r2, r3, #24
 80014e2:	f57f aefa 	bpl.w	80012da <HAL_PCD_IRQHandler+0x14e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014e6:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80014e8:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014ea:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 80014ee:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	403b      	ands	r3, r7
 80014f4:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 80014f8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80014fc:	3502      	adds	r5, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d170      	bne.n	80015e4 <HAL_PCD_IRQHandler+0x458>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001502:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001506:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 800150a:	b29b      	uxth	r3, r3
 800150c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001510:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001518:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800151c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001520:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 8001522:	b11b      	cbz	r3, 800152c <HAL_PCD_IRQHandler+0x3a0>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001524:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001526:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001528:	f001 fd02 	bl	8002f30 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800152c:	6822      	ldr	r2, [r4, #0]
 800152e:	4426      	add	r6, r4
 8001530:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001534:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001538:	b29b      	uxth	r3, r3
 800153a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800153e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001542:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8001546:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001548:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800154c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 800154e:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8001550:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001552:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001554:	4620      	mov	r0, r4
        if (ep->xfer_len == 0)
 8001556:	2b00      	cmp	r3, #0
 8001558:	d17a      	bne.n	8001650 <HAL_PCD_IRQHandler+0x4c4>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800155a:	f7ff fac7 	bl	8000aec <HAL_PCD_DataInStageCallback>
 800155e:	e6bc      	b.n	80012da <HAL_PCD_IRQHandler+0x14e>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001560:	f891 3208 	ldrb.w	r3, [r1, #520]	; 0x208
 8001564:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800156e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001572:	b292      	uxth	r2, r2
 8001574:	4413      	add	r3, r2
 8001576:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800157a:	d01d      	beq.n	80015b8 <HAL_PCD_IRQHandler+0x42c>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800157c:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8001580:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8001584:	b136      	cbz	r6, 8001594 <HAL_PCD_IRQHandler+0x408>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001586:	4633      	mov	r3, r6
 8001588:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800158c:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8001590:	f001 fdb4 	bl	80030fc <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001594:	eb04 030a 	add.w	r3, r4, sl
 8001598:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80015a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015a6:	051b      	lsls	r3, r3, #20
 80015a8:	0d1b      	lsrs	r3, r3, #20
 80015aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015b2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80015b6:	e778      	b.n	80014aa <HAL_PCD_IRQHandler+0x31e>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80015b8:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 80015bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d0e7      	beq.n	8001594 <HAL_PCD_IRQHandler+0x408>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80015c4:	4633      	mov	r3, r6
 80015c6:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 80015ca:	e7df      	b.n	800158c <HAL_PCD_IRQHandler+0x400>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80015cc:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fd96 	bl	8001102 <HAL_PCD_EP_Receive>
 80015d6:	e781      	b.n	80014dc <HAL_PCD_IRQHandler+0x350>
 80015d8:	ffff8f0f 	.word	0xffff8f0f
 80015dc:	ffffbf8f 	.word	0xffffbf8f
 80015e0:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80015e4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80015e8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015f2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015f6:	b292      	uxth	r2, r2
 80015f8:	4413      	add	r3, r2
 80015fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80015fe:	d01c      	beq.n	800163a <HAL_PCD_IRQHandler+0x4ae>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001600:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001604:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800160c:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 800160e:	b11b      	cbz	r3, 8001618 <HAL_PCD_IRQHandler+0x48c>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001610:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001612:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001614:	f001 fc8c 	bl	8002f30 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001618:	19a3      	adds	r3, r4, r6
 800161a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001628:	051b      	lsls	r3, r3, #20
 800162a:	0d1b      	lsrs	r3, r3, #20
 800162c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001634:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001638:	e778      	b.n	800152c <HAL_PCD_IRQHandler+0x3a0>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800163a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800163e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001646:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0e5      	beq.n	8001618 <HAL_PCD_IRQHandler+0x48c>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800164c:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800164e:	e7e0      	b.n	8001612 <HAL_PCD_IRQHandler+0x486>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001650:	f7ff fd7b 	bl	800114a <HAL_PCD_EP_Transmit>
 8001654:	e641      	b.n	80012da <HAL_PCD_IRQHandler+0x14e>
 8001656:	bf00      	nop

08001658 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1;
 8001658:	2201      	movs	r2, #1
{
 800165a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800165c:	b24b      	sxtb	r3, r1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001664:	bfb5      	itete	lt
 8001666:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 800166a:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800166e:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001670:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001674:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8001676:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8001678:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800167a:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800167c:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 800167e:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{
 8001682:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001684:	4293      	cmp	r3, r2
 8001686:	d00e      	beq.n	80016a6 <HAL_PCD_EP_SetStall+0x4e>
 8001688:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 800168c:	6800      	ldr	r0, [r0, #0]
 800168e:	f001 fbcf 	bl	8002e30 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001692:	b925      	cbnz	r5, 800169e <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001694:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f001 fc47 	bl	8002f2c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800169e:	2000      	movs	r0, #0
 80016a0:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80016a6:	2002      	movs	r0, #2
}
 80016a8:	bd38      	pop	{r3, r4, r5, pc}

080016aa <HAL_PCD_EP_ClrStall>:
{
 80016aa:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0;
 80016ac:	2400      	movs	r4, #0
  if ((0x80 & ep_addr) == 0x80)
 80016ae:	b24b      	sxtb	r3, r1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016b6:	bfb5      	itete	lt
 80016b8:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 80016bc:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016c0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80016c2:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80016c6:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80016c8:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80016ca:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80016cc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80016ce:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{
 80016d2:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d009      	beq.n	80016ec <HAL_PCD_EP_ClrStall+0x42>
 80016d8:	2301      	movs	r3, #1
 80016da:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 80016de:	6800      	ldr	r0, [r0, #0]
 80016e0:	f001 fbd8 	bl	8002e94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80016e4:	f885 43e8 	strb.w	r4, [r5, #1000]	; 0x3e8
  return HAL_OK;
 80016e8:	4620      	mov	r0, r4
 80016ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80016ec:	2002      	movs	r0, #2
}
 80016ee:	bd38      	pop	{r3, r4, r5, pc}

080016f0 <HAL_PWR_EnableBkUpAccess>:
 80016f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f4:	fa93 f3a3 	rbit	r3, r3
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	2201      	movs	r2, #1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001704:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	4770      	bx	lr

0800170c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170c:	6803      	ldr	r3, [r0, #0]
{
 800170e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	07de      	lsls	r6, r3, #31
{
 8001714:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	d434      	bmi.n	8001782 <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	079c      	lsls	r4, r3, #30
 800171c:	f100 80a7 	bmi.w	800186e <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	071a      	lsls	r2, r3, #28
 8001724:	d523      	bpl.n	800176e <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001726:	69aa      	ldr	r2, [r5, #24]
 8001728:	4cbe      	ldr	r4, [pc, #760]	; (8001a24 <HAL_RCC_OscConfig+0x318>)
 800172a:	2301      	movs	r3, #1
 800172c:	49be      	ldr	r1, [pc, #760]	; (8001a28 <HAL_RCC_OscConfig+0x31c>)
 800172e:	2a00      	cmp	r2, #0
 8001730:	f000 8115 	beq.w	800195e <HAL_RCC_OscConfig+0x252>
 8001734:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff faa6 	bl	8000c90 <HAL_GetTick>
 8001744:	2602      	movs	r6, #2
 8001746:	4607      	mov	r7, r0
 8001748:	fa96 f3a6 	rbit	r3, r6
 800174c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001750:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001752:	fa96 f3a6 	rbit	r3, r6
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	07db      	lsls	r3, r3, #31
 8001764:	f140 80f4 	bpl.w	8001950 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff fa97 	bl	8000c9c <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	0759      	lsls	r1, r3, #29
 8001772:	f100 8114 	bmi.w	800199e <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001776:	69ea      	ldr	r2, [r5, #28]
 8001778:	2a00      	cmp	r2, #0
 800177a:	f040 8193 	bne.w	8001aa4 <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800177e:	2000      	movs	r0, #0
 8001780:	e020      	b.n	80017c4 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001782:	4ca8      	ldr	r4, [pc, #672]	; (8001a24 <HAL_RCC_OscConfig+0x318>)
 8001784:	6863      	ldr	r3, [r4, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b04      	cmp	r3, #4
 800178c:	d007      	beq.n	800179e <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d118      	bne.n	80017ca <HAL_RCC_OscConfig+0xbe>
 8001798:	6863      	ldr	r3, [r4, #4]
 800179a:	03d8      	lsls	r0, r3, #15
 800179c:	d515      	bpl.n	80017ca <HAL_RCC_OscConfig+0xbe>
 800179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	6822      	ldr	r2, [r4, #0]
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	07d9      	lsls	r1, r3, #31
 80017ba:	d5ad      	bpl.n	8001718 <HAL_RCC_OscConfig+0xc>
 80017bc:	686b      	ldr	r3, [r5, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1aa      	bne.n	8001718 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80017c2:	2001      	movs	r0, #1
}
 80017c4:	b003      	add	sp, #12
 80017c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	686b      	ldr	r3, [r5, #4]
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d0:	d11c      	bne.n	800180c <HAL_RCC_OscConfig+0x100>
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017da:	f7ff fa59 	bl	8000c90 <HAL_GetTick>
 80017de:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80017e2:	4607      	mov	r7, r0
 80017e4:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	fa96 f3a6 	rbit	r3, r6
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	07da      	lsls	r2, r3, #31
 80017fc:	d48c      	bmi.n	8001718 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fe:	f7ff fa47 	bl	8000c90 <HAL_GetTick>
 8001802:	1bc0      	subs	r0, r0, r7
 8001804:	2864      	cmp	r0, #100	; 0x64
 8001806:	d9ed      	bls.n	80017e4 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8001808:	2003      	movs	r0, #3
 800180a:	e7db      	b.n	80017c4 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180c:	bb03      	cbnz	r3, 8001850 <HAL_RCC_OscConfig+0x144>
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6023      	str	r3, [r4, #0]
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001820:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001822:	f7ff fa35 	bl	8000c90 <HAL_GetTick>
 8001826:	4607      	mov	r7, r0
 8001828:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	fa96 f3a6 	rbit	r3, r6
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	07db      	lsls	r3, r3, #31
 8001840:	f57f af6a 	bpl.w	8001718 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fa24 	bl	8000c90 <HAL_GetTick>
 8001848:	1bc0      	subs	r0, r0, r7
 800184a:	2864      	cmp	r0, #100	; 0x64
 800184c:	d9ec      	bls.n	8001828 <HAL_RCC_OscConfig+0x11c>
 800184e:	e7db      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	d103      	bne.n	8001860 <HAL_RCC_OscConfig+0x154>
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6023      	str	r3, [r4, #0]
 800185e:	e7b8      	b.n	80017d2 <HAL_RCC_OscConfig+0xc6>
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186c:	e7b4      	b.n	80017d8 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800186e:	4c6d      	ldr	r4, [pc, #436]	; (8001a24 <HAL_RCC_OscConfig+0x318>)
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	f013 0f0c 	tst.w	r3, #12
 8001876:	d007      	beq.n	8001888 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	d120      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1b8>
 8001882:	6863      	ldr	r3, [r4, #4]
 8001884:	03df      	lsls	r7, r3, #15
 8001886:	d41d      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x1b8>
 8001888:	2302      	movs	r3, #2
 800188a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	07de      	lsls	r6, r3, #31
 80018a2:	d502      	bpl.n	80018aa <HAL_RCC_OscConfig+0x19e>
 80018a4:	692b      	ldr	r3, [r5, #16]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d18b      	bne.n	80017c2 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	6821      	ldr	r1, [r4, #0]
 80018ac:	23f8      	movs	r3, #248	; 0xf8
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	fab3 f283 	clz	r2, r3
 80018b6:	696b      	ldr	r3, [r5, #20]
 80018b8:	4093      	lsls	r3, r2
 80018ba:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80018be:	4313      	orrs	r3, r2
 80018c0:	6023      	str	r3, [r4, #0]
 80018c2:	e72d      	b.n	8001720 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c4:	692a      	ldr	r2, [r5, #16]
 80018c6:	2301      	movs	r3, #1
 80018c8:	b302      	cbz	r2, 800190c <HAL_RCC_OscConfig+0x200>
 80018ca:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 80018ce:	fab2 f282 	clz	r2, r2
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80018d8:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80018dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80018de:	f7ff f9d7 	bl	8000c90 <HAL_GetTick>
 80018e2:	2602      	movs	r6, #2
 80018e4:	4607      	mov	r7, r0
 80018e6:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	fa96 f3a6 	rbit	r3, r6
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	07d8      	lsls	r0, r3, #31
 80018fe:	d4d4      	bmi.n	80018aa <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff f9c6 	bl	8000c90 <HAL_GetTick>
 8001904:	1bc0      	subs	r0, r0, r7
 8001906:	2802      	cmp	r0, #2
 8001908:	d9ed      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1da>
 800190a:	e77d      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
 800190c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800191a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800191e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001920:	f7ff f9b6 	bl	8000c90 <HAL_GetTick>
 8001924:	2602      	movs	r6, #2
 8001926:	4607      	mov	r7, r0
 8001928:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	fa96 f3a6 	rbit	r3, r6
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	07d9      	lsls	r1, r3, #31
 8001940:	f57f aeee 	bpl.w	8001720 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff f9a4 	bl	8000c90 <HAL_GetTick>
 8001948:	1bc0      	subs	r0, r0, r7
 800194a:	2802      	cmp	r0, #2
 800194c:	d9ec      	bls.n	8001928 <HAL_RCC_OscConfig+0x21c>
 800194e:	e75b      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff f99e 	bl	8000c90 <HAL_GetTick>
 8001954:	1bc0      	subs	r0, r0, r7
 8001956:	2802      	cmp	r0, #2
 8001958:	f67f aef6 	bls.w	8001748 <HAL_RCC_OscConfig+0x3c>
 800195c:	e754      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
 800195e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 800196a:	f7ff f991 	bl	8000c90 <HAL_GetTick>
 800196e:	2602      	movs	r6, #2
 8001970:	4607      	mov	r7, r0
 8001972:	fa96 f3a6 	rbit	r3, r6
 8001976:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800197c:	fa96 f3a6 	rbit	r3, r6
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	07d8      	lsls	r0, r3, #31
 800198e:	f57f aeee 	bpl.w	800176e <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff f97d 	bl	8000c90 <HAL_GetTick>
 8001996:	1bc0      	subs	r0, r0, r7
 8001998:	2802      	cmp	r0, #2
 800199a:	d9ea      	bls.n	8001972 <HAL_RCC_OscConfig+0x266>
 800199c:	e734      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4c21      	ldr	r4, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a0:	4e22      	ldr	r6, [pc, #136]	; (8001a2c <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	69e3      	ldr	r3, [r4, #28]
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61e3      	str	r3, [r4, #28]
 80019aa:	69e3      	ldr	r3, [r4, #28]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b4:	6833      	ldr	r3, [r6, #0]
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019bc:	f7ff f968 	bl	8000c90 <HAL_GetTick>
 80019c0:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019c2:	6833      	ldr	r3, [r6, #0]
 80019c4:	05da      	lsls	r2, r3, #23
 80019c6:	d526      	bpl.n	8001a16 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	68eb      	ldr	r3, [r5, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d130      	bne.n	8001a30 <HAL_RCC_OscConfig+0x324>
 80019ce:	6a23      	ldr	r3, [r4, #32]
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019d6:	f7ff f95b 	bl	8000c90 <HAL_GetTick>
 80019da:	2602      	movs	r6, #2
 80019dc:	4681      	mov	r9, r0
 80019de:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f241 3788 	movw	r7, #5000	; 0x1388
 80019e4:	fa96 f3a6 	rbit	r3, r6
 80019e8:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d055      	beq.n	8001a9c <HAL_RCC_OscConfig+0x390>
 80019f0:	6a22      	ldr	r2, [r4, #32]
 80019f2:	fa98 f3a8 	rbit	r3, r8
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	07db      	lsls	r3, r3, #31
 8001a04:	f53f aeb7 	bmi.w	8001776 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f942 	bl	8000c90 <HAL_GetTick>
 8001a0c:	eba0 0009 	sub.w	r0, r0, r9
 8001a10:	42b8      	cmp	r0, r7
 8001a12:	d9e7      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2d8>
 8001a14:	e6f8      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7ff f93b 	bl	8000c90 <HAL_GetTick>
 8001a1a:	1bc0      	subs	r0, r0, r7
 8001a1c:	2864      	cmp	r0, #100	; 0x64
 8001a1e:	d9d0      	bls.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
 8001a20:	e6f2      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	42420480 	.word	0x42420480
 8001a2c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a30:	bb33      	cbnz	r3, 8001a80 <HAL_RCC_OscConfig+0x374>
 8001a32:	6a23      	ldr	r3, [r4, #32]
 8001a34:	2602      	movs	r6, #2
 8001a36:	f023 0301 	bic.w	r3, r3, #1
 8001a3a:	6223      	str	r3, [r4, #32]
 8001a3c:	6a23      	ldr	r3, [r4, #32]
 8001a3e:	4637      	mov	r7, r6
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a46:	f7ff f923 	bl	8000c90 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a4e:	4680      	mov	r8, r0
 8001a50:	fa96 f3a6 	rbit	r3, r6
 8001a54:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	b313      	cbz	r3, 8001aa0 <HAL_RCC_OscConfig+0x394>
 8001a5a:	6a22      	ldr	r2, [r4, #32]
 8001a5c:	fa97 f3a7 	rbit	r3, r7
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	07d8      	lsls	r0, r3, #31
 8001a6e:	f57f ae82 	bpl.w	8001776 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f90d 	bl	8000c90 <HAL_GetTick>
 8001a76:	eba0 0008 	sub.w	r0, r0, r8
 8001a7a:	4548      	cmp	r0, r9
 8001a7c:	d9e8      	bls.n	8001a50 <HAL_RCC_OscConfig+0x344>
 8001a7e:	e6c3      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	6a23      	ldr	r3, [r4, #32]
 8001a84:	d103      	bne.n	8001a8e <HAL_RCC_OscConfig+0x382>
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6223      	str	r3, [r4, #32]
 8001a8c:	e79f      	b.n	80019ce <HAL_RCC_OscConfig+0x2c2>
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6223      	str	r3, [r4, #32]
 8001a94:	6a23      	ldr	r3, [r4, #32]
 8001a96:	f023 0304 	bic.w	r3, r3, #4
 8001a9a:	e79b      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a9e:	e7a8      	b.n	80019f2 <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001aa2:	e7db      	b.n	8001a5c <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	4c44      	ldr	r4, [pc, #272]	; (8001bb8 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	6863      	ldr	r3, [r4, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	f43f ae88 	beq.w	80017c2 <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab2:	2a02      	cmp	r2, #2
 8001ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab8:	d159      	bne.n	8001b6e <HAL_RCC_OscConfig+0x462>
 8001aba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001aca:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001ace:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f8de 	bl	8000c90 <HAL_GetTick>
 8001ad4:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001ad8:	4607      	mov	r7, r0
 8001ada:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	fa96 f3a6 	rbit	r3, r6
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	07d9      	lsls	r1, r3, #31
 8001af2:	d436      	bmi.n	8001b62 <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af4:	6a2b      	ldr	r3, [r5, #32]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afc:	6862      	ldr	r2, [r4, #4]
 8001afe:	68a9      	ldr	r1, [r5, #8]
 8001b00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b04:	430a      	orrs	r2, r1
 8001b06:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	6862      	ldr	r2, [r4, #4]
 8001b0a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b0c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b10:	430b      	orrs	r3, r1
 8001b12:	4313      	orrs	r3, r2
 8001b14:	6063      	str	r3, [r4, #4]
 8001b16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b1a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	2201      	movs	r2, #1
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b2a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b30:	f7ff f8ae 	bl	8000c90 <HAL_GetTick>
 8001b34:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001b38:	4606      	mov	r6, r0
 8001b3a:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	fa95 f3a5 	rbit	r3, r5
 8001b44:	fab3 f383 	clz	r3, r3
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	07da      	lsls	r2, r3, #31
 8001b52:	f53f ae14 	bmi.w	800177e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f89b 	bl	8000c90 <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	2802      	cmp	r0, #2
 8001b5e:	d9ec      	bls.n	8001b3a <HAL_RCC_OscConfig+0x42e>
 8001b60:	e652      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f895 	bl	8000c90 <HAL_GetTick>
 8001b66:	1bc0      	subs	r0, r0, r7
 8001b68:	2802      	cmp	r0, #2
 8001b6a:	d9b6      	bls.n	8001ada <HAL_RCC_OscConfig+0x3ce>
 8001b6c:	e64c      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
 8001b6e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	2200      	movs	r2, #0
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001b7e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001b82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b84:	f7ff f884 	bl	8000c90 <HAL_GetTick>
 8001b88:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001b8c:	4606      	mov	r6, r0
 8001b8e:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	6822      	ldr	r2, [r4, #0]
 8001b94:	fa95 f3a5 	rbit	r3, r5
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	07db      	lsls	r3, r3, #31
 8001ba6:	f57f adea 	bpl.w	800177e <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f871 	bl	8000c90 <HAL_GetTick>
 8001bae:	1b80      	subs	r0, r0, r6
 8001bb0:	2802      	cmp	r0, #2
 8001bb2:	d9ec      	bls.n	8001b8e <HAL_RCC_OscConfig+0x482>
 8001bb4:	e628      	b.n	8001808 <HAL_RCC_OscConfig+0xfc>
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001bc0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bc2:	ac02      	add	r4, sp, #8
 8001bc4:	f103 0510 	add.w	r5, r3, #16
 8001bc8:	4622      	mov	r2, r4
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	c203      	stmia	r2!, {r0, r1}
 8001bd2:	42ab      	cmp	r3, r5
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	d1f7      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f88d 3004 	strb.w	r3, [sp, #4]
 8001bde:	2302      	movs	r3, #2
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001be0:	4c18      	ldr	r4, [pc, #96]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x88>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001be2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001be6:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be8:	f001 030c 	and.w	r3, r1, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d124      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x7e>
 8001bf0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001bf4:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001bf8:	fab3 f283 	clz	r2, r3
 8001bfc:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8001c00:	40d3      	lsrs	r3, r2
 8001c02:	aa06      	add	r2, sp, #24
 8001c04:	4413      	add	r3, r2
 8001c06:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c0a:	03cb      	lsls	r3, r1, #15
 8001c0c:	d513      	bpl.n	8001c36 <HAL_RCC_GetSysClockFreq+0x7a>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001c0e:	6863      	ldr	r3, [r4, #4]
 8001c10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c14:	fa92 f2a2 	rbit	r2, r2
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	40d3      	lsrs	r3, r2
 8001c22:	aa06      	add	r2, sp, #24
 8001c24:	4413      	add	r3, r2
 8001c26:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001c2c:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c30:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c32:	b007      	add	sp, #28
 8001c34:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x90>)
 8001c38:	e7fa      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x74>
      sysclockfreq = HSE_VALUE;
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x8c>)
  return sysclockfreq;
 8001c3c:	e7f9      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x76>
 8001c3e:	bf00      	nop
 8001c40:	080049c0 	.word	0x080049c0
 8001c44:	40021000 	.word	0x40021000
 8001c48:	007a1200 	.word	0x007a1200
 8001c4c:	003d0900 	.word	0x003d0900

08001c50 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c50:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <HAL_RCC_ClockConfig+0x158>)
{
 8001c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c56:	6813      	ldr	r3, [r2, #0]
{
 8001c58:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	428b      	cmp	r3, r1
{
 8001c60:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c62:	d330      	bcc.n	8001cc6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	6832      	ldr	r2, [r6, #0]
 8001c66:	0794      	lsls	r4, r2, #30
 8001c68:	d43a      	bmi.n	8001ce0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	07d0      	lsls	r0, r2, #31
 8001c6c:	d440      	bmi.n	8001cf0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c6e:	4a4e      	ldr	r2, [pc, #312]	; (8001da8 <HAL_RCC_ClockConfig+0x158>)
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	429d      	cmp	r5, r3
 8001c78:	f0c0 8084 	bcc.w	8001d84 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	6832      	ldr	r2, [r6, #0]
 8001c7e:	4c4b      	ldr	r4, [pc, #300]	; (8001dac <HAL_RCC_ClockConfig+0x15c>)
 8001c80:	f012 0f04 	tst.w	r2, #4
 8001c84:	f040 8089 	bne.w	8001d9a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	0713      	lsls	r3, r2, #28
 8001c8a:	d506      	bpl.n	8001c9a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8c:	6863      	ldr	r3, [r4, #4]
 8001c8e:	6932      	ldr	r2, [r6, #16]
 8001c90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c98:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c9a:	f7ff ff8f 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	22f0      	movs	r2, #240	; 0xf0
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	fab2 f282 	clz	r2, r2
 8001caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cae:	40d3      	lsrs	r3, r2
 8001cb0:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_RCC_ClockConfig+0x160>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	40d8      	lsrs	r0, r3
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_ClockConfig+0x164>)
 8001cb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7fe fd4a 	bl	8000754 <HAL_InitTick>
  return HAL_OK;
 8001cc0:	2000      	movs	r0, #0
}
 8001cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	f023 0307 	bic.w	r3, r3, #7
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	4299      	cmp	r1, r3
 8001cd8:	d0c4      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4932      	ldr	r1, [pc, #200]	; (8001dac <HAL_RCC_ClockConfig+0x15c>)
 8001ce2:	68b0      	ldr	r0, [r6, #8]
 8001ce4:	684b      	ldr	r3, [r1, #4]
 8001ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cea:	4303      	orrs	r3, r0
 8001cec:	604b      	str	r3, [r1, #4]
 8001cee:	e7bc      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	6872      	ldr	r2, [r6, #4]
 8001cf2:	4c2e      	ldr	r4, [pc, #184]	; (8001dac <HAL_RCC_ClockConfig+0x15c>)
 8001cf4:	2a01      	cmp	r2, #1
 8001cf6:	d128      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xfa>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d12:	07d9      	lsls	r1, r3, #31
 8001d14:	d5e1      	bpl.n	8001cda <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1c:	f023 0303 	bic.w	r3, r3, #3
 8001d20:	431a      	orrs	r2, r3
 8001d22:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001d24:	f7fe ffb4 	bl	8000c90 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001d2a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d099      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3a:	f7fe ffa9 	bl	8000c90 <HAL_GetTick>
 8001d3e:	1bc0      	subs	r0, r0, r7
 8001d40:	4540      	cmp	r0, r8
 8001d42:	d9f5      	bls.n	8001d30 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
 8001d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	2a02      	cmp	r2, #2
 8001d4c:	bf0c      	ite	eq
 8001d4e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001d52:	2302      	movne	r3, #2
 8001d54:	e7d2      	b.n	8001cfc <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5a:	6863      	ldr	r3, [r4, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d084      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe ff94 	bl	8000c90 <HAL_GetTick>
 8001d68:	1bc0      	subs	r0, r0, r7
 8001d6a:	4540      	cmp	r0, r8
 8001d6c:	d9f5      	bls.n	8001d5a <HAL_RCC_ClockConfig+0x10a>
 8001d6e:	e7e9      	b.n	8001d44 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7fe ff8e 	bl	8000c90 <HAL_GetTick>
 8001d74:	1bc0      	subs	r0, r0, r7
 8001d76:	4540      	cmp	r0, r8
 8001d78:	d8e4      	bhi.n	8001d44 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	6863      	ldr	r3, [r4, #4]
 8001d7c:	f013 0f0c 	tst.w	r3, #12
 8001d80:	d1f6      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x120>
 8001d82:	e774      	b.n	8001c6e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	f023 0307 	bic.w	r3, r3, #7
 8001d8a:	432b      	orrs	r3, r5
 8001d8c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	429d      	cmp	r5, r3
 8001d96:	d1a0      	bne.n	8001cda <HAL_RCC_ClockConfig+0x8a>
 8001d98:	e770      	b.n	8001c7c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9a:	6863      	ldr	r3, [r4, #4]
 8001d9c:	68f1      	ldr	r1, [r6, #12]
 8001d9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6063      	str	r3, [r4, #4]
 8001da6:	e76f      	b.n	8001c88 <HAL_RCC_ClockConfig+0x38>
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004a43 	.word	0x08004a43
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001db8:	4b01      	ldr	r3, [pc, #4]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dd8:	40d3      	lsrs	r3, r2
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001de0:	6810      	ldr	r0, [r2, #0]
}    
 8001de2:	40d8      	lsrs	r0, r3
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08004a53 	.word	0x08004a53
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	fa92 f2a2 	rbit	r2, r2
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e08:	40d3      	lsrs	r3, r2
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001e10:	6810      	ldr	r0, [r2, #0]
} 
 8001e12:	40d8      	lsrs	r0, r3
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08004a53 	.word	0x08004a53
 8001e20:	20000000 	.word	0x20000000

08001e24 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e24:	230f      	movs	r3, #15
 8001e26:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_GetClockConfig+0x34>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001e38:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001e40:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e4a:	6103      	str	r3, [r0, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_GetClockConfig+0x38>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	600b      	str	r3, [r1, #0]
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e60:	6803      	ldr	r3, [r0, #0]
{
 8001e62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e66:	07dc      	lsls	r4, r3, #31
{
 8001e68:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e6a:	d51e      	bpl.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4c3c      	ldr	r4, [pc, #240]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x100>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4e3d      	ldr	r6, [pc, #244]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x104>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	69e3      	ldr	r3, [r4, #28]
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	61e3      	str	r3, [r4, #28]
 8001e78:	69e3      	ldr	r3, [r4, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	6833      	ldr	r3, [r6, #0]
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe ff01 	bl	8000c90 <HAL_GetTick>
 8001e8e:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e90:	6833      	ldr	r3, [r6, #0]
 8001e92:	05d8      	lsls	r0, r3, #23
 8001e94:	d51f      	bpl.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e96:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e9c:	d124      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x88>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001e9e:	6a23      	ldr	r3, [r4, #32]
 8001ea0:	686a      	ldr	r2, [r5, #4]
 8001ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	6223      	str	r3, [r4, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eaa:	6828      	ldr	r0, [r5, #0]
 8001eac:	0783      	lsls	r3, r0, #30
 8001eae:	d506      	bpl.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001eb2:	68a9      	ldr	r1, [r5, #8]
 8001eb4:	6853      	ldr	r3, [r2, #4]
 8001eb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ebe:	f010 0010 	ands.w	r0, r0, #16
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001ec6:	6969      	ldr	r1, [r5, #20]
 8001ec8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ecc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	6053      	str	r3, [r2, #4]
 8001ed4:	e005      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed6:	f7fe fedb 	bl	8000c90 <HAL_GetTick>
 8001eda:	1bc0      	subs	r0, r0, r7
 8001edc:	2864      	cmp	r0, #100	; 0x64
 8001ede:	d9d7      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x30>
        return HAL_TIMEOUT;
 8001ee0:	2003      	movs	r0, #3
}
 8001ee2:	b003      	add	sp, #12
 8001ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee8:	686a      	ldr	r2, [r5, #4]
 8001eea:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d0d5      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef2:	6a21      	ldr	r1, [r4, #32]
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001efc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f00:	2701      	movs	r7, #1
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	4818      	ldr	r0, [pc, #96]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001f08:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 8001f0c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f10:	2200      	movs	r2, #0
 8001f12:	fab3 f383 	clz	r3, r3
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f16:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      RCC->BDCR = temp_reg;
 8001f1c:	6226      	str	r6, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f1e:	d5be      	bpl.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001f20:	f7fe feb6 	bl	8000c90 <HAL_GetTick>
 8001f24:	2602      	movs	r6, #2
 8001f26:	4680      	mov	r8, r0
 8001f28:	4637      	mov	r7, r6
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f241 3988 	movw	r9, #5000	; 0x1388
 8001f2e:	fa96 f3a6 	rbit	r3, r6
 8001f32:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	b18b      	cbz	r3, 8001f5c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001f38:	6a22      	ldr	r2, [r4, #32]
 8001f3a:	fa97 f3a7 	rbit	r3, r7
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	07da      	lsls	r2, r3, #31
 8001f4c:	d4a7      	bmi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x3e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fe9f 	bl	8000c90 <HAL_GetTick>
 8001f52:	eba0 0008 	sub.w	r0, r0, r8
 8001f56:	4548      	cmp	r0, r9
 8001f58:	d9e9      	bls.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001f5a:	e7c1      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f5e:	e7ec      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42420400 	.word	0x42420400

08001f6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	b570      	push	{r4, r5, r6, lr}
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f70:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_RCCEx_GetPeriphCLKFreq+0x118>)
{
 8001f72:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f74:	ad02      	add	r5, sp, #8
 8001f76:	f103 0610 	add.w	r6, r3, #16
 8001f7a:	462c      	mov	r4, r5
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	3308      	adds	r3, #8
 8001f82:	c403      	stmia	r4!, {r0, r1}
 8001f84:	42b3      	cmp	r3, r6
 8001f86:	4625      	mov	r5, r4
 8001f88:	d1f7      	bne.n	8001f7a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001f90:	2302      	movs	r3, #2
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001f92:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001f94:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8001f98:	280f      	cmp	r0, #15
 8001f9a:	d871      	bhi.n	8002080 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8001f9c:	e8df f000 	tbb	[pc, r0]
 8001fa0:	39705d3e 	.word	0x39705d3e
 8001fa4:	39707070 	.word	0x39707070
 8001fa8:	70707070 	.word	0x70707070
 8001fac:	08707070 	.word	0x08707070
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001fb0:	4a35      	ldr	r2, [pc, #212]	; (8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
 8001fb2:	6854      	ldr	r4, [r2, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001fb4:	6810      	ldr	r0, [r2, #0]
 8001fb6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001fba:	d043      	beq.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8001fbc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001fc0:	fa93 f3a3 	rbit	r3, r3
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001fc4:	fab3 f183 	clz	r1, r3
 8001fc8:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 8001fcc:	40cb      	lsrs	r3, r1
 8001fce:	a906      	add	r1, sp, #24
 8001fd0:	440b      	add	r3, r1
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd2:	03e1      	lsls	r1, r4, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8001fd4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd8:	d519      	bpl.n	800200e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001fda:	6853      	ldr	r3, [r2, #4]
 8001fdc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001fe0:	fa91 f1a1 	rbit	r1, r1
 8001fe4:	fab1 f181 	clz	r1, r1
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	40cb      	lsrs	r3, r1
 8001fee:	a906      	add	r1, sp, #24
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f813 1c14 	ldrb.w	r1, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
 8001ff8:	fbb3 f3f1 	udiv	r3, r3, r1
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffc:	4358      	muls	r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ffe:	6853      	ldr	r3, [r2, #4]
 8002000:	025b      	lsls	r3, r3, #9
 8002002:	d41f      	bmi.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8002004:	2303      	movs	r3, #3
 8002006:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8002008:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800200c:	e01a      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
 8002010:	e7f4      	b.n	8001ffc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
    {
      break;
    }
  }
  return(frequency);
}
 8002012:	b006      	add	sp, #24
 8002014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 8002018:	f7ff bdd0 	b.w	8001bbc <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800201c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
 8002022:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002024:	4019      	ands	r1, r3
 8002026:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800202a:	d026      	beq.n	800207a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800202c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d108      	bne.n	8002048 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
        frequency = LSI_VALUE;
 8002036:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800203a:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800203c:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128;
 8002040:	bf08      	it	eq
 8002042:	2000      	moveq	r0, #0
}
 8002044:	b006      	add	sp, #24
 8002046:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800204c:	d118      	bne.n	8002080 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800204e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128;
 8002050:	f24f 4024 	movw	r0, #62500	; 0xf424
 8002054:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002058:	e7f2      	b.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 800205a:	f7ff fecb 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
 8002060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002072:	40d3      	lsrs	r3, r2
 8002074:	3301      	adds	r3, #1
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	e7c6      	b.n	8002008 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        frequency = LSE_VALUE;
 800207a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800207e:	e7e1      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
        frequency = 0;
 8002080:	2000      	movs	r0, #0
 8002082:	e7df      	b.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8002084:	080049d0 	.word	0x080049d0
 8002088:	40021000 	.word	0x40021000
 800208c:	007a1200 	.word	0x007a1200
 8002090:	003d0900 	.word	0x003d0900

08002094 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, high2 = 0, low = 0;
  uint32_t timecounter = 0;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002094:	6803      	ldr	r3, [r0, #0]
{
 8002096:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002098:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800209a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800209c:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 800209e:	b295      	uxth	r5, r2
 80020a0:	b28c      	uxth	r4, r1
 80020a2:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80020a4:	bf1d      	ittte	ne
 80020a6:	69d8      	ldrne	r0, [r3, #28]
 80020a8:	b280      	uxthne	r0, r0
 80020aa:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16 ) | low);
 80020ae:	b280      	uxtheq	r0, r0
 80020b0:	bf08      	it	eq
 80020b2:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80020b6:	bd30      	pop	{r4, r5, pc}

080020b8 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, low = 0;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80020b8:	6803      	ldr	r3, [r0, #0]
 80020ba:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16 ) | low);
 80020be:	b29b      	uxth	r3, r3
}
 80020c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80020c4:	4770      	bx	lr

080020c6 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 80020c6:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80020c8:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80020ca:	f000 000f 	and.w	r0, r0, #15
 80020ce:	fb02 0003 	mla	r0, r2, r3, r0
}
 80020d2:	b2c0      	uxtb	r0, r0
 80020d4:	4770      	bx	lr

080020d6 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80020d6:	b510      	push	{r4, lr}
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 80020d8:	f44f 74c8 	mov.w	r4, #400	; 0x190
  if(nMonth < 3)
 80020dc:	2902      	cmp	r1, #2
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 80020de:	bf94      	ite	ls
 80020e0:	f200 73cf 	addwls	r3, r0, #1999	; 0x7cf
  year = 2000 + nYear;
 80020e4:	f500 63fa 	addhi.w	r3, r0, #2000	; 0x7d0
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 80020e8:	fbb3 f4f4 	udiv	r4, r3, r4
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 80020ec:	bf94      	ite	ls
 80020ee:	f200 70d4 	addwls	r0, r0, #2004	; 0x7d4
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 80020f2:	f200 70d2 	addwhi	r0, r0, #2002	; 0x7d2
 80020f6:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 80020fa:	4420      	add	r0, r4
 80020fc:	2464      	movs	r4, #100	; 0x64
 80020fe:	fbb3 f3f4 	udiv	r3, r3, r4
 8002102:	1ac0      	subs	r0, r0, r3
 8002104:	2317      	movs	r3, #23
 8002106:	4359      	muls	r1, r3
 8002108:	2309      	movs	r3, #9
 800210a:	fb91 f1f3 	sdiv	r1, r1, r3
 800210e:	440a      	add	r2, r1
 8002110:	4410      	add	r0, r2
 8002112:	2207      	movs	r2, #7
 8002114:	fbb0 f2f2 	udiv	r2, r0, r2
 8002118:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800211c:	1a80      	subs	r0, r0, r2
  }

  return (uint8_t)weekday;
}
 800211e:	b2c0      	uxtb	r0, r0
 8002120:	bd10      	pop	{r4, pc}

08002122 <RTC_EnterInitMode>:
{
 8002122:	b538      	push	{r3, r4, r5, lr}
 8002124:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002126:	f7fe fdb3 	bl	8000c90 <HAL_GetTick>
 800212a:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	0692      	lsls	r2, r2, #26
 8002132:	d505      	bpl.n	8002140 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002134:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8002136:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002138:	f042 0210 	orr.w	r2, r2, #16
 800213c:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 800213e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002140:	f7fe fda6 	bl	8000c90 <HAL_GetTick>
 8002144:	1b40      	subs	r0, r0, r5
 8002146:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800214a:	d9ef      	bls.n	800212c <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800214c:	2003      	movs	r0, #3
}
 800214e:	bd38      	pop	{r3, r4, r5, pc}

08002150 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002150:	6802      	ldr	r2, [r0, #0]
{
 8002152:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002154:	6853      	ldr	r3, [r2, #4]
{
 8002156:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002158:	f023 0310 	bic.w	r3, r3, #16
 800215c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800215e:	f7fe fd97 	bl	8000c90 <HAL_GetTick>
 8002162:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	069b      	lsls	r3, r3, #26
 800216a:	d501      	bpl.n	8002170 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 800216c:	2000      	movs	r0, #0
 800216e:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002170:	f7fe fd8e 	bl	8000c90 <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800217a:	d9f3      	bls.n	8002164 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
}
 800217e:	bd38      	pop	{r3, r4, r5, pc}

08002180 <RTC_WriteTimeCounter>:
{
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4605      	mov	r5, r0
 8002184:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002186:	f7ff ffcc 	bl	8002122 <RTC_EnterInitMode>
 800218a:	b958      	cbnz	r0, 80021a4 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002190:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 8002192:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002194:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002196:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002198:	f7ff ffda 	bl	8002150 <RTC_ExitInitMode>
    status = HAL_ERROR;
 800219c:	3000      	adds	r0, #0
 800219e:	bf18      	it	ne
 80021a0:	2001      	movne	r0, #1
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	2001      	movs	r0, #1
}
 80021a6:	bd38      	pop	{r3, r4, r5, pc}

080021a8 <RTC_WriteAlarmCounter>:
{
 80021a8:	b538      	push	{r3, r4, r5, lr}
 80021aa:	4605      	mov	r5, r0
 80021ac:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021ae:	f7ff ffb8 	bl	8002122 <RTC_EnterInitMode>
 80021b2:	b958      	cbnz	r0, 80021cc <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80021b8:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 80021ba:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80021bc:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80021be:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80021c0:	f7ff ffc6 	bl	8002150 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80021c4:	3000      	adds	r0, #0
 80021c6:	bf18      	it	ne
 80021c8:	2001      	movne	r0, #1
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
 80021cc:	2001      	movs	r0, #1
}
 80021ce:	bd38      	pop	{r3, r4, r5, pc}

080021d0 <HAL_RTC_SetTime>:
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 80021d2:	4604      	mov	r4, r0
 80021d4:	b1e0      	cbz	r0, 8002210 <HAL_RTC_SetTime+0x40>
 80021d6:	b1d9      	cbz	r1, 8002210 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 80021d8:	7c03      	ldrb	r3, [r0, #16]
 80021da:	2602      	movs	r6, #2
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d046      	beq.n	800226e <HAL_RTC_SetTime+0x9e>
 80021e0:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021e2:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 80021e4:	7403      	strb	r3, [r0, #16]
 80021e6:	7808      	ldrb	r0, [r1, #0]
 80021e8:	784e      	ldrb	r6, [r1, #1]
 80021ea:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 80021ec:	b992      	cbnz	r2, 8002214 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60) + \
 80021ee:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 80021f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60) + \
 80021f4:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 80021f6:	fb03 5000 	mla	r0, r3, r0, r5
 80021fa:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80021fc:	4629      	mov	r1, r5
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff ffbe 	bl	8002180 <RTC_WriteTimeCounter>
 8002204:	4606      	mov	r6, r0
 8002206:	b1b0      	cbz	r0, 8002236 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002208:	2304      	movs	r3, #4
 800220a:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800220c:	2300      	movs	r3, #0
 800220e:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8002210:	2601      	movs	r6, #1
 8002212:	e02c      	b.n	800226e <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8002214:	f7ff ff57 	bl	80020c6 <RTC_Bcd2ToByte>
 8002218:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
 800221a:	4630      	mov	r0, r6
 800221c:	f7ff ff53 	bl	80020c6 <RTC_Bcd2ToByte>
 8002220:	233c      	movs	r3, #60	; 0x3c
 8002222:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8002224:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002228:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 800222c:	4608      	mov	r0, r1
 800222e:	f7ff ff4a 	bl	80020c6 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8002232:	4405      	add	r5, r0
 8002234:	e7e2      	b.n	80021fc <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002236:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002238:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800223a:	6853      	ldr	r3, [r2, #4]
 800223c:	f023 0305 	bic.w	r3, r3, #5
 8002240:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002242:	f7ff ff39 	bl	80020b8 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002246:	1c43      	adds	r3, r0, #1
 8002248:	d00d      	beq.n	8002266 <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 800224a:	4285      	cmp	r5, r0
 800224c:	d90b      	bls.n	8002266 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800224e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002252:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ffa6 	bl	80021a8 <RTC_WriteAlarmCounter>
 800225c:	b118      	cbz	r0, 8002266 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800225e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002260:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002262:	7463      	strb	r3, [r4, #17]
 8002264:	e7d4      	b.n	8002210 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8002266:	2301      	movs	r3, #1
 8002268:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 800226a:	2300      	movs	r3, #0
 800226c:	7423      	strb	r3, [r4, #16]
}
 800226e:	4630      	mov	r0, r6
 8002270:	bd70      	pop	{r4, r5, r6, pc}
	...

08002274 <HAL_RTC_SetDate>:
{
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8002278:	4604      	mov	r4, r0
 800227a:	b358      	cbz	r0, 80022d4 <HAL_RTC_SetDate+0x60>
 800227c:	b351      	cbz	r1, 80022d4 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 800227e:	7c03      	ldrb	r3, [r0, #16]
 8002280:	2002      	movs	r0, #2
 8002282:	2b01      	cmp	r3, #1
 8002284:	d027      	beq.n	80022d6 <HAL_RTC_SetDate+0x62>
 8002286:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002288:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 800228a:	7423      	strb	r3, [r4, #16]
 800228c:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800228e:	bb1a      	cbnz	r2, 80022d8 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002290:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002292:	784b      	ldrb	r3, [r1, #1]
 8002294:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002296:	788b      	ldrb	r3, [r1, #2]
 8002298:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800229a:	7ba2      	ldrb	r2, [r4, #14]
 800229c:	7b61      	ldrb	r1, [r4, #13]
 800229e:	7be0      	ldrb	r0, [r4, #15]
 80022a0:	f7ff ff19 	bl	80020d6 <RTC_WeekDayNum>
 80022a4:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80022a6:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff fef3 	bl	8002094 <RTC_ReadTimeCounter>
  if (hours > 24)
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_RTC_SetDate+0xac>)
 80022b0:	4298      	cmp	r0, r3
 80022b2:	d930      	bls.n	8002316 <HAL_RTC_SetDate+0xa2>
 80022b4:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80022b8:	fbb0 f5f3 	udiv	r5, r0, r3
 80022bc:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80022c0:	4620      	mov	r0, r4
 80022c2:	4629      	mov	r1, r5
 80022c4:	f7ff ff5c 	bl	8002180 <RTC_WriteTimeCounter>
 80022c8:	4606      	mov	r6, r0
 80022ca:	b188      	cbz	r0, 80022f0 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022cc:	2304      	movs	r3, #4
 80022ce:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80022d0:	2300      	movs	r3, #0
 80022d2:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80022d8:	f7ff fef5 	bl	80020c6 <RTC_Bcd2ToByte>
 80022dc:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80022de:	7848      	ldrb	r0, [r1, #1]
 80022e0:	f7ff fef1 	bl	80020c6 <RTC_Bcd2ToByte>
 80022e4:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80022e6:	7888      	ldrb	r0, [r1, #2]
 80022e8:	f7ff feed 	bl	80020c6 <RTC_Bcd2ToByte>
 80022ec:	73a0      	strb	r0, [r4, #14]
 80022ee:	e7d4      	b.n	800229a <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff fee1 	bl	80020b8 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80022f6:	1c43      	adds	r3, r0, #1
 80022f8:	d00d      	beq.n	8002316 <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 80022fa:	4285      	cmp	r5, r0
 80022fc:	d90b      	bls.n	8002316 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022fe:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002302:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff ff4e 	bl	80021a8 <RTC_WriteAlarmCounter>
 800230c:	b118      	cbz	r0, 8002316 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800230e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002310:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002312:	7463      	strb	r3, [r4, #17]
 8002314:	e7de      	b.n	80022d4 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002316:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002318:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800231a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 800231c:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 800231e:	bd70      	pop	{r4, r5, r6, pc}
 8002320:	00015f8f 	.word	0x00015f8f

08002324 <HAL_RTC_WaitForSynchro>:
{
 8002324:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002326:	4604      	mov	r4, r0
 8002328:	b1a8      	cbz	r0, 8002356 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800232a:	6802      	ldr	r2, [r0, #0]
 800232c:	6853      	ldr	r3, [r2, #4]
 800232e:	f023 0308 	bic.w	r3, r3, #8
 8002332:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002334:	f7fe fcac 	bl	8000c90 <HAL_GetTick>
 8002338:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	071b      	lsls	r3, r3, #28
 8002340:	d501      	bpl.n	8002346 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8002342:	2000      	movs	r0, #0
 8002344:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8002346:	f7fe fca3 	bl	8000c90 <HAL_GetTick>
 800234a:	1b40      	subs	r0, r0, r5
 800234c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002350:	d9f3      	bls.n	800233a <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002352:	2003      	movs	r0, #3
}
 8002354:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8002356:	2001      	movs	r0, #1
 8002358:	bd38      	pop	{r3, r4, r5, pc}
	...

0800235c <HAL_RTC_Init>:
{
 800235c:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 800235e:	4604      	mov	r4, r0
 8002360:	b170      	cbz	r0, 8002380 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002362:	7c43      	ldrb	r3, [r0, #17]
 8002364:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002368:	b913      	cbnz	r3, 8002370 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800236a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800236c:	f7fe f97a 	bl	8000664 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002370:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002372:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002374:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002376:	f7ff ffd5 	bl	8002324 <HAL_RTC_WaitForSynchro>
 800237a:	b118      	cbz	r0, 8002384 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 800237c:	2304      	movs	r3, #4
 800237e:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
}
 8002382:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff fecc 	bl	8002122 <RTC_EnterInitMode>
 800238a:	2800      	cmp	r0, #0
 800238c:	d1f6      	bne.n	800237c <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800238e:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002390:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002392:	6853      	ldr	r3, [r2, #4]
 8002394:	f023 0307 	bic.w	r3, r3, #7
 8002398:	6053      	str	r3, [r2, #4]
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800239c:	b118      	cbz	r0, 80023a6 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800239e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023a0:	f021 0101 	bic.w	r1, r1, #1
 80023a4:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80023a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023a8:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80023ac:	4303      	orrs	r3, r0
 80023ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80023b0:	6860      	ldr	r0, [r4, #4]
 80023b2:	1c43      	adds	r3, r0, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff fdd8 	bl	8001f6c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0)
 80023bc:	2800      	cmp	r0, #0
 80023be:	d0dd      	beq.n	800237c <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1;
 80023c0:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	6893      	ldr	r3, [r2, #8]
 80023c6:	f023 030f 	bic.w	r3, r3, #15
 80023ca:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80023ce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80023d0:	68d3      	ldr	r3, [r2, #12]
 80023d2:	b280      	uxth	r0, r0
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	4318      	orrs	r0, r3
 80023da:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff feb7 	bl	8002150 <RTC_ExitInitMode>
 80023e2:	2301      	movs	r3, #1
 80023e4:	b110      	cbz	r0, 80023ec <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023e6:	2204      	movs	r2, #4
 80023e8:	7462      	strb	r2, [r4, #17]
 80023ea:	e7c9      	b.n	8002380 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00;
 80023ec:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80023ee:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01;
 80023f0:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80023f2:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80023f4:	bd10      	pop	{r4, pc}
 80023f6:	bf00      	nop
 80023f8:	40006c00 	.word	0x40006c00

080023fc <HAL_RTCEx_SetSecond_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
  /* Check input parameters */
  if(hrtc == NULL)
 80023fc:	b180      	cbz	r0, 8002420 <HAL_RTCEx_SetSecond_IT+0x24>
  {
     return HAL_ERROR;
  }
  
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023fe:	7c03      	ldrb	r3, [r0, #16]
 8002400:	2b01      	cmp	r3, #1
 8002402:	f04f 0302 	mov.w	r3, #2
 8002406:	d009      	beq.n	800241c <HAL_RTCEx_SetSecond_IT+0x20>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 8002408:	6802      	ldr	r2, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800240a:	7443      	strb	r3, [r0, #17]
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 800240c:	6813      	ldr	r3, [r2, #0]
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]
  
  hrtc->State = HAL_RTC_STATE_READY;
 8002414:	2301      	movs	r3, #1
 8002416:	7443      	strb	r3, [r0, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002418:	2300      	movs	r3, #0
 800241a:	7403      	strb	r3, [r0, #16]
  __HAL_LOCK(hrtc);
 800241c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800241e:	4770      	bx	lr
     return HAL_ERROR;
 8002420:	2001      	movs	r0, #1
 8002422:	4770      	bx	lr

08002424 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8002424:	4770      	bx	lr

08002426 <HAL_RTCEx_RTCIRQHandler>:
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8002426:	6803      	ldr	r3, [r0, #0]
{
 8002428:	b510      	push	{r4, lr}
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800242a:	681a      	ldr	r2, [r3, #0]
{
 800242c:	4604      	mov	r4, r0
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800242e:	07d1      	lsls	r1, r2, #31
 8002430:	d511      	bpl.n	8002456 <HAL_RTCEx_RTCIRQHandler+0x30>
    if(__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	07d2      	lsls	r2, r2, #31
 8002436:	d50e      	bpl.n	8002456 <HAL_RTCEx_RTCIRQHandler+0x30>
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	075b      	lsls	r3, r3, #29
 800243c:	d50c      	bpl.n	8002458 <HAL_RTCEx_RTCIRQHandler+0x32>
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800243e:	f7ff fff1 	bl	8002424 <HAL_RTCEx_RTCEventErrorCallback>
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8002442:	f06f 0204 	mvn.w	r2, #4
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	605a      	str	r2, [r3, #4]
        hrtc->State = HAL_RTC_STATE_ERROR; 
 800244a:	2304      	movs	r3, #4
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800244c:	f06f 0201 	mvn.w	r2, #1
        hrtc->State = HAL_RTC_STATE_READY; 
 8002450:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8002458:	f7fd ff34 	bl	80002c4 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY; 
 800245c:	2301      	movs	r3, #1
 800245e:	e7f5      	b.n	800244c <HAL_RTCEx_RTCIRQHandler+0x26>

08002460 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
  tmp += (BackupRegister * 4);
 8002460:	0089      	lsls	r1, r1, #2
 8002462:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002466:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800246a:	b292      	uxth	r2, r2
 800246c:	600a      	str	r2, [r1, #0]
 800246e:	4770      	bx	lr

08002470 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
  backupregister += (BackupRegister * 4);
 8002470:	0089      	lsls	r1, r1, #2
 8002472:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002476:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800247a:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 800247c:	b280      	uxth	r0, r0
 800247e:	4770      	bx	lr

08002480 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002480:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8002482:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_OC_DelayElapsedCallback>:
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_IC_CaptureCallback>:
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_PWM_PulseFinishedCallback>:
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_TriggerCallback>:
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800249e:	6803      	ldr	r3, [r0, #0]
{
 80024a0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a2:	691a      	ldr	r2, [r3, #16]
{
 80024a4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a6:	0791      	lsls	r1, r2, #30
 80024a8:	d50e      	bpl.n	80024c8 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	0792      	lsls	r2, r2, #30
 80024ae:	d50b      	bpl.n	80024c8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024b0:	f06f 0202 	mvn.w	r2, #2
 80024b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b6:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80024b8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ba:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80024bc:	079b      	lsls	r3, r3, #30
 80024be:	d077      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80024c0:	f7ff ffea 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c4:	2300      	movs	r3, #0
 80024c6:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	0750      	lsls	r0, r2, #29
 80024ce:	d510      	bpl.n	80024f2 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	0751      	lsls	r1, r2, #29
 80024d4:	d50d      	bpl.n	80024f2 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024d6:	f06f 0204 	mvn.w	r2, #4
 80024da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024dc:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80024de:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024e0:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80024e2:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80024e8:	d068      	beq.n	80025bc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	f7ff ffd5 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	2300      	movs	r3, #0
 80024f0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	0712      	lsls	r2, r2, #28
 80024f8:	d50f      	bpl.n	800251a <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	0710      	lsls	r0, r2, #28
 80024fe:	d50c      	bpl.n	800251a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002500:	f06f 0208 	mvn.w	r2, #8
 8002504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002506:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002508:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250a:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800250c:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002510:	d05a      	beq.n	80025c8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	f7ff ffc1 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	2300      	movs	r3, #0
 8002518:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	06d2      	lsls	r2, r2, #27
 8002520:	d510      	bpl.n	8002544 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	06d0      	lsls	r0, r2, #27
 8002526:	d50d      	bpl.n	8002544 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002528:	f06f 0210 	mvn.w	r2, #16
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800252e:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002530:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002532:	7622      	strb	r2, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002534:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002538:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800253a:	d04b      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800253c:	f7ff ffac 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002540:	2300      	movs	r3, #0
 8002542:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	07d1      	lsls	r1, r2, #31
 800254a:	d508      	bpl.n	800255e <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	07d2      	lsls	r2, r2, #31
 8002550:	d505      	bpl.n	800255e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002552:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002556:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002558:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800255a:	f7fd ff85 	bl	8000468 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	0610      	lsls	r0, r2, #24
 8002564:	d508      	bpl.n	8002578 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	0611      	lsls	r1, r2, #24
 800256a:	d505      	bpl.n	8002578 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800256c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002570:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002572:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002574:	f000 f899 	bl	80026aa <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	0652      	lsls	r2, r2, #25
 800257e:	d508      	bpl.n	8002592 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	0650      	lsls	r0, r2, #25
 8002584:	d505      	bpl.n	8002592 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002586:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800258a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800258c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800258e:	f7ff ff85 	bl	800249c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	0691      	lsls	r1, r2, #26
 8002598:	d522      	bpl.n	80025e0 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	0692      	lsls	r2, r2, #26
 800259e:	d51f      	bpl.n	80025e0 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025a0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80025a4:	4620      	mov	r0, r4
    }
  }
}
 80025a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80025ac:	f000 b87c 	b.w	80026a8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b0:	f7ff ff71 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff ff70 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
 80025ba:	e783      	b.n	80024c4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025bc:	f7ff ff6b 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff ff6a 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
 80025c6:	e792      	b.n	80024ee <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c8:	f7ff ff65 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff64 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
 80025d2:	e7a0      	b.n	8002516 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d4:	f7ff ff5f 	bl	8002496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ff5e 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
 80025de:	e7af      	b.n	8002540 <HAL_TIM_IRQHandler+0xa2>
 80025e0:	bd10      	pop	{r4, pc}
	...

080025e4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 80025e6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e8:	4290      	cmp	r0, r2
 80025ea:	d012      	beq.n	8002612 <TIM_Base_SetConfig+0x2e>
 80025ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f0:	4290      	cmp	r0, r2
 80025f2:	d00e      	beq.n	8002612 <TIM_Base_SetConfig+0x2e>
 80025f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025f8:	d00b      	beq.n	8002612 <TIM_Base_SetConfig+0x2e>
 80025fa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80025fe:	4290      	cmp	r0, r2
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0x2e>
 8002602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002606:	4290      	cmp	r0, r2
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0x2e>
 800260a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800260e:	4290      	cmp	r0, r2
 8002610:	d11d      	bne.n	800264e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002612:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002618:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <TIM_Base_SetConfig+0x8c>)
 800261c:	4290      	cmp	r0, r2
 800261e:	d012      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 8002620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002624:	4290      	cmp	r0, r2
 8002626:	d00e      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 8002628:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 800262e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002632:	4290      	cmp	r0, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 8002636:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800263a:	4290      	cmp	r0, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 800263e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002642:	4290      	cmp	r0, r2
 8002644:	d103      	bne.n	800264e <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264c:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800264e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002650:	688b      	ldr	r3, [r1, #8]
 8002652:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002654:	680b      	ldr	r3, [r1, #0]
 8002656:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <TIM_Base_SetConfig+0x8c>)
 800265a:	4298      	cmp	r0, r3
 800265c:	d003      	beq.n	8002666 <TIM_Base_SetConfig+0x82>
 800265e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002662:	4298      	cmp	r0, r3
 8002664:	d101      	bne.n	800266a <TIM_Base_SetConfig+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002666:	690b      	ldr	r3, [r1, #16]
 8002668:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800266a:	2301      	movs	r3, #1
 800266c:	6143      	str	r3, [r0, #20]
 800266e:	4770      	bx	lr
 8002670:	40012c00 	.word	0x40012c00

08002674 <HAL_TIM_Base_Init>:
{
 8002674:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002676:	4604      	mov	r4, r0
 8002678:	b1a0      	cbz	r0, 80026a4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800267a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800267e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002682:	b91b      	cbnz	r3, 800268c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002684:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002688:	f7fe f8dc 	bl	8000844 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800268c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002690:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002694:	1d21      	adds	r1, r4, #4
 8002696:	f7ff ffa5 	bl	80025e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800269a:	2301      	movs	r3, #1
  return HAL_OK;
 800269c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800269e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80026a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <HAL_TIMEx_CommutationCallback>:
 80026a8:	4770      	bx	lr

080026aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	4770      	bx	lr

080026ac <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b0:	6805      	ldr	r5, [r0, #0]
 80026b2:	68c2      	ldr	r2, [r0, #12]
 80026b4:	692b      	ldr	r3, [r5, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80026b6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026bc:	4313      	orrs	r3, r2
 80026be:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80026c0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80026c2:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80026c8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80026cc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80026d0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d6:	696b      	ldr	r3, [r5, #20]
 80026d8:	6982      	ldr	r2, [r0, #24]
 80026da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026de:	4313      	orrs	r3, r2
 80026e0:	616b      	str	r3, [r5, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80026e2:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <UART_SetConfig+0x138>)
{
 80026e4:	4681      	mov	r9, r0
  if((huart->Instance == USART1))
 80026e6:	429d      	cmp	r5, r3
 80026e8:	f04f 0419 	mov.w	r4, #25
 80026ec:	d146      	bne.n	800277c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026ee:	f7ff fb81 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 80026f2:	fb04 f300 	mul.w	r3, r4, r0
 80026f6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80026fa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80026fe:	00b6      	lsls	r6, r6, #2
 8002700:	fbb3 f3f6 	udiv	r3, r3, r6
 8002704:	fbb3 f3f8 	udiv	r3, r3, r8
 8002708:	011e      	lsls	r6, r3, #4
 800270a:	f7ff fb73 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 800270e:	4360      	muls	r0, r4
 8002710:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	fbb0 f7f3 	udiv	r7, r0, r3
 800271a:	f7ff fb6b 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 800271e:	4360      	muls	r0, r4
 8002720:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	fbb3 f3f8 	udiv	r3, r3, r8
 800272e:	fb08 7313 	mls	r3, r8, r3, r7
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	3332      	adds	r3, #50	; 0x32
 8002736:	fbb3 f3f8 	udiv	r3, r3, r8
 800273a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800273e:	f7ff fb59 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 8002742:	4360      	muls	r0, r4
 8002744:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	fbb0 faf2 	udiv	sl, r0, r2
 800274e:	f7ff fb51 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002752:	4360      	muls	r0, r4
 8002754:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002762:	fb08 a313 	mls	r3, r8, r3, sl
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	3332      	adds	r3, #50	; 0x32
 800276a:	fbb3 f3f8 	udiv	r3, r3, r8
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	433b      	orrs	r3, r7
 8002774:	4433      	add	r3, r6
 8002776:	60ab      	str	r3, [r5, #8]
 8002778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800277c:	f7ff fb22 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002780:	fb04 f300 	mul.w	r3, r4, r0
 8002784:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002788:	f04f 0864 	mov.w	r8, #100	; 0x64
 800278c:	00b6      	lsls	r6, r6, #2
 800278e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002792:	fbb3 f3f8 	udiv	r3, r3, r8
 8002796:	011e      	lsls	r6, r3, #4
 8002798:	f7ff fb14 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 800279c:	4360      	muls	r0, r4
 800279e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fbb0 f7f3 	udiv	r7, r0, r3
 80027a8:	f7ff fb0c 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80027ac:	4360      	muls	r0, r4
 80027ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80027bc:	fb08 7313 	mls	r3, r8, r3, r7
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	3332      	adds	r3, #50	; 0x32
 80027c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80027c8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80027cc:	f7ff fafa 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80027d0:	4360      	muls	r0, r4
 80027d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	fbb0 faf2 	udiv	sl, r0, r2
 80027dc:	f7ff faf2 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80027e0:	e7b7      	b.n	8002752 <UART_SetConfig+0xa6>
 80027e2:	bf00      	nop
 80027e4:	40013800 	.word	0x40013800

080027e8 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	460e      	mov	r6, r1
 80027ee:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80027f0:	f7fe fa4e 	bl	8000c90 <HAL_GetTick>
 80027f4:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	ea36 0303 	bics.w	r3, r6, r3
 80027fe:	d101      	bne.n	8002804 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 8002800:	2000      	movs	r0, #0
}
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 8002804:	1c6b      	adds	r3, r5, #1
 8002806:	d0f7      	beq.n	80027f8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002808:	b9c5      	cbnz	r5, 800283c <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800280a:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 800280c:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002814:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	f022 0220 	bic.w	r2, r2, #32
 800281c:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002824:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 800282e:	2301      	movs	r3, #1
 8002830:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 8002834:	2300      	movs	r3, #0
 8002836:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800283a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800283c:	f7fe fa28 	bl	8000c90 <HAL_GetTick>
 8002840:	1bc0      	subs	r0, r0, r7
 8002842:	4285      	cmp	r5, r0
 8002844:	d2d7      	bcs.n	80027f6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8002846:	e7e0      	b.n	800280a <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08002848 <HAL_UART_Init>:
{
 8002848:	b510      	push	{r4, lr}
  if(huart == NULL)
 800284a:	4604      	mov	r4, r0
 800284c:	b330      	cbz	r0, 800289c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800284e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002852:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002856:	b91b      	cbnz	r3, 8002860 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002858:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800285c:	f7fe f886 	bl	800096c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8002860:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8002862:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8002864:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002868:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800286a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800286c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002870:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002872:	f7ff ff1b 	bl	80026ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002876:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002888:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002890:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8002892:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002896:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800289a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
}
 800289e:	bd10      	pop	{r4, pc}

080028a0 <HAL_UART_Transmit>:
{
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	460d      	mov	r5, r1
  tmp_state = huart->State;
 80028a4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 80028a8:	4604      	mov	r4, r0
  tmp_state = huart->State;
 80028aa:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80028ac:	2901      	cmp	r1, #1
{
 80028ae:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_Transmit+0x16>
 80028b2:	2922      	cmp	r1, #34	; 0x22
 80028b4:	d14d      	bne.n	8002952 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 80028b6:	2d00      	cmp	r5, #0
 80028b8:	d049      	beq.n	800294e <HAL_UART_Transmit+0xae>
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	d047      	beq.n	800294e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80028be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d045      	beq.n	8002952 <HAL_UART_Transmit+0xb2>
 80028c6:	2301      	movs	r3, #1
 80028c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80028d0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 80028d4:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80028d6:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80028d8:	bf0c      	ite	eq
 80028da:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 80028dc:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 80028de:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 80028e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 80028e4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80028e6:	b98a      	cbnz	r2, 800290c <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80028e8:	4632      	mov	r2, r6
 80028ea:	2140      	movs	r1, #64	; 0x40
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff ff7b 	bl	80027e8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80028f2:	b9c0      	cbnz	r0, 8002926 <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80028f4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80028f8:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80028fa:	bf0c      	ite	eq
 80028fc:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80028fe:	2301      	movne	r3, #1
 8002900:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002904:	2300      	movs	r3, #0
 8002906:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 800290a:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800290c:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 800290e:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8002914:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002916:	f04f 0180 	mov.w	r1, #128	; 0x80
 800291a:	4632      	mov	r2, r6
 800291c:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800291e:	d10d      	bne.n	800293c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002920:	f7ff ff62 	bl	80027e8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002924:	b108      	cbz	r0, 800292a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002926:	2003      	movs	r0, #3
 8002928:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800292a:	882b      	ldrh	r3, [r5, #0]
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002934:	6923      	ldr	r3, [r4, #16]
 8002936:	b943      	cbnz	r3, 800294a <HAL_UART_Transmit+0xaa>
          pData +=2;
 8002938:	3502      	adds	r5, #2
 800293a:	e7d3      	b.n	80028e4 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800293c:	f7ff ff54 	bl	80027e8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8002940:	2800      	cmp	r0, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	782a      	ldrb	r2, [r5, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	3501      	adds	r5, #1
 800294c:	e7ca      	b.n	80028e4 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 800294e:	2001      	movs	r0, #1
 8002950:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8002952:	2002      	movs	r0, #2
}
 8002954:	bd70      	pop	{r4, r5, r6, pc}

08002956 <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 8002956:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800295a:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800295c:	2b01      	cmp	r3, #1
 800295e:	d001      	beq.n	8002964 <HAL_UART_Receive_IT+0xe>
 8002960:	2b12      	cmp	r3, #18
 8002962:	d128      	bne.n	80029b6 <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 8002964:	b329      	cbz	r1, 80029b2 <HAL_UART_Receive_IT+0x5c>
 8002966:	b322      	cbz	r2, 80029b2 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8002968:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800296c:	2b01      	cmp	r3, #1
 800296e:	d022      	beq.n	80029b6 <HAL_UART_Receive_IT+0x60>
 8002970:	2301      	movs	r3, #1
 8002972:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 800297a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800297c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800297e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002982:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8002986:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002988:	bf0c      	ite	eq
 800298a:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 800298c:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800298e:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002990:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002994:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 8002996:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800299e:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 80029a0:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	f042 0220 	orr.w	r2, r2, #32
 80029ae:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80029b0:	4770      	bx	lr
      return HAL_ERROR;
 80029b2:	2001      	movs	r0, #1
 80029b4:	4770      	bx	lr
    return HAL_BUSY;
 80029b6:	2002      	movs	r0, #2
}
 80029b8:	4770      	bx	lr

080029ba <HAL_UART_TxCpltCallback>:
 80029ba:	4770      	bx	lr

080029bc <HAL_UART_ErrorCallback>:
{
 80029bc:	4770      	bx	lr

080029be <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80029be:	6802      	ldr	r2, [r0, #0]
{
 80029c0:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80029c2:	6811      	ldr	r1, [r2, #0]
{
 80029c4:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029c6:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80029c8:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029ca:	d505      	bpl.n	80029d8 <HAL_UART_IRQHandler+0x1a>
 80029cc:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ce:	bf42      	ittt	mi
 80029d0:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80029d2:	f043 0301 	orrmi.w	r3, r3, #1
 80029d6:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80029d8:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80029da:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029dc:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80029de:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029e2:	d504      	bpl.n	80029ee <HAL_UART_IRQHandler+0x30>
 80029e4:	b11b      	cbz	r3, 80029ee <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80029e8:	f041 0104 	orr.w	r1, r1, #4
 80029ec:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80029ee:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80029f0:	0749      	lsls	r1, r1, #29
 80029f2:	d504      	bpl.n	80029fe <HAL_UART_IRQHandler+0x40>
 80029f4:	b11b      	cbz	r3, 80029fe <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80029f8:	f041 0102 	orr.w	r1, r1, #2
 80029fc:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80029fe:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a00:	0708      	lsls	r0, r1, #28
 8002a02:	d504      	bpl.n	8002a0e <HAL_UART_IRQHandler+0x50>
 8002a04:	b11b      	cbz	r3, 8002a0e <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8002a0e:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8002a10:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a12:	0689      	lsls	r1, r1, #26
 8002a14:	d533      	bpl.n	8002a7e <HAL_UART_IRQHandler+0xc0>
 8002a16:	0698      	lsls	r0, r3, #26
 8002a18:	d531      	bpl.n	8002a7e <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 8002a1a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002a1e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002a22:	2b22      	cmp	r3, #34	; 0x22
 8002a24:	d12b      	bne.n	8002a7e <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	6921      	ldr	r1, [r4, #16]
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a30:	d176      	bne.n	8002b20 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a32:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a34:	2900      	cmp	r1, #0
 8002a36:	d16f      	bne.n	8002b18 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8002a40:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8002a42:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8002a4a:	b9c3      	cbnz	r3, 8002a7e <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a4c:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 8002a4e:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	f022 0220 	bic.w	r2, r2, #32
 8002a56:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002a58:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002a5c:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a5e:	bf17      	itett	ne
 8002a60:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8002a62:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a64:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8002a68:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a6a:	bf1f      	itttt	ne
 8002a6c:	695a      	ldrne	r2, [r3, #20]
 8002a6e:	f022 0201 	bicne.w	r2, r2, #1
 8002a72:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8002a74:	2301      	movne	r3, #1
 8002a76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8002a7a:	f7fd fc2b 	bl	80002d4 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8002a82:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002a84:	0609      	lsls	r1, r1, #24
 8002a86:	d522      	bpl.n	8002ace <HAL_UART_IRQHandler+0x110>
 8002a88:	0610      	lsls	r0, r2, #24
 8002a8a:	d520      	bpl.n	8002ace <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8002a8c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8002a90:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002a94:	2a12      	cmp	r2, #18
 8002a96:	d11a      	bne.n	8002ace <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a98:	68a2      	ldr	r2, [r4, #8]
 8002a9a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a9e:	6a22      	ldr	r2, [r4, #32]
 8002aa0:	d14c      	bne.n	8002b3c <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aa2:	8811      	ldrh	r1, [r2, #0]
 8002aa4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002aa8:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002aaa:	6921      	ldr	r1, [r4, #16]
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d143      	bne.n	8002b38 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8002ab0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 8002ab2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 8002ab4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002abc:	b93a      	cbnz	r2, 8002ace <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002acc:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8002ace:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8002ad0:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8002ad2:	0649      	lsls	r1, r1, #25
 8002ad4:	d510      	bpl.n	8002af8 <HAL_UART_IRQHandler+0x13a>
 8002ad6:	0652      	lsls	r2, r2, #25
 8002ad8:	d50e      	bpl.n	8002af8 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ada:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002adc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae2:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002ae4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002ae8:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8002aea:	bf0c      	ite	eq
 8002aec:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8002aee:	2301      	movne	r3, #1
 8002af0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002af4:	f7ff ff61 	bl	80029ba <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afa:	b15b      	cbz	r3, 8002b14 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002afc:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8002afe:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	9201      	str	r2, [sp, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8002b10:	f7ff ff54 	bl	80029bc <HAL_UART_ErrorCallback>
}
 8002b14:	b002      	add	sp, #8
 8002b16:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	f823 2b01 	strh.w	r2, [r3], #1
 8002b1e:	e78f      	b.n	8002a40 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b20:	b921      	cbnz	r1, 8002b2c <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e78a      	b.n	8002a42 <HAL_UART_IRQHandler+0x84>
 8002b2c:	6852      	ldr	r2, [r2, #4]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	62a1      	str	r1, [r4, #40]	; 0x28
 8002b32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b36:	e7f7      	b.n	8002b28 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 8002b38:	3201      	adds	r2, #1
 8002b3a:	e7ba      	b.n	8002ab2 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b3c:	1c51      	adds	r1, r2, #1
 8002b3e:	6221      	str	r1, [r4, #32]
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e7b6      	b.n	8002ab4 <HAL_UART_IRQHandler+0xf6>
	...

08002b48 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b48:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8002b4a:	78cb      	ldrb	r3, [r1, #3]
 8002b4c:	780a      	ldrb	r2, [r1, #0]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d80f      	bhi.n	8002b72 <USB_ActivateEndpoint+0x2a>
 8002b52:	e8df f003 	tbb	[pc, r3]
 8002b56:	6402      	.short	0x6402
 8002b58:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002b5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002b6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b72:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002b76:	780c      	ldrb	r4, [r1, #0]
 8002b78:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002b7c:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8002b80:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002b84:	401a      	ands	r2, r3
 8002b86:	432a      	orrs	r2, r5
 8002b88:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002b8c:	7a8a      	ldrb	r2, [r1, #10]
 8002b8e:	780d      	ldrb	r5, [r1, #0]
 8002b90:	2a00      	cmp	r2, #0
 8002b92:	f040 8098 	bne.w	8002cc6 <USB_ActivateEndpoint+0x17e>
  {
    if (ep->is_in)
 8002b96:	784c      	ldrb	r4, [r1, #1]
 8002b98:	888a      	ldrh	r2, [r1, #4]
 8002b9a:	2c00      	cmp	r4, #0
 8002b9c:	d04a      	beq.n	8002c34 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b9e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002ba2:	0852      	lsrs	r2, r2, #1
 8002ba4:	b2a4      	uxth	r4, r4
 8002ba6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002baa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002bae:	0052      	lsls	r2, r2, #1
 8002bb0:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bb4:	780c      	ldrb	r4, [r1, #0]
 8002bb6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002bba:	0652      	lsls	r2, r2, #25
 8002bbc:	d508      	bpl.n	8002bd0 <USB_ActivateEndpoint+0x88>
 8002bbe:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bcc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002bd0:	780a      	ldrb	r2, [r1, #0]
 8002bd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002bf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bfa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	e7b2      	b.n	8002b6e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002c08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c0c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c1c:	e7a7      	b.n	8002b6e <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002c1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c22:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c32:	e79c      	b.n	8002b6e <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002c38:	0852      	lsrs	r2, r2, #1
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002c40:	3304      	adds	r3, #4
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8002c48:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c4c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002c50:	780b      	ldrb	r3, [r1, #0]
 8002c52:	690d      	ldr	r5, [r1, #16]
 8002c54:	b292      	uxth	r2, r2
 8002c56:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002c5a:	2d3e      	cmp	r5, #62	; 0x3e
 8002c5c:	f102 0206 	add.w	r2, r2, #6
 8002c60:	d929      	bls.n	8002cb6 <USB_ActivateEndpoint+0x16e>
 8002c62:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8002c66:	06eb      	lsls	r3, r5, #27
 8002c68:	bf04      	itt	eq
 8002c6a:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8002c6e:	b29e      	uxtheq	r6, r3
 8002c70:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <USB_ActivateEndpoint+0x2e4>)
 8002c72:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c7c:	780a      	ldrb	r2, [r1, #0]
 8002c7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c82:	045e      	lsls	r6, r3, #17
 8002c84:	d50b      	bpl.n	8002c9e <USB_ActivateEndpoint+0x156>
 8002c86:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	051b      	lsls	r3, r3, #20
 8002c90:	0d1b      	lsrs	r3, r3, #20
 8002c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c9e:	780a      	ldrb	r2, [r1, #0]
 8002ca0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002cb4:	e797      	b.n	8002be6 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002cb6:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002cba:	07ed      	lsls	r5, r5, #31
 8002cbc:	bf44      	itt	mi
 8002cbe:	3301      	addmi	r3, #1
 8002cc0:	b29b      	uxthmi	r3, r3
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	e7d7      	b.n	8002c76 <USB_ActivateEndpoint+0x12e>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002cc6:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002cca:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002cce:	0512      	lsls	r2, r2, #20
 8002cd0:	0d12      	lsrs	r2, r2, #20
 8002cd2:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002cd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cda:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002cde:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002ce2:	780c      	ldrb	r4, [r1, #0]
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002cea:	88cc      	ldrh	r4, [r1, #6]
 8002cec:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8002cf0:	0864      	lsrs	r4, r4, #1
 8002cf2:	0064      	lsls	r4, r4, #1
 8002cf4:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002cf8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002cfc:	780c      	ldrb	r4, [r1, #0]
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002d04:	890c      	ldrh	r4, [r1, #8]
 8002d06:	3204      	adds	r2, #4
 8002d08:	0864      	lsrs	r4, r4, #1
 8002d0a:	0064      	lsls	r4, r4, #1
 8002d0c:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8002d10:	784a      	ldrb	r2, [r1, #1]
 8002d12:	780c      	ldrb	r4, [r1, #0]
 8002d14:	2a00      	cmp	r2, #0
 8002d16:	d147      	bne.n	8002da8 <USB_ActivateEndpoint+0x260>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d18:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002d1c:	0455      	lsls	r5, r2, #17
 8002d1e:	d508      	bpl.n	8002d32 <USB_ActivateEndpoint+0x1ea>
 8002d20:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002d24:	4013      	ands	r3, r2
 8002d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d32:	780a      	ldrb	r2, [r1, #0]
 8002d34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d38:	065c      	lsls	r4, r3, #25
 8002d3a:	d50b      	bpl.n	8002d54 <USB_ActivateEndpoint+0x20c>
 8002d3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d44:	051b      	lsls	r3, r3, #20
 8002d46:	0d1b      	lsrs	r3, r3, #20
 8002d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002d54:	780a      	ldrb	r2, [r1, #0]
 8002d56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5e:	051b      	lsls	r3, r3, #20
 8002d60:	0d1b      	lsrs	r3, r3, #20
 8002d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d6e:	f248 0280 	movw	r2, #32896	; 0x8080
 8002d72:	780c      	ldrb	r4, [r1, #0]
 8002d74:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d8e:	7809      	ldrb	r1, [r1, #0]
 8002d90:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002da6:	e724      	b.n	8002bf2 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002da8:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002dac:	0452      	lsls	r2, r2, #17
 8002dae:	d508      	bpl.n	8002dc2 <USB_ActivateEndpoint+0x27a>
 8002db0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002db4:	4013      	ands	r3, r2
 8002db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dc2:	780a      	ldrb	r2, [r1, #0]
 8002dc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dc8:	065b      	lsls	r3, r3, #25
 8002dca:	d50b      	bpl.n	8002de4 <USB_ActivateEndpoint+0x29c>
 8002dcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	0d1b      	lsrs	r3, r3, #20
 8002dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ddc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002de0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002de4:	780a      	ldrb	r2, [r1, #0]
 8002de6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dee:	051b      	lsls	r3, r3, #20
 8002df0:	0d1b      	lsrs	r3, r3, #20
 8002df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dfe:	f248 0280 	movw	r2, #32896	; 0x8080
 8002e02:	780c      	ldrb	r4, [r1, #0]
 8002e04:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e1a:	7809      	ldrb	r1, [r1, #0]
 8002e1c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	e7b8      	b.n	8002d9c <USB_ActivateEndpoint+0x254>
 8002e2a:	bf00      	nop
 8002e2c:	ffff8000 	.word	0xffff8000

08002e30 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002e30:	780a      	ldrb	r2, [r1, #0]
 8002e32:	b98a      	cbnz	r2, 8002e58 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002e34:	8803      	ldrh	r3, [r0, #0]
 8002e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e46:	f083 0310 	eor.w	r3, r3, #16
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e52:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002e54:	2000      	movs	r0, #0
 8002e56:	4770      	bx	lr
    if (ep->is_in)
 8002e58:	784b      	ldrb	r3, [r1, #1]
 8002e5a:	b183      	cbz	r3, 8002e7e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002e5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002e7c:	e7ea      	b.n	8002e54 <USB_EPSetStall+0x24>
 8002e7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e92:	e7ed      	b.n	8002e70 <USB_EPSetStall+0x40>

08002e94 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002e94:	784b      	ldrb	r3, [r1, #1]
 8002e96:	780a      	ldrb	r2, [r1, #0]
 8002e98:	b313      	cbz	r3, 8002ee0 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e9e:	065b      	lsls	r3, r3, #25
 8002ea0:	d50b      	bpl.n	8002eba <USB_EPClearStall+0x26>
 8002ea2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eaa:	051b      	lsls	r3, r3, #20
 8002eac:	0d1b      	lsrs	r3, r3, #20
 8002eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002eba:	780a      	ldrb	r2, [r1, #0]
 8002ebc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002edc:	2000      	movs	r0, #0
 8002ede:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ee0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ee4:	045b      	lsls	r3, r3, #17
 8002ee6:	d50b      	bpl.n	8002f00 <USB_EPClearStall+0x6c>
 8002ee8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	0d1b      	lsrs	r3, r3, #20
 8002ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f00:	780a      	ldrb	r2, [r1, #0]
 8002f02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002f16:	e7db      	b.n	8002ed0 <USB_EPClearStall+0x3c>

08002f18 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002f18:	b911      	cbnz	r1, 8002f20 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002f20:	2000      	movs	r0, #0
 8002f22:	4770      	bx	lr

08002f24 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002f24:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002f28:	b280      	uxth	r0, r0
 8002f2a:	4770      	bx	lr

08002f2c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	4770      	bx	lr

08002f30 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002f30:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002f32:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002f34:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002f36:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002f3a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002f3c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002f40:	42a3      	cmp	r3, r4
 8002f42:	d100      	bne.n	8002f46 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002f4a:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002f4e:	3401      	adds	r4, #1
 8002f50:	e7f6      	b.n	8002f40 <USB_WritePMA+0x10>
	...

08002f54 <USB_EPStartXfer>:
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002f58:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002f5a:	7849      	ldrb	r1, [r1, #1]
{
 8002f5c:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002f5e:	2901      	cmp	r1, #1
 8002f60:	6933      	ldr	r3, [r6, #16]
 8002f62:	7ab0      	ldrb	r0, [r6, #10]
 8002f64:	d15e      	bne.n	8003024 <USB_EPStartXfer+0xd0>
    if (ep->xfer_len > ep->maxpacket)
 8002f66:	429a      	cmp	r2, r3
 8002f68:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002f6a:	bf9b      	ittet	ls
 8002f6c:	2300      	movls	r3, #0
 8002f6e:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002f70:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002f72:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002f74:	bf88      	it	hi
 8002f76:	61b2      	strhi	r2, [r6, #24]
 8002f78:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002f7a:	bb08      	cbnz	r0, 8002fc0 <USB_EPStartXfer+0x6c>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002f7c:	88b2      	ldrh	r2, [r6, #4]
 8002f7e:	6971      	ldr	r1, [r6, #20]
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7ff ffd5 	bl	8002f30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002f86:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002f8a:	7832      	ldrb	r2, [r6, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f92:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002f96:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f9a:	7832      	ldrb	r2, [r6, #0]
 8002f9c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb8:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002fc0:	7832      	ldrb	r2, [r6, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002fc2:	4628      	mov	r0, r5
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002fc4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002fc8:	00d2      	lsls	r2, r2, #3
 8002fca:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fce:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002fd2:	b289      	uxth	r1, r1
 8002fd4:	440a      	add	r2, r1
 8002fd6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002fda:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002fde:	6971      	ldr	r1, [r6, #20]
        pmabuffer = ep->pmaaddr1;
 8002fe0:	bf14      	ite	ne
 8002fe2:	8932      	ldrhne	r2, [r6, #8]
        pmabuffer = ep->pmaaddr0;
 8002fe4:	88f2      	ldrheq	r2, [r6, #6]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002fe6:	f7ff ffa3 	bl	8002f30 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002fea:	7873      	ldrb	r3, [r6, #1]
 8002fec:	7832      	ldrb	r2, [r6, #0]
 8002fee:	b963      	cbnz	r3, 800300a <USB_EPStartXfer+0xb6>
 8002ff0:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff8:	051b      	lsls	r3, r3, #20
 8002ffa:	0d1b      	lsrs	r3, r3, #20
 8002ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003004:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8003008:	e7c7      	b.n	8002f9a <USB_EPStartXfer+0x46>
 800300a:	2b01      	cmp	r3, #1
 800300c:	d1c5      	bne.n	8002f9a <USB_EPStartXfer+0x46>
 800300e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003016:	051b      	lsls	r3, r3, #20
 8003018:	0d1b      	lsrs	r3, r3, #20
 800301a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003022:	e7ef      	b.n	8003004 <USB_EPStartXfer+0xb0>
    if (ep->xfer_len > ep->maxpacket)
 8003024:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8003026:	bf93      	iteet	ls
 8003028:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 800302a:	1ad2      	subhi	r2, r2, r3
 800302c:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 800302e:	61b3      	strls	r3, [r6, #24]
 8003030:	bf98      	it	ls
 8003032:	4613      	movls	r3, r2
 8003034:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8003036:	bb18      	cbnz	r0, 8003080 <USB_EPStartXfer+0x12c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003038:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800303c:	2b3e      	cmp	r3, #62	; 0x3e
 800303e:	b289      	uxth	r1, r1
 8003040:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8003044:	f101 0106 	add.w	r1, r1, #6
 8003048:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800304c:	d949      	bls.n	80030e2 <USB_EPStartXfer+0x18e>
 800304e:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8003052:	06dc      	lsls	r4, r3, #27
 8003054:	bf04      	itt	eq
 8003056:	f102 33ff 	addeq.w	r3, r2, #4294967295
 800305a:	b29a      	uxtheq	r2, r3
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <USB_EPStartXfer+0x1a4>)
 800305e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003062:	b29b      	uxth	r3, r3
 8003064:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003068:	7832      	ldrb	r2, [r6, #0]
 800306a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800306e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800307e:	e797      	b.n	8002fb0 <USB_EPStartXfer+0x5c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003080:	b9b9      	cbnz	r1, 80030b2 <USB_EPStartXfer+0x15e>
 8003082:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8003086:	2b3e      	cmp	r3, #62	; 0x3e
 8003088:	b289      	uxth	r1, r1
 800308a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800308e:	f101 0102 	add.w	r1, r1, #2
 8003092:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8003096:	d91c      	bls.n	80030d2 <USB_EPStartXfer+0x17e>
 8003098:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800309c:	06da      	lsls	r2, r3, #27
 800309e:	bf04      	itt	eq
 80030a0:	f100 32ff 	addeq.w	r2, r0, #4294967295
 80030a4:	b290      	uxtheq	r0, r2
 80030a6:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <USB_EPStartXfer+0x1a4>)
 80030a8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80030ac:	b292      	uxth	r2, r2
 80030ae:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 80030b2:	7871      	ldrb	r1, [r6, #1]
 80030b4:	7832      	ldrb	r2, [r6, #0]
 80030b6:	2900      	cmp	r1, #0
 80030b8:	d0be      	beq.n	8003038 <USB_EPStartXfer+0xe4>
 80030ba:	2901      	cmp	r1, #1
 80030bc:	d1d4      	bne.n	8003068 <USB_EPStartXfer+0x114>
 80030be:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80030c2:	b289      	uxth	r1, r1
 80030c4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80030c8:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 80030cc:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
 80030d0:	e7ca      	b.n	8003068 <USB_EPStartXfer+0x114>
 80030d2:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80030d6:	07d8      	lsls	r0, r3, #31
 80030d8:	bf44      	itt	mi
 80030da:	3201      	addmi	r2, #1
 80030dc:	b292      	uxthmi	r2, r2
 80030de:	0292      	lsls	r2, r2, #10
 80030e0:	e7e4      	b.n	80030ac <USB_EPStartXfer+0x158>
 80030e2:	f3c3 024f 	ubfx	r2, r3, #1, #16
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	bf44      	itt	mi
 80030ea:	3201      	addmi	r2, #1
 80030ec:	b292      	uxthmi	r2, r2
 80030ee:	0292      	lsls	r2, r2, #10
 80030f0:	b292      	uxth	r2, r2
 80030f2:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 80030f6:	e7b7      	b.n	8003068 <USB_EPStartXfer+0x114>
 80030f8:	ffff8000 	.word	0xffff8000

080030fc <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80030fc:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80030fe:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003100:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003102:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003106:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003108:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800310c:	42a3      	cmp	r3, r4
 800310e:	d100      	bne.n	8003112 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8003110:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003112:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8003116:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 800311a:	3401      	adds	r4, #1
 800311c:	e7f6      	b.n	800310c <USB_ReadPMA+0x10>
	...

08003120 <trigger_rain_signal>:

/*
 * 雨量计翻转一次调用一次
 */
void trigger_rain_signal(waterInf_t *waterInf) {
	waterInf->rainGaugePscCount++;
 8003120:	f890 325c 	ldrb.w	r3, [r0, #604]	; 0x25c

	if (waterInf->rainGaugePscCount
			>= rtuParameter.rainGaugeParamater.rainGaugePsc) {
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <trigger_rain_signal+0x24>)
	waterInf->rainGaugePscCount++;
 8003126:	3301      	adds	r3, #1
	if (waterInf->rainGaugePscCount
 8003128:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
	waterInf->rainGaugePscCount++;
 800312c:	b2db      	uxtb	r3, r3
	if (waterInf->rainGaugePscCount
 800312e:	429a      	cmp	r2, r3
	waterInf->rainGaugePscCount++;
 8003130:	f880 325c 	strb.w	r3, [r0, #604]	; 0x25c
	if (waterInf->rainGaugePscCount
 8003134:	d805      	bhi.n	8003142 <trigger_rain_signal+0x22>
		waterInf->rainFall[0]++;
 8003136:	8803      	ldrh	r3, [r0, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	8003      	strh	r3, [r0, #0]
		waterInf->rainGaugePscCount = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	f880 325c 	strb.w	r3, [r0, #604]	; 0x25c
 8003142:	4770      	bx	lr
 8003144:	2000075c 	.word	0x2000075c

08003148 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003148:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800314a:	f000 f9e3 	bl	8003514 <xTaskGetSchedulerState>
 800314e:	2801      	cmp	r0, #1
 8003150:	d003      	beq.n	800315a <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003156:	f000 b85d 	b.w	8003214 <xPortSysTickHandler>
 800315a:	bd08      	pop	{r3, pc}

0800315c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800315c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800315e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003160:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003162:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003168:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800316a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800316c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800316e:	3301      	adds	r3, #1
 8003170:	6003      	str	r3, [r0, #0]
 8003172:	4770      	bx	lr

08003174 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003174:	6841      	ldr	r1, [r0, #4]
 8003176:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003178:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800317a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800317c:	6882      	ldr	r2, [r0, #8]
 800317e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003184:	bf08      	it	eq
 8003186:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003188:	2200      	movs	r2, #0
 800318a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	3801      	subs	r0, #1
 8003190:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003192:	4770      	bx	lr

08003194 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <pxCurrentTCBConst2>)
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	6808      	ldr	r0, [r1, #0]
 800319a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800319e:	f380 8809 	msr	PSP, r0
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f04f 0000 	mov.w	r0, #0
 80031aa:	f380 8811 	msr	BASEPRI, r0
 80031ae:	f04e 0e0d 	orr.w	lr, lr, #13
 80031b2:	4770      	bx	lr

080031b4 <pxCurrentTCBConst2>:
 80031b4:	20000098 	.word	0x20000098

080031b8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80031b8:	f3ef 8011 	mrs	r0, BASEPRI
 80031bc:	f04f 0150 	mov.w	r1, #80	; 0x50
 80031c0:	f381 8811 	msr	BASEPRI, r1
 80031c4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 80031c6:	2000      	movs	r0, #0

080031c8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 80031c8:	f380 8811 	msr	BASEPRI, r0
 80031cc:	4770      	bx	lr
	...

080031d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80031d0:	f3ef 8009 	mrs	r0, PSP
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <pxCurrentTCBConst>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031e0:	6010      	str	r0, [r2, #0]
 80031e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80031e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80031ea:	f380 8811 	msr	BASEPRI, r0
 80031ee:	f000 f921 	bl	8003434 <vTaskSwitchContext>
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f380 8811 	msr	BASEPRI, r0
 80031fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	6808      	ldr	r0, [r1, #0]
 8003202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003206:	f380 8809 	msr	PSP, r0
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	4770      	bx	lr

08003210 <pxCurrentTCBConst>:
 8003210:	20000098 	.word	0x20000098

08003214 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003214:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003216:	f7ff ffcf 	bl	80031b8 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800321a:	f000 f87d 	bl	8003318 <xTaskIncrementTick>
 800321e:	b118      	cbz	r0, 8003228 <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <xPortSysTickHandler+0x20>)
 8003226:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003228:	2000      	movs	r0, #0
}
 800322a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800322e:	f7ff bfcb 	b.w	80031c8 <vPortClearInterruptMask>
 8003232:	bf00      	nop
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003238:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800323a:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800323e:	2b0f      	cmp	r3, #15
 8003240:	d908      	bls.n	8003254 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <vPortValidateInterruptPriority+0x34>)
 8003244:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <vPortValidateInterruptPriority+0x38>)
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d902      	bls.n	8003254 <vPortValidateInterruptPriority+0x1c>
 800324e:	f7ff ffb3 	bl	80031b8 <ulPortSetInterruptMask>
 8003252:	e7fe      	b.n	8003252 <vPortValidateInterruptPriority+0x1a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <vPortValidateInterruptPriority+0x3c>)
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <vPortValidateInterruptPriority+0x40>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003260:	4293      	cmp	r3, r2
 8003262:	d902      	bls.n	800326a <vPortValidateInterruptPriority+0x32>
 8003264:	f7ff ffa8 	bl	80031b8 <ulPortSetInterruptMask>
 8003268:	e7fe      	b.n	8003268 <vPortValidateInterruptPriority+0x30>
 800326a:	bd08      	pop	{r3, pc}
 800326c:	e000e3f0 	.word	0xe000e3f0
 8003270:	20000090 	.word	0x20000090
 8003274:	e000ed0c 	.word	0xe000ed0c
 8003278:	20000094 	.word	0x20000094

0800327c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003280:	4604      	mov	r4, r0
 8003282:	b910      	cbnz	r0, 800328a <xQueueGiveFromISR+0xe>
 8003284:	f7ff ff98 	bl	80031b8 <ulPortSetInterruptMask>
 8003288:	e7fe      	b.n	8003288 <xQueueGiveFromISR+0xc>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800328a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800328c:	b113      	cbz	r3, 8003294 <xQueueGiveFromISR+0x18>
 800328e:	f7ff ff93 	bl	80031b8 <ulPortSetInterruptMask>
 8003292:	e7fe      	b.n	8003292 <xQueueGiveFromISR+0x16>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	b90b      	cbnz	r3, 800329c <xQueueGiveFromISR+0x20>
 8003298:	6843      	ldr	r3, [r0, #4]
 800329a:	bb3b      	cbnz	r3, 80032ec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800329c:	f7ff ffcc 	bl	8003238 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032a0:	f7ff ff8a 	bl	80031b8 <ulPortSetInterruptMask>
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80032a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032a8:	4606      	mov	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d301      	bcc.n	80032b2 <xQueueGiveFromISR+0x36>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032ae:	2400      	movs	r4, #0
 80032b0:	e013      	b.n	80032da <xQueueGiveFromISR+0x5e>
			++( pxQueue->uxMessagesWaiting );
 80032b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032b4:	3301      	adds	r3, #1
 80032b6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 80032b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032ba:	3301      	adds	r3, #1
 80032bc:	d112      	bne.n	80032e4 <xQueueGiveFromISR+0x68>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c0:	b90b      	cbnz	r3, 80032c6 <xQueueGiveFromISR+0x4a>
			xReturn = pdPASS;
 80032c2:	2401      	movs	r4, #1
 80032c4:	e009      	b.n	80032da <xQueueGiveFromISR+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032ca:	f000 f8e7 	bl	800349c <xTaskRemoveFromEventList>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d0f7      	beq.n	80032c2 <xQueueGiveFromISR+0x46>
							if( pxHigherPriorityTaskWoken != NULL )
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	d0f5      	beq.n	80032c2 <xQueueGiveFromISR+0x46>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032d6:	2401      	movs	r4, #1
 80032d8:	602c      	str	r4, [r5, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80032da:	4630      	mov	r0, r6
 80032dc:	f7ff ff74 	bl	80031c8 <vPortClearInterruptMask>

	return xReturn;
}
 80032e0:	4620      	mov	r0, r4
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
				++( pxQueue->xTxLock );
 80032e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80032e6:	3301      	adds	r3, #1
 80032e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80032ea:	e7ea      	b.n	80032c2 <xQueueGiveFromISR+0x46>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80032ec:	f7ff ff64 	bl	80031b8 <ulPortSetInterruptMask>
 80032f0:	e7fe      	b.n	80032f0 <xQueueGiveFromISR+0x74>
	...

080032f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f4:	4a06      	ldr	r2, [pc, #24]	; (8003310 <prvResetNextTaskUnblockTime+0x1c>)
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <prvResetNextTaskUnblockTime+0x20>)
 80032fc:	b919      	cbnz	r1, 8003306 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032fe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800330a:	68d2      	ldr	r2, [r2, #12]
 800330c:	6852      	ldr	r2, [r2, #4]
 800330e:	e7f8      	b.n	8003302 <prvResetNextTaskUnblockTime+0xe>
 8003310:	2000009c 	.word	0x2000009c
 8003314:	2000013c 	.word	0x2000013c

08003318 <xTaskIncrementTick>:
{
 8003318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800331c:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <xTaskIncrementTick+0xf0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d14e      	bne.n	80033c2 <xTaskIncrementTick+0xaa>
		++xTickCount;
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <xTaskIncrementTick+0xf4>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	3201      	adds	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800332c:	681d      	ldr	r5, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800332e:	b98d      	cbnz	r5, 8003354 <xTaskIncrementTick+0x3c>
				taskSWITCH_DELAYED_LISTS();
 8003330:	4b37      	ldr	r3, [pc, #220]	; (8003410 <xTaskIncrementTick+0xf8>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	b112      	cbz	r2, 800333e <xTaskIncrementTick+0x26>
 8003338:	f7ff ff3e 	bl	80031b8 <ulPortSetInterruptMask>
 800333c:	e7fe      	b.n	800333c <xTaskIncrementTick+0x24>
 800333e:	4a35      	ldr	r2, [pc, #212]	; (8003414 <xTaskIncrementTick+0xfc>)
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	6810      	ldr	r0, [r2, #0]
 8003344:	6018      	str	r0, [r3, #0]
 8003346:	6011      	str	r1, [r2, #0]
 8003348:	4a33      	ldr	r2, [pc, #204]	; (8003418 <xTaskIncrementTick+0x100>)
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	f7ff ffd0 	bl	80032f4 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 8003354:	4c31      	ldr	r4, [pc, #196]	; (800341c <xTaskIncrementTick+0x104>)
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	4f30      	ldr	r7, [pc, #192]	; (8003420 <xTaskIncrementTick+0x108>)
 800335e:	429d      	cmp	r5, r3
 8003360:	d33e      	bcc.n	80033e0 <xTaskIncrementTick+0xc8>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003362:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003410 <xTaskIncrementTick+0xf8>
						prvAddTaskToReadyList( pxTCB );
 8003366:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8003430 <xTaskIncrementTick+0x118>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800336a:	f8d8 2000 	ldr.w	r2, [r8]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	bb72      	cbnz	r2, 80033d0 <xTaskIncrementTick+0xb8>
						xNextTaskUnblockTime = portMAX_DELAY;
 8003372:	f04f 32ff 	mov.w	r2, #4294967295
 8003376:	6022      	str	r2, [r4, #0]
						break;
 8003378:	e032      	b.n	80033e0 <xTaskIncrementTick+0xc8>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800337a:	f106 0a04 	add.w	sl, r6, #4
 800337e:	4650      	mov	r0, sl
 8003380:	f7ff fef8 	bl	8003174 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003384:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003386:	b119      	cbz	r1, 8003390 <xTaskIncrementTick+0x78>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	f106 0018 	add.w	r0, r6, #24
 800338c:	f7ff fef2 	bl	8003174 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8003390:	2201      	movs	r2, #1
 8003392:	f04f 0e14 	mov.w	lr, #20
 8003396:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003398:	f8d9 3000 	ldr.w	r3, [r9]
 800339c:	fa02 f100 	lsl.w	r1, r2, r0
 80033a0:	4319      	orrs	r1, r3
 80033a2:	4b20      	ldr	r3, [pc, #128]	; (8003424 <xTaskIncrementTick+0x10c>)
 80033a4:	f8c9 1000 	str.w	r1, [r9]
 80033a8:	fb0e 3000 	mla	r0, lr, r0, r3
 80033ac:	4651      	mov	r1, sl
 80033ae:	f7ff fed5 	bl	800315c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033b2:	6838      	ldr	r0, [r7, #0]
 80033b4:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80033b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
 80033b8:	4291      	cmp	r1, r2
 80033ba:	bf28      	it	cs
 80033bc:	f04f 0b01 	movcs.w	fp, #1
 80033c0:	e7d3      	b.n	800336a <xTaskIncrementTick+0x52>
		++uxPendedTicks;
 80033c2:	4a19      	ldr	r2, [pc, #100]	; (8003428 <xTaskIncrementTick+0x110>)
BaseType_t xSwitchRequired = pdFALSE;
 80033c4:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80033c8:	6813      	ldr	r3, [r2, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e011      	b.n	80033f4 <xTaskIncrementTick+0xdc>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033d0:	f8d8 2000 	ldr.w	r2, [r8]
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	68d6      	ldr	r6, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80033d8:	6871      	ldr	r1, [r6, #4]
						if( xConstTickCount < xItemValue )
 80033da:	428d      	cmp	r5, r1
 80033dc:	d2cd      	bcs.n	800337a <xTaskIncrementTick+0x62>
							xNextTaskUnblockTime = xItemValue;
 80033de:	6021      	str	r1, [r4, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <xTaskIncrementTick+0x10c>)
 80033e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033e6:	2214      	movs	r2, #20
 80033e8:	434a      	muls	r2, r1
 80033ea:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80033ec:	2a02      	cmp	r2, #2
 80033ee:	bf28      	it	cs
 80033f0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <xTaskIncrementTick+0x114>)
 80033f6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80033f8:	2a00      	cmp	r2, #0
 80033fa:	bf18      	it	ne
 80033fc:	f04f 0b01 	movne.w	fp, #1
}
 8003400:	4658      	mov	r0, fp
 8003402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	20000134 	.word	0x20000134
 800340c:	2000015c 	.word	0x2000015c
 8003410:	2000009c 	.word	0x2000009c
 8003414:	200000a0 	.word	0x200000a0
 8003418:	20000140 	.word	0x20000140
 800341c:	2000013c 	.word	0x2000013c
 8003420:	20000098 	.word	0x20000098
 8003424:	200000a4 	.word	0x200000a4
 8003428:	20000130 	.word	0x20000130
 800342c:	20000160 	.word	0x20000160
 8003430:	20000138 	.word	0x20000138

08003434 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <vTaskSwitchContext+0x54>)
{
 8003436:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <vTaskSwitchContext+0x58>)
 800343c:	b112      	cbz	r2, 8003444 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800343e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003444:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <vTaskSwitchContext+0x5c>)
 8003448:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	2214      	movs	r2, #20
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f1c3 031f 	rsb	r3, r3, #31
 8003456:	435a      	muls	r2, r3
 8003458:	490e      	ldr	r1, [pc, #56]	; (8003494 <vTaskSwitchContext+0x60>)
 800345a:	588c      	ldr	r4, [r1, r2]
 800345c:	1888      	adds	r0, r1, r2
 800345e:	b914      	cbnz	r4, 8003466 <vTaskSwitchContext+0x32>
 8003460:	f7ff feaa 	bl	80031b8 <ulPortSetInterruptMask>
 8003464:	e7fe      	b.n	8003464 <vTaskSwitchContext+0x30>
 8003466:	6844      	ldr	r4, [r0, #4]
 8003468:	3208      	adds	r2, #8
 800346a:	6864      	ldr	r4, [r4, #4]
 800346c:	440a      	add	r2, r1
 800346e:	4294      	cmp	r4, r2
 8003470:	bf08      	it	eq
 8003472:	6862      	ldreq	r2, [r4, #4]
 8003474:	6044      	str	r4, [r0, #4]
 8003476:	bf08      	it	eq
 8003478:	6042      	streq	r2, [r0, #4]
 800347a:	2214      	movs	r2, #20
 800347c:	fb02 1303 	mla	r3, r2, r3, r1
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <vTaskSwitchContext+0x64>)
 8003486:	e7db      	b.n	8003440 <vTaskSwitchContext+0xc>
 8003488:	20000134 	.word	0x20000134
 800348c:	20000160 	.word	0x20000160
 8003490:	20000138 	.word	0x20000138
 8003494:	200000a4 	.word	0x200000a4
 8003498:	20000098 	.word	0x20000098

0800349c <xTaskRemoveFromEventList>:
{
 800349c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800349e:	68c3      	ldr	r3, [r0, #12]
 80034a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80034a2:	b914      	cbnz	r4, 80034aa <xTaskRemoveFromEventList+0xe>
 80034a4:	f7ff fe88 	bl	80031b8 <ulPortSetInterruptMask>
 80034a8:	e7fe      	b.n	80034a8 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034aa:	f104 0518 	add.w	r5, r4, #24
 80034ae:	4628      	mov	r0, r5
 80034b0:	f7ff fe60 	bl	8003174 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <xTaskRemoveFromEventList+0x60>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	b9e3      	cbnz	r3, 80034f4 <xTaskRemoveFromEventList+0x58>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80034ba:	1d25      	adds	r5, r4, #4
 80034bc:	4628      	mov	r0, r5
 80034be:	f7ff fe59 	bl	8003174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034c2:	2301      	movs	r3, #1
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <xTaskRemoveFromEventList+0x64>)
 80034c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034c8:	6808      	ldr	r0, [r1, #0]
 80034ca:	4093      	lsls	r3, r2
 80034cc:	4303      	orrs	r3, r0
 80034ce:	2014      	movs	r0, #20
 80034d0:	600b      	str	r3, [r1, #0]
 80034d2:	4629      	mov	r1, r5
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <xTaskRemoveFromEventList+0x68>)
 80034d6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034da:	f7ff fe3f 	bl	800315c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <xTaskRemoveFromEventList+0x6c>)
 80034e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80034e8:	bf85      	ittet	hi
 80034ea:	2001      	movhi	r0, #1
 80034ec:	4b07      	ldrhi	r3, [pc, #28]	; (800350c <xTaskRemoveFromEventList+0x70>)
		xReturn = pdFALSE;
 80034ee:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80034f0:	6018      	strhi	r0, [r3, #0]
}
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034f4:	4629      	mov	r1, r5
 80034f6:	4806      	ldr	r0, [pc, #24]	; (8003510 <xTaskRemoveFromEventList+0x74>)
 80034f8:	e7ef      	b.n	80034da <xTaskRemoveFromEventList+0x3e>
 80034fa:	bf00      	nop
 80034fc:	20000134 	.word	0x20000134
 8003500:	20000138 	.word	0x20000138
 8003504:	200000a4 	.word	0x200000a4
 8003508:	20000098 	.word	0x20000098
 800350c:	20000160 	.word	0x20000160
 8003510:	20000144 	.word	0x20000144

08003514 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <xTaskGetSchedulerState+0x18>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	b133      	cbz	r3, 8003528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <xTaskGetSchedulerState+0x1c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003520:	bf0c      	ite	eq
 8003522:	2002      	moveq	r0, #2
 8003524:	2000      	movne	r0, #0
 8003526:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003528:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
 800352a:	4770      	bx	lr
 800352c:	20000158 	.word	0x20000158
 8003530:	20000134 	.word	0x20000134

08003534 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003534:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003536:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800353a:	b90b      	cbnz	r3, 8003540 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800353c:	2002      	movs	r0, #2
 800353e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4798      	blx	r3
 8003544:	2800      	cmp	r0, #0
 8003546:	d1f9      	bne.n	800353c <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003548:	bd08      	pop	{r3, pc}

0800354a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800354a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800354c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4798      	blx	r3
  return USBD_OK;
}
 8003554:	2000      	movs	r0, #0
 8003556:	bd08      	pop	{r3, pc}

08003558 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003558:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800355a:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 800355e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003560:	4628      	mov	r0, r5
 8003562:	f000 fa6c 	bl	8003a3e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003566:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003568:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800356c:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003570:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003574:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003578:	f001 031f 	and.w	r3, r1, #31
 800357c:	2b01      	cmp	r3, #1
 800357e:	d00e      	beq.n	800359e <USBD_LL_SetupStage+0x46>
 8003580:	d307      	bcc.n	8003592 <USBD_LL_SetupStage+0x3a>
 8003582:	2b02      	cmp	r3, #2
 8003584:	d010      	beq.n	80035a8 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003586:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800358a:	4620      	mov	r0, r4
 800358c:	f7fd faea 	bl	8000b64 <USBD_LL_StallEP>
    break;
 8003590:	e003      	b.n	800359a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003592:	4629      	mov	r1, r5
 8003594:	4620      	mov	r0, r4
 8003596:	f000 f8d5 	bl	8003744 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800359a:	2000      	movs	r0, #0
 800359c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800359e:	4629      	mov	r1, r5
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f9d1 	bl	8003948 <USBD_StdItfReq>
    break;
 80035a6:	e7f8      	b.n	800359a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80035a8:	4629      	mov	r1, r5
 80035aa:	4620      	mov	r0, r4
 80035ac:	f000 f9e4 	bl	8003978 <USBD_StdEPReq>
    break;
 80035b0:	e7f3      	b.n	800359a <USBD_LL_SetupStage+0x42>

080035b2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80035b2:	b538      	push	{r3, r4, r5, lr}
 80035b4:	4604      	mov	r4, r0
 80035b6:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80035b8:	bb11      	cbnz	r1, 8003600 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80035ba:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d10f      	bne.n	80035e2 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80035c2:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80035c6:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d90b      	bls.n	80035e6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80035ce:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf28      	it	cs
 80035d4:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80035d6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80035da:	b292      	uxth	r2, r2
 80035dc:	4629      	mov	r1, r5
 80035de:	f000 fa57 	bl	8003a90 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80035e2:	2000      	movs	r0, #0
 80035e4:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80035e6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	b123      	cbz	r3, 80035f8 <USBD_LL_DataOutStage+0x46>
 80035ee:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80035f2:	2a03      	cmp	r2, #3
 80035f4:	d100      	bne.n	80035f8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80035f6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80035f8:	4620      	mov	r0, r4
 80035fa:	f000 fa51 	bl	8003aa0 <USBD_CtlSendStatus>
 80035fe:	e7f0      	b.n	80035e2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003600:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0eb      	beq.n	80035e2 <USBD_LL_DataOutStage+0x30>
 800360a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800360e:	2a03      	cmp	r2, #3
 8003610:	d1e7      	bne.n	80035e2 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003612:	4798      	blx	r3
 8003614:	e7e5      	b.n	80035e2 <USBD_LL_DataOutStage+0x30>

08003616 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003616:	b570      	push	{r4, r5, r6, lr}
 8003618:	4613      	mov	r3, r2
 800361a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800361c:	460e      	mov	r6, r1
 800361e:	2900      	cmp	r1, #0
 8003620:	d13d      	bne.n	800369e <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003622:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003626:	2a02      	cmp	r2, #2
 8003628:	d10f      	bne.n	800364a <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800362a:	69c5      	ldr	r5, [r0, #28]
 800362c:	6a02      	ldr	r2, [r0, #32]
 800362e:	4295      	cmp	r5, r2
 8003630:	d914      	bls.n	800365c <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003632:	1aaa      	subs	r2, r5, r2
 8003634:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003636:	4619      	mov	r1, r3
 8003638:	b292      	uxth	r2, r2
 800363a:	f000 fa21 	bl	8003a80 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800363e:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003640:	461a      	mov	r2, r3
 8003642:	4619      	mov	r1, r3
 8003644:	4620      	mov	r0, r4
 8003646:	f7fd fad5 	bl	8000bf4 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800364a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003658:	2000      	movs	r0, #0
 800365a:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800365c:	6983      	ldr	r3, [r0, #24]
 800365e:	fbb3 f5f2 	udiv	r5, r3, r2
 8003662:	fb02 3515 	mls	r5, r2, r5, r3
 8003666:	b965      	cbnz	r5, 8003682 <USBD_LL_DataInStage+0x6c>
 8003668:	429a      	cmp	r2, r3
 800366a:	d80a      	bhi.n	8003682 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800366c:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003670:	4293      	cmp	r3, r2
 8003672:	d206      	bcs.n	8003682 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003674:	462a      	mov	r2, r5
 8003676:	f000 fa03 	bl	8003a80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800367a:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800367e:	462b      	mov	r3, r5
 8003680:	e7de      	b.n	8003640 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003682:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	b12b      	cbz	r3, 8003696 <USBD_LL_DataInStage+0x80>
 800368a:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800368e:	2a03      	cmp	r2, #3
 8003690:	d101      	bne.n	8003696 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003692:	4620      	mov	r0, r4
 8003694:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003696:	4620      	mov	r0, r4
 8003698:	f000 fa0d 	bl	8003ab6 <USBD_CtlReceiveStatus>
 800369c:	e7d5      	b.n	800364a <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800369e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0d7      	beq.n	8003658 <USBD_LL_DataInStage+0x42>
 80036a8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80036ac:	2a03      	cmp	r2, #3
 80036ae:	d1d3      	bne.n	8003658 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80036b0:	4798      	blx	r3
 80036b2:	e7d1      	b.n	8003658 <USBD_LL_DataInStage+0x42>

080036b4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80036b4:	2200      	movs	r2, #0
{
 80036b6:	b538      	push	{r3, r4, r5, lr}
 80036b8:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80036ba:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80036bc:	4611      	mov	r1, r2
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	f7fd fa40 	bl	8000b44 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80036c4:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80036c6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80036ca:	2200      	movs	r2, #0
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	4620      	mov	r0, r4
 80036d0:	f7fd fa38 	bl	8000b44 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80036da:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80036de:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80036e0:	b12b      	cbz	r3, 80036ee <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80036e2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80036e6:	7921      	ldrb	r1, [r4, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4620      	mov	r0, r4
 80036ec:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80036ee:	2000      	movs	r0, #0
 80036f0:	bd38      	pop	{r3, r4, r5, pc}

080036f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80036f2:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80036f4:	2000      	movs	r0, #0
 80036f6:	4770      	bx	lr

080036f8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80036f8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80036fc:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003700:	2304      	movs	r3, #4
 8003702:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003706:	2000      	movs	r0, #0
 8003708:	4770      	bx	lr

0800370a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800370a:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800370e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8003712:	2000      	movs	r0, #0
 8003714:	4770      	bx	lr

08003716 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003716:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003718:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800371c:	2a03      	cmp	r2, #3
 800371e:	d104      	bne.n	800372a <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003720:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	b103      	cbz	r3, 800372a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003728:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800372a:	2000      	movs	r0, #0
 800372c:	bd08      	pop	{r3, pc}

0800372e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800372e:	b510      	push	{r4, lr}
 8003730:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	f7fd fa16 	bl	8000b64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003738:	4620      	mov	r0, r4
}
 800373a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800373e:	2100      	movs	r1, #0
 8003740:	f7fd ba10 	b.w	8000b64 <USBD_LL_StallEP>

08003744 <USBD_StdDevReq>:
{
 8003744:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003746:	784b      	ldrb	r3, [r1, #1]
{
 8003748:	4604      	mov	r4, r0
 800374a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800374c:	2b09      	cmp	r3, #9
 800374e:	f200 8081 	bhi.w	8003854 <USBD_StdDevReq+0x110>
 8003752:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003756:	00d0      	.short	0x00d0
 8003758:	007f00ec 	.word	0x007f00ec
 800375c:	007f00e0 	.word	0x007f00e0
 8003760:	000a0074 	.word	0x000a0074
 8003764:	00c0007f 	.word	0x00c0007f
 8003768:	0094      	.short	0x0094
  switch (req->wValue >> 8)
 800376a:	8849      	ldrh	r1, [r1, #2]
 800376c:	0a0b      	lsrs	r3, r1, #8
 800376e:	3b01      	subs	r3, #1
 8003770:	2b06      	cmp	r3, #6
 8003772:	d86f      	bhi.n	8003854 <USBD_StdDevReq+0x110>
 8003774:	e8df f003 	tbb	[pc, r3]
 8003778:	6e291c04 	.word	0x6e291c04
 800377c:	506e      	.short	0x506e
 800377e:	59          	.byte	0x59
 800377f:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003780:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003784:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003786:	f10d 0106 	add.w	r1, sp, #6
 800378a:	7c20      	ldrb	r0, [r4, #16]
 800378c:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800378e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003792:	2a00      	cmp	r2, #0
 8003794:	d06e      	beq.n	8003874 <USBD_StdDevReq+0x130>
 8003796:	88eb      	ldrh	r3, [r5, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d06b      	beq.n	8003874 <USBD_StdDevReq+0x130>
    len = MIN(len , req->wLength);
 800379c:	429a      	cmp	r2, r3
 800379e:	bf28      	it	cs
 80037a0:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80037a2:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80037a4:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80037a8:	4620      	mov	r0, r4
 80037aa:	f000 f95c 	bl	8003a66 <USBD_CtlSendData>
 80037ae:	e061      	b.n	8003874 <USBD_StdDevReq+0x130>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80037b0:	7c02      	ldrb	r2, [r0, #16]
 80037b2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80037b6:	b932      	cbnz	r2, 80037c6 <USBD_StdDevReq+0x82>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80037ba:	f10d 0006 	add.w	r0, sp, #6
 80037be:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80037c0:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80037c2:	7043      	strb	r3, [r0, #1]
 80037c4:	e7e3      	b.n	800378e <USBD_StdDevReq+0x4a>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	e7f7      	b.n	80037ba <USBD_StdDevReq+0x76>
    switch ((uint8_t)(req->wValue))
 80037ca:	b2c9      	uxtb	r1, r1
 80037cc:	2905      	cmp	r1, #5
 80037ce:	d81c      	bhi.n	800380a <USBD_StdDevReq+0xc6>
 80037d0:	e8df f001 	tbb	[pc, r1]
 80037d4:	0f0b0703 	.word	0x0f0b0703
 80037d8:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80037da:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	e7d1      	b.n	8003786 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80037e2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	e7cd      	b.n	8003786 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80037ea:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	e7c9      	b.n	8003786 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80037f2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	e7c5      	b.n	8003786 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80037fa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	e7c1      	b.n	8003786 <USBD_StdDevReq+0x42>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003802:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	e7bd      	b.n	8003786 <USBD_StdDevReq+0x42>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 800380a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800380e:	f10d 0206 	add.w	r2, sp, #6
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	4798      	blx	r3
 8003816:	e7ba      	b.n	800378e <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003818:	7c03      	ldrb	r3, [r0, #16]
 800381a:	b9db      	cbnz	r3, 8003854 <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800381c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003820:	f10d 0006 	add.w	r0, sp, #6
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	4798      	blx	r3
 8003828:	e7b1      	b.n	800378e <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800382a:	7c03      	ldrb	r3, [r0, #16]
 800382c:	b993      	cbnz	r3, 8003854 <USBD_StdDevReq+0x110>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800382e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003832:	f10d 0006 	add.w	r0, sp, #6
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800383a:	2307      	movs	r3, #7
 800383c:	e7c1      	b.n	80037c2 <USBD_StdDevReq+0x7e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800383e:	888b      	ldrh	r3, [r1, #4]
 8003840:	b943      	cbnz	r3, 8003854 <USBD_StdDevReq+0x110>
 8003842:	88cb      	ldrh	r3, [r1, #6]
 8003844:	b933      	cbnz	r3, 8003854 <USBD_StdDevReq+0x110>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003846:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800384a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800384c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800384e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003852:	d103      	bne.n	800385c <USBD_StdDevReq+0x118>
    USBD_CtlError(pdev , req);
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff ff6a 	bl	800372e <USBD_CtlError.constprop.0>
    break;
 800385a:	e00b      	b.n	8003874 <USBD_StdDevReq+0x130>
      pdev->dev_address = dev_addr;
 800385c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003860:	4629      	mov	r1, r5
 8003862:	f7fd f9ab 	bl	8000bbc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003866:	4620      	mov	r0, r4
 8003868:	f000 f91a 	bl	8003aa0 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800386c:	b12d      	cbz	r5, 800387a <USBD_StdDevReq+0x136>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800386e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003870:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003874:	2000      	movs	r0, #0
 8003876:	b003      	add	sp, #12
 8003878:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800387a:	2301      	movs	r3, #1
 800387c:	e7f8      	b.n	8003870 <USBD_StdDevReq+0x12c>
  cfgidx = (uint8_t)(req->wValue);                 
 800387e:	7889      	ldrb	r1, [r1, #2]
 8003880:	4d30      	ldr	r5, [pc, #192]	; (8003944 <USBD_StdDevReq+0x200>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003882:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003884:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003886:	d8e5      	bhi.n	8003854 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state) 
 8003888:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800388c:	2b02      	cmp	r3, #2
 800388e:	d00c      	beq.n	80038aa <USBD_StdDevReq+0x166>
 8003890:	2b03      	cmp	r3, #3
 8003892:	d1df      	bne.n	8003854 <USBD_StdDevReq+0x110>
      if (cfgidx == 0) 
 8003894:	b9b1      	cbnz	r1, 80038c4 <USBD_StdDevReq+0x180>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003896:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8003898:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800389a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 800389e:	f7ff fe54 	bl	800354a <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80038a2:	4620      	mov	r0, r4
 80038a4:	f000 f8fc 	bl	8003aa0 <USBD_CtlSendStatus>
 80038a8:	e7e4      	b.n	8003874 <USBD_StdDevReq+0x130>
      if (cfgidx) 
 80038aa:	2900      	cmp	r1, #0
 80038ac:	d0f9      	beq.n	80038a2 <USBD_StdDevReq+0x15e>
        pdev->dev_config = cfgidx;
 80038ae:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80038b0:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80038b2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80038b4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7ff fe3b 	bl	8003534 <USBD_SetClassConfig>
 80038be:	2802      	cmp	r0, #2
 80038c0:	d1ef      	bne.n	80038a2 <USBD_StdDevReq+0x15e>
 80038c2:	e7c7      	b.n	8003854 <USBD_StdDevReq+0x110>
      else  if (cfgidx != pdev->dev_config) 
 80038c4:	6841      	ldr	r1, [r0, #4]
 80038c6:	2901      	cmp	r1, #1
 80038c8:	d0eb      	beq.n	80038a2 <USBD_StdDevReq+0x15e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80038ca:	b2c9      	uxtb	r1, r1
 80038cc:	f7ff fe3d 	bl	800354a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80038d0:	7829      	ldrb	r1, [r5, #0]
 80038d2:	6061      	str	r1, [r4, #4]
 80038d4:	e7f0      	b.n	80038b8 <USBD_StdDevReq+0x174>
  if (req->wLength != 1) 
 80038d6:	88ca      	ldrh	r2, [r1, #6]
 80038d8:	2a01      	cmp	r2, #1
 80038da:	d1bb      	bne.n	8003854 <USBD_StdDevReq+0x110>
    switch (pdev->dev_state )  
 80038dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d003      	beq.n	80038ec <USBD_StdDevReq+0x1a8>
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d1b5      	bne.n	8003854 <USBD_StdDevReq+0x110>
      USBD_CtlSendData (pdev, 
 80038e8:	1d01      	adds	r1, r0, #4
 80038ea:	e75d      	b.n	80037a8 <USBD_StdDevReq+0x64>
      pdev->dev_default_config = 0;
 80038ec:	4601      	mov	r1, r0
 80038ee:	2300      	movs	r3, #0
 80038f0:	f841 3f08 	str.w	r3, [r1, #8]!
 80038f4:	e758      	b.n	80037a8 <USBD_StdDevReq+0x64>
  switch (pdev->dev_state) 
 80038f6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80038fa:	3b02      	subs	r3, #2
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d8a9      	bhi.n	8003854 <USBD_StdDevReq+0x110>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8003900:	2301      	movs	r3, #1
 8003902:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003904:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003908:	b10b      	cbz	r3, 800390e <USBD_StdDevReq+0x1ca>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800390a:	2303      	movs	r3, #3
 800390c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800390e:	2202      	movs	r2, #2
 8003910:	f104 010c 	add.w	r1, r4, #12
 8003914:	e748      	b.n	80037a8 <USBD_StdDevReq+0x64>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003916:	884b      	ldrh	r3, [r1, #2]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d1ab      	bne.n	8003874 <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 800391c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003920:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003924:	4629      	mov	r1, r5
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4620      	mov	r0, r4
 800392a:	4798      	blx	r3
 800392c:	e7b9      	b.n	80038a2 <USBD_StdDevReq+0x15e>
  switch (pdev->dev_state)
 800392e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003932:	3b02      	subs	r3, #2
 8003934:	2b01      	cmp	r3, #1
 8003936:	d88d      	bhi.n	8003854 <USBD_StdDevReq+0x110>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003938:	884b      	ldrh	r3, [r1, #2]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d19a      	bne.n	8003874 <USBD_StdDevReq+0x130>
      pdev->dev_remote_wakeup = 0; 
 800393e:	2300      	movs	r3, #0
 8003940:	e7ec      	b.n	800391c <USBD_StdDevReq+0x1d8>
 8003942:	bf00      	nop
 8003944:	20000164 	.word	0x20000164

08003948 <USBD_StdItfReq>:
{
 8003948:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800394a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800394e:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8003950:	2b03      	cmp	r3, #3
{
 8003952:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003954:	d10d      	bne.n	8003972 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003956:	790b      	ldrb	r3, [r1, #4]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d80a      	bhi.n	8003972 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800395c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003964:	88eb      	ldrh	r3, [r5, #6]
 8003966:	b913      	cbnz	r3, 800396e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003968:	4620      	mov	r0, r4
 800396a:	f000 f899 	bl	8003aa0 <USBD_CtlSendStatus>
}
 800396e:	2000      	movs	r0, #0
 8003970:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003972:	f7ff fedc 	bl	800372e <USBD_CtlError.constprop.0>
    break;
 8003976:	e7fa      	b.n	800396e <USBD_StdItfReq+0x26>

08003978 <USBD_StdEPReq>:
{
 8003978:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800397a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800397c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800397e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003982:	2a20      	cmp	r2, #32
{
 8003984:	4604      	mov	r4, r0
 8003986:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003988:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800398a:	d105      	bne.n	8003998 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800398c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4798      	blx	r3
}
 8003994:	2000      	movs	r0, #0
 8003996:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003998:	784a      	ldrb	r2, [r1, #1]
 800399a:	2a01      	cmp	r2, #1
 800399c:	d01c      	beq.n	80039d8 <USBD_StdEPReq+0x60>
 800399e:	d32a      	bcc.n	80039f6 <USBD_StdEPReq+0x7e>
 80039a0:	2a03      	cmp	r2, #3
 80039a2:	d1f7      	bne.n	8003994 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80039a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80039a8:	2a02      	cmp	r2, #2
 80039aa:	d040      	beq.n	8003a2e <USBD_StdEPReq+0xb6>
 80039ac:	2a03      	cmp	r2, #3
 80039ae:	d002      	beq.n	80039b6 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80039b0:	f7ff febd 	bl	800372e <USBD_CtlError.constprop.0>
      break;
 80039b4:	e7ee      	b.n	8003994 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80039b6:	884a      	ldrh	r2, [r1, #2]
 80039b8:	b922      	cbnz	r2, 80039c4 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80039ba:	065e      	lsls	r6, r3, #25
 80039bc:	d002      	beq.n	80039c4 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80039be:	4619      	mov	r1, r3
 80039c0:	f7fd f8d0 	bl	8000b64 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80039c4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80039c8:	4629      	mov	r1, r5
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4620      	mov	r0, r4
 80039ce:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 f865 	bl	8003aa0 <USBD_CtlSendStatus>
 80039d6:	e7dd      	b.n	8003994 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80039d8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80039dc:	2a02      	cmp	r2, #2
 80039de:	d026      	beq.n	8003a2e <USBD_StdEPReq+0xb6>
 80039e0:	2a03      	cmp	r2, #3
 80039e2:	d1e5      	bne.n	80039b0 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80039e4:	884a      	ldrh	r2, [r1, #2]
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d1d4      	bne.n	8003994 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80039ea:	0659      	lsls	r1, r3, #25
 80039ec:	d0f0      	beq.n	80039d0 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80039ee:	4619      	mov	r1, r3
 80039f0:	f7fd f8c6 	bl	8000b80 <USBD_LL_ClearStallEP>
 80039f4:	e7e6      	b.n	80039c4 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80039f6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80039fa:	2a02      	cmp	r2, #2
 80039fc:	d017      	beq.n	8003a2e <USBD_StdEPReq+0xb6>
 80039fe:	2a03      	cmp	r2, #3
 8003a00:	d1d6      	bne.n	80039b0 <USBD_StdEPReq+0x38>
 8003a02:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003a06:	f016 0f80 	tst.w	r6, #128	; 0x80
 8003a0a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003a0e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003a10:	bf14      	ite	ne
 8003a12:	3514      	addne	r5, #20
 8003a14:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003a18:	f7fd f8c0 	bl	8000b9c <USBD_LL_IsStallEP>
 8003a1c:	b168      	cbz	r0, 8003a3a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003a1e:	2301      	movs	r3, #1
 8003a20:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003a22:	2202      	movs	r2, #2
 8003a24:	4629      	mov	r1, r5
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 f81d 	bl	8003a66 <USBD_CtlSendData>
      break;
 8003a2c:	e7b2      	b.n	8003994 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8003a2e:	065a      	lsls	r2, r3, #25
 8003a30:	d0b0      	beq.n	8003994 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7fd f896 	bl	8000b64 <USBD_LL_StallEP>
 8003a38:	e7ac      	b.n	8003994 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003a3a:	6028      	str	r0, [r5, #0]
 8003a3c:	e7f1      	b.n	8003a22 <USBD_StdEPReq+0xaa>

08003a3e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003a3e:	780b      	ldrb	r3, [r1, #0]
 8003a40:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003a42:	784b      	ldrb	r3, [r1, #1]
 8003a44:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003a46:	78ca      	ldrb	r2, [r1, #3]
 8003a48:	788b      	ldrb	r3, [r1, #2]
 8003a4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a4e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003a50:	794a      	ldrb	r2, [r1, #5]
 8003a52:	790b      	ldrb	r3, [r1, #4]
 8003a54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a58:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003a5a:	79ca      	ldrb	r2, [r1, #7]
 8003a5c:	798b      	ldrb	r3, [r1, #6]
 8003a5e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003a62:	80c3      	strh	r3, [r0, #6]
 8003a64:	4770      	bx	lr

08003a66 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003a66:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003a68:	2202      	movs	r2, #2
{
 8003a6a:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003a6c:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8003a70:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003a72:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003a74:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003a76:	2100      	movs	r1, #0
 8003a78:	f7fd f8ae 	bl	8000bd8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	bd10      	pop	{r4, pc}

08003a80 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003a80:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003a82:	4613      	mov	r3, r2
 8003a84:	460a      	mov	r2, r1
 8003a86:	2100      	movs	r1, #0
 8003a88:	f7fd f8a6 	bl	8000bd8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	bd08      	pop	{r3, pc}

08003a90 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003a90:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003a92:	4613      	mov	r3, r2
 8003a94:	460a      	mov	r2, r1
 8003a96:	2100      	movs	r1, #0
 8003a98:	f7fd f8ac 	bl	8000bf4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	bd08      	pop	{r3, pc}

08003aa0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003aa0:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7fd f893 	bl	8000bd8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	bd08      	pop	{r3, pc}

08003ab6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003ab6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8003ab8:	2305      	movs	r3, #5
 8003aba:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003abe:	2300      	movs	r3, #0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fd f896 	bl	8000bf4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003ac8:	2000      	movs	r0, #0
 8003aca:	bd08      	pop	{r3, pc}

08003acc <__libc_init_array>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	2500      	movs	r5, #0
 8003ad0:	4e0c      	ldr	r6, [pc, #48]	; (8003b04 <__libc_init_array+0x38>)
 8003ad2:	4c0d      	ldr	r4, [pc, #52]	; (8003b08 <__libc_init_array+0x3c>)
 8003ad4:	1ba4      	subs	r4, r4, r6
 8003ad6:	10a4      	asrs	r4, r4, #2
 8003ad8:	42a5      	cmp	r5, r4
 8003ada:	d109      	bne.n	8003af0 <__libc_init_array+0x24>
 8003adc:	f000 ff64 	bl	80049a8 <_init>
 8003ae0:	2500      	movs	r5, #0
 8003ae2:	4e0a      	ldr	r6, [pc, #40]	; (8003b0c <__libc_init_array+0x40>)
 8003ae4:	4c0a      	ldr	r4, [pc, #40]	; (8003b10 <__libc_init_array+0x44>)
 8003ae6:	1ba4      	subs	r4, r4, r6
 8003ae8:	10a4      	asrs	r4, r4, #2
 8003aea:	42a5      	cmp	r5, r4
 8003aec:	d105      	bne.n	8003afa <__libc_init_array+0x2e>
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af4:	4798      	blx	r3
 8003af6:	3501      	adds	r5, #1
 8003af8:	e7ee      	b.n	8003ad8 <__libc_init_array+0xc>
 8003afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afe:	4798      	blx	r3
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7f2      	b.n	8003aea <__libc_init_array+0x1e>
 8003b04:	08004af4 	.word	0x08004af4
 8003b08:	08004af4 	.word	0x08004af4
 8003b0c:	08004af4 	.word	0x08004af4
 8003b10:	08004af8 	.word	0x08004af8

08003b14 <memset>:
 8003b14:	4603      	mov	r3, r0
 8003b16:	4402      	add	r2, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memset+0xa>
 8003b1c:	4770      	bx	lr
 8003b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b22:	e7f9      	b.n	8003b18 <memset+0x4>

08003b24 <iprintf>:
 8003b24:	b40f      	push	{r0, r1, r2, r3}
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <iprintf+0x2c>)
 8003b28:	b513      	push	{r0, r1, r4, lr}
 8003b2a:	681c      	ldr	r4, [r3, #0]
 8003b2c:	b124      	cbz	r4, 8003b38 <iprintf+0x14>
 8003b2e:	69a3      	ldr	r3, [r4, #24]
 8003b30:	b913      	cbnz	r3, 8003b38 <iprintf+0x14>
 8003b32:	4620      	mov	r0, r4
 8003b34:	f000 f84e 	bl	8003bd4 <__sinit>
 8003b38:	ab05      	add	r3, sp, #20
 8003b3a:	9a04      	ldr	r2, [sp, #16]
 8003b3c:	68a1      	ldr	r1, [r4, #8]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	f000 f957 	bl	8003df4 <_vfiprintf_r>
 8003b46:	b002      	add	sp, #8
 8003b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b4c:	b004      	add	sp, #16
 8003b4e:	4770      	bx	lr
 8003b50:	20000004 	.word	0x20000004

08003b54 <_cleanup_r>:
 8003b54:	4901      	ldr	r1, [pc, #4]	; (8003b5c <_cleanup_r+0x8>)
 8003b56:	f000 b8a9 	b.w	8003cac <_fwalk_reent>
 8003b5a:	bf00      	nop
 8003b5c:	080046cd 	.word	0x080046cd

08003b60 <std.isra.0>:
 8003b60:	2300      	movs	r3, #0
 8003b62:	b510      	push	{r4, lr}
 8003b64:	4604      	mov	r4, r0
 8003b66:	6003      	str	r3, [r0, #0]
 8003b68:	6043      	str	r3, [r0, #4]
 8003b6a:	6083      	str	r3, [r0, #8]
 8003b6c:	8181      	strh	r1, [r0, #12]
 8003b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b70:	81c2      	strh	r2, [r0, #14]
 8003b72:	6103      	str	r3, [r0, #16]
 8003b74:	6143      	str	r3, [r0, #20]
 8003b76:	6183      	str	r3, [r0, #24]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	305c      	adds	r0, #92	; 0x5c
 8003b7e:	f7ff ffc9 	bl	8003b14 <memset>
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <std.isra.0+0x38>)
 8003b84:	6224      	str	r4, [r4, #32]
 8003b86:	6263      	str	r3, [r4, #36]	; 0x24
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <std.isra.0+0x3c>)
 8003b8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <std.isra.0+0x40>)
 8003b8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <std.isra.0+0x44>)
 8003b92:	6323      	str	r3, [r4, #48]	; 0x30
 8003b94:	bd10      	pop	{r4, pc}
 8003b96:	bf00      	nop
 8003b98:	08004371 	.word	0x08004371
 8003b9c:	08004393 	.word	0x08004393
 8003ba0:	080043cb 	.word	0x080043cb
 8003ba4:	080043ef 	.word	0x080043ef

08003ba8 <__sfmoreglue>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	2568      	movs	r5, #104	; 0x68
 8003bac:	1e4a      	subs	r2, r1, #1
 8003bae:	4355      	muls	r5, r2
 8003bb0:	460e      	mov	r6, r1
 8003bb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bb6:	f000 f897 	bl	8003ce8 <_malloc_r>
 8003bba:	4604      	mov	r4, r0
 8003bbc:	b140      	cbz	r0, 8003bd0 <__sfmoreglue+0x28>
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	e880 0042 	stmia.w	r0, {r1, r6}
 8003bc4:	300c      	adds	r0, #12
 8003bc6:	60a0      	str	r0, [r4, #8]
 8003bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bcc:	f7ff ffa2 	bl	8003b14 <memset>
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}

08003bd4 <__sinit>:
 8003bd4:	6983      	ldr	r3, [r0, #24]
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	bb33      	cbnz	r3, 8003c2a <__sinit+0x56>
 8003bdc:	6483      	str	r3, [r0, #72]	; 0x48
 8003bde:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003be0:	6503      	str	r3, [r0, #80]	; 0x50
 8003be2:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <__sinit+0x58>)
 8003be4:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <__sinit+0x5c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6282      	str	r2, [r0, #40]	; 0x28
 8003bea:	4298      	cmp	r0, r3
 8003bec:	bf04      	itt	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	6183      	streq	r3, [r0, #24]
 8003bf2:	f000 f81f 	bl	8003c34 <__sfp>
 8003bf6:	6060      	str	r0, [r4, #4]
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f000 f81b 	bl	8003c34 <__sfp>
 8003bfe:	60a0      	str	r0, [r4, #8]
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 f817 	bl	8003c34 <__sfp>
 8003c06:	2200      	movs	r2, #0
 8003c08:	60e0      	str	r0, [r4, #12]
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	6860      	ldr	r0, [r4, #4]
 8003c0e:	f7ff ffa7 	bl	8003b60 <std.isra.0>
 8003c12:	2201      	movs	r2, #1
 8003c14:	2109      	movs	r1, #9
 8003c16:	68a0      	ldr	r0, [r4, #8]
 8003c18:	f7ff ffa2 	bl	8003b60 <std.isra.0>
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	2112      	movs	r1, #18
 8003c20:	68e0      	ldr	r0, [r4, #12]
 8003c22:	f7ff ff9d 	bl	8003b60 <std.isra.0>
 8003c26:	2301      	movs	r3, #1
 8003c28:	61a3      	str	r3, [r4, #24]
 8003c2a:	bd10      	pop	{r4, pc}
 8003c2c:	08004abc 	.word	0x08004abc
 8003c30:	08003b55 	.word	0x08003b55

08003c34 <__sfp>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <__sfp+0x74>)
 8003c38:	4607      	mov	r7, r0
 8003c3a:	681e      	ldr	r6, [r3, #0]
 8003c3c:	69b3      	ldr	r3, [r6, #24]
 8003c3e:	b913      	cbnz	r3, 8003c46 <__sfp+0x12>
 8003c40:	4630      	mov	r0, r6
 8003c42:	f7ff ffc7 	bl	8003bd4 <__sinit>
 8003c46:	3648      	adds	r6, #72	; 0x48
 8003c48:	68b4      	ldr	r4, [r6, #8]
 8003c4a:	6873      	ldr	r3, [r6, #4]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	d503      	bpl.n	8003c58 <__sfp+0x24>
 8003c50:	6833      	ldr	r3, [r6, #0]
 8003c52:	b133      	cbz	r3, 8003c62 <__sfp+0x2e>
 8003c54:	6836      	ldr	r6, [r6, #0]
 8003c56:	e7f7      	b.n	8003c48 <__sfp+0x14>
 8003c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c5c:	b16d      	cbz	r5, 8003c7a <__sfp+0x46>
 8003c5e:	3468      	adds	r4, #104	; 0x68
 8003c60:	e7f4      	b.n	8003c4c <__sfp+0x18>
 8003c62:	2104      	movs	r1, #4
 8003c64:	4638      	mov	r0, r7
 8003c66:	f7ff ff9f 	bl	8003ba8 <__sfmoreglue>
 8003c6a:	6030      	str	r0, [r6, #0]
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1f1      	bne.n	8003c54 <__sfp+0x20>
 8003c70:	230c      	movs	r3, #12
 8003c72:	4604      	mov	r4, r0
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4620      	mov	r0, r4
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c7e:	81e3      	strh	r3, [r4, #14]
 8003c80:	2301      	movs	r3, #1
 8003c82:	6665      	str	r5, [r4, #100]	; 0x64
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	6025      	str	r5, [r4, #0]
 8003c88:	60a5      	str	r5, [r4, #8]
 8003c8a:	6065      	str	r5, [r4, #4]
 8003c8c:	6125      	str	r5, [r4, #16]
 8003c8e:	6165      	str	r5, [r4, #20]
 8003c90:	61a5      	str	r5, [r4, #24]
 8003c92:	2208      	movs	r2, #8
 8003c94:	4629      	mov	r1, r5
 8003c96:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c9a:	f7ff ff3b 	bl	8003b14 <memset>
 8003c9e:	6365      	str	r5, [r4, #52]	; 0x34
 8003ca0:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ca2:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ca4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003ca6:	e7e6      	b.n	8003c76 <__sfp+0x42>
 8003ca8:	08004abc 	.word	0x08004abc

08003cac <_fwalk_reent>:
 8003cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cb0:	4680      	mov	r8, r0
 8003cb2:	4689      	mov	r9, r1
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cba:	b914      	cbnz	r4, 8003cc2 <_fwalk_reent+0x16>
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc2:	68a5      	ldr	r5, [r4, #8]
 8003cc4:	6867      	ldr	r7, [r4, #4]
 8003cc6:	3f01      	subs	r7, #1
 8003cc8:	d501      	bpl.n	8003cce <_fwalk_reent+0x22>
 8003cca:	6824      	ldr	r4, [r4, #0]
 8003ccc:	e7f5      	b.n	8003cba <_fwalk_reent+0xe>
 8003cce:	89ab      	ldrh	r3, [r5, #12]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d907      	bls.n	8003ce4 <_fwalk_reent+0x38>
 8003cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	d003      	beq.n	8003ce4 <_fwalk_reent+0x38>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4640      	mov	r0, r8
 8003ce0:	47c8      	blx	r9
 8003ce2:	4306      	orrs	r6, r0
 8003ce4:	3568      	adds	r5, #104	; 0x68
 8003ce6:	e7ee      	b.n	8003cc6 <_fwalk_reent+0x1a>

08003ce8 <_malloc_r>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	1ccd      	adds	r5, r1, #3
 8003cec:	f025 0503 	bic.w	r5, r5, #3
 8003cf0:	3508      	adds	r5, #8
 8003cf2:	2d0c      	cmp	r5, #12
 8003cf4:	bf38      	it	cc
 8003cf6:	250c      	movcc	r5, #12
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	db01      	blt.n	8003d02 <_malloc_r+0x1a>
 8003cfe:	42a9      	cmp	r1, r5
 8003d00:	d903      	bls.n	8003d0a <_malloc_r+0x22>
 8003d02:	230c      	movs	r3, #12
 8003d04:	6033      	str	r3, [r6, #0]
 8003d06:	2000      	movs	r0, #0
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	f000 fd8d 	bl	8004828 <__malloc_lock>
 8003d0e:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <_malloc_r+0xb4>)
 8003d10:	6814      	ldr	r4, [r2, #0]
 8003d12:	4621      	mov	r1, r4
 8003d14:	b991      	cbnz	r1, 8003d3c <_malloc_r+0x54>
 8003d16:	4c22      	ldr	r4, [pc, #136]	; (8003da0 <_malloc_r+0xb8>)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	b91b      	cbnz	r3, 8003d24 <_malloc_r+0x3c>
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f000 fb17 	bl	8004350 <_sbrk_r>
 8003d22:	6020      	str	r0, [r4, #0]
 8003d24:	4629      	mov	r1, r5
 8003d26:	4630      	mov	r0, r6
 8003d28:	f000 fb12 	bl	8004350 <_sbrk_r>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d126      	bne.n	8003d7e <_malloc_r+0x96>
 8003d30:	230c      	movs	r3, #12
 8003d32:	4630      	mov	r0, r6
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	f000 fd78 	bl	800482a <__malloc_unlock>
 8003d3a:	e7e4      	b.n	8003d06 <_malloc_r+0x1e>
 8003d3c:	680b      	ldr	r3, [r1, #0]
 8003d3e:	1b5b      	subs	r3, r3, r5
 8003d40:	d41a      	bmi.n	8003d78 <_malloc_r+0x90>
 8003d42:	2b0b      	cmp	r3, #11
 8003d44:	d90f      	bls.n	8003d66 <_malloc_r+0x7e>
 8003d46:	600b      	str	r3, [r1, #0]
 8003d48:	18cc      	adds	r4, r1, r3
 8003d4a:	50cd      	str	r5, [r1, r3]
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f000 fd6c 	bl	800482a <__malloc_unlock>
 8003d52:	f104 000b 	add.w	r0, r4, #11
 8003d56:	1d23      	adds	r3, r4, #4
 8003d58:	f020 0007 	bic.w	r0, r0, #7
 8003d5c:	1ac3      	subs	r3, r0, r3
 8003d5e:	d01b      	beq.n	8003d98 <_malloc_r+0xb0>
 8003d60:	425a      	negs	r2, r3
 8003d62:	50e2      	str	r2, [r4, r3]
 8003d64:	bd70      	pop	{r4, r5, r6, pc}
 8003d66:	428c      	cmp	r4, r1
 8003d68:	bf0b      	itete	eq
 8003d6a:	6863      	ldreq	r3, [r4, #4]
 8003d6c:	684b      	ldrne	r3, [r1, #4]
 8003d6e:	6013      	streq	r3, [r2, #0]
 8003d70:	6063      	strne	r3, [r4, #4]
 8003d72:	bf18      	it	ne
 8003d74:	460c      	movne	r4, r1
 8003d76:	e7e9      	b.n	8003d4c <_malloc_r+0x64>
 8003d78:	460c      	mov	r4, r1
 8003d7a:	6849      	ldr	r1, [r1, #4]
 8003d7c:	e7ca      	b.n	8003d14 <_malloc_r+0x2c>
 8003d7e:	1cc4      	adds	r4, r0, #3
 8003d80:	f024 0403 	bic.w	r4, r4, #3
 8003d84:	42a0      	cmp	r0, r4
 8003d86:	d005      	beq.n	8003d94 <_malloc_r+0xac>
 8003d88:	1a21      	subs	r1, r4, r0
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f000 fae0 	bl	8004350 <_sbrk_r>
 8003d90:	3001      	adds	r0, #1
 8003d92:	d0cd      	beq.n	8003d30 <_malloc_r+0x48>
 8003d94:	6025      	str	r5, [r4, #0]
 8003d96:	e7d9      	b.n	8003d4c <_malloc_r+0x64>
 8003d98:	bd70      	pop	{r4, r5, r6, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000168 	.word	0x20000168
 8003da0:	2000016c 	.word	0x2000016c

08003da4 <__sfputc_r>:
 8003da4:	6893      	ldr	r3, [r2, #8]
 8003da6:	b410      	push	{r4}
 8003da8:	3b01      	subs	r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	6093      	str	r3, [r2, #8]
 8003dae:	da08      	bge.n	8003dc2 <__sfputc_r+0x1e>
 8003db0:	6994      	ldr	r4, [r2, #24]
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	db02      	blt.n	8003dbc <__sfputc_r+0x18>
 8003db6:	b2cb      	uxtb	r3, r1
 8003db8:	2b0a      	cmp	r3, #10
 8003dba:	d102      	bne.n	8003dc2 <__sfputc_r+0x1e>
 8003dbc:	bc10      	pop	{r4}
 8003dbe:	f000 bb1b 	b.w	80043f8 <__swbuf_r>
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	1c58      	adds	r0, r3, #1
 8003dc6:	6010      	str	r0, [r2, #0]
 8003dc8:	7019      	strb	r1, [r3, #0]
 8003dca:	b2c8      	uxtb	r0, r1
 8003dcc:	bc10      	pop	{r4}
 8003dce:	4770      	bx	lr

08003dd0 <__sfputs_r>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	460f      	mov	r7, r1
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	18d5      	adds	r5, r2, r3
 8003dda:	42ac      	cmp	r4, r5
 8003ddc:	d101      	bne.n	8003de2 <__sfputs_r+0x12>
 8003dde:	2000      	movs	r0, #0
 8003de0:	e007      	b.n	8003df2 <__sfputs_r+0x22>
 8003de2:	463a      	mov	r2, r7
 8003de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff ffdb 	bl	8003da4 <__sfputc_r>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	d1f3      	bne.n	8003dda <__sfputs_r+0xa>
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003df4 <_vfiprintf_r>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	b09d      	sub	sp, #116	; 0x74
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	4617      	mov	r7, r2
 8003dfe:	9303      	str	r3, [sp, #12]
 8003e00:	4606      	mov	r6, r0
 8003e02:	b118      	cbz	r0, 8003e0c <_vfiprintf_r+0x18>
 8003e04:	6983      	ldr	r3, [r0, #24]
 8003e06:	b90b      	cbnz	r3, 8003e0c <_vfiprintf_r+0x18>
 8003e08:	f7ff fee4 	bl	8003bd4 <__sinit>
 8003e0c:	4b7c      	ldr	r3, [pc, #496]	; (8004000 <_vfiprintf_r+0x20c>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d157      	bne.n	8003ec2 <_vfiprintf_r+0xce>
 8003e12:	6874      	ldr	r4, [r6, #4]
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	0718      	lsls	r0, r3, #28
 8003e18:	d55d      	bpl.n	8003ed6 <_vfiprintf_r+0xe2>
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05a      	beq.n	8003ed6 <_vfiprintf_r+0xe2>
 8003e20:	2300      	movs	r3, #0
 8003e22:	9309      	str	r3, [sp, #36]	; 0x24
 8003e24:	2320      	movs	r3, #32
 8003e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e2a:	2330      	movs	r3, #48	; 0x30
 8003e2c:	f04f 0b01 	mov.w	fp, #1
 8003e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e34:	46b8      	mov	r8, r7
 8003e36:	4645      	mov	r5, r8
 8003e38:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d155      	bne.n	8003eec <_vfiprintf_r+0xf8>
 8003e40:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e44:	d00b      	beq.n	8003e5e <_vfiprintf_r+0x6a>
 8003e46:	4653      	mov	r3, sl
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f7ff ffbf 	bl	8003dd0 <__sfputs_r>
 8003e52:	3001      	adds	r0, #1
 8003e54:	f000 80c4 	beq.w	8003fe0 <_vfiprintf_r+0x1ec>
 8003e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5a:	4453      	add	r3, sl
 8003e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5e:	f898 3000 	ldrb.w	r3, [r8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80bc 	beq.w	8003fe0 <_vfiprintf_r+0x1ec>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6e:	9304      	str	r3, [sp, #16]
 8003e70:	9307      	str	r3, [sp, #28]
 8003e72:	9205      	str	r2, [sp, #20]
 8003e74:	9306      	str	r3, [sp, #24]
 8003e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	7829      	ldrb	r1, [r5, #0]
 8003e80:	4860      	ldr	r0, [pc, #384]	; (8004004 <_vfiprintf_r+0x210>)
 8003e82:	f000 fcc3 	bl	800480c <memchr>
 8003e86:	f105 0801 	add.w	r8, r5, #1
 8003e8a:	9b04      	ldr	r3, [sp, #16]
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d131      	bne.n	8003ef4 <_vfiprintf_r+0x100>
 8003e90:	06d9      	lsls	r1, r3, #27
 8003e92:	bf44      	itt	mi
 8003e94:	2220      	movmi	r2, #32
 8003e96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e9a:	071a      	lsls	r2, r3, #28
 8003e9c:	bf44      	itt	mi
 8003e9e:	222b      	movmi	r2, #43	; 0x2b
 8003ea0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ea4:	782a      	ldrb	r2, [r5, #0]
 8003ea6:	2a2a      	cmp	r2, #42	; 0x2a
 8003ea8:	d02c      	beq.n	8003f04 <_vfiprintf_r+0x110>
 8003eaa:	2100      	movs	r1, #0
 8003eac:	200a      	movs	r0, #10
 8003eae:	9a07      	ldr	r2, [sp, #28]
 8003eb0:	46a8      	mov	r8, r5
 8003eb2:	f898 3000 	ldrb.w	r3, [r8]
 8003eb6:	3501      	adds	r5, #1
 8003eb8:	3b30      	subs	r3, #48	; 0x30
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d96d      	bls.n	8003f9a <_vfiprintf_r+0x1a6>
 8003ebe:	b371      	cbz	r1, 8003f1e <_vfiprintf_r+0x12a>
 8003ec0:	e026      	b.n	8003f10 <_vfiprintf_r+0x11c>
 8003ec2:	4b51      	ldr	r3, [pc, #324]	; (8004008 <_vfiprintf_r+0x214>)
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d101      	bne.n	8003ecc <_vfiprintf_r+0xd8>
 8003ec8:	68b4      	ldr	r4, [r6, #8]
 8003eca:	e7a3      	b.n	8003e14 <_vfiprintf_r+0x20>
 8003ecc:	4b4f      	ldr	r3, [pc, #316]	; (800400c <_vfiprintf_r+0x218>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	bf08      	it	eq
 8003ed2:	68f4      	ldreq	r4, [r6, #12]
 8003ed4:	e79e      	b.n	8003e14 <_vfiprintf_r+0x20>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f000 faf1 	bl	80044c0 <__swsetup_r>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d09e      	beq.n	8003e20 <_vfiprintf_r+0x2c>
 8003ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee6:	b01d      	add	sp, #116	; 0x74
 8003ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eec:	2b25      	cmp	r3, #37	; 0x25
 8003eee:	d0a7      	beq.n	8003e40 <_vfiprintf_r+0x4c>
 8003ef0:	46a8      	mov	r8, r5
 8003ef2:	e7a0      	b.n	8003e36 <_vfiprintf_r+0x42>
 8003ef4:	4a43      	ldr	r2, [pc, #268]	; (8004004 <_vfiprintf_r+0x210>)
 8003ef6:	4645      	mov	r5, r8
 8003ef8:	1a80      	subs	r0, r0, r2
 8003efa:	fa0b f000 	lsl.w	r0, fp, r0
 8003efe:	4318      	orrs	r0, r3
 8003f00:	9004      	str	r0, [sp, #16]
 8003f02:	e7bb      	b.n	8003e7c <_vfiprintf_r+0x88>
 8003f04:	9a03      	ldr	r2, [sp, #12]
 8003f06:	1d11      	adds	r1, r2, #4
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	9103      	str	r1, [sp, #12]
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	db01      	blt.n	8003f14 <_vfiprintf_r+0x120>
 8003f10:	9207      	str	r2, [sp, #28]
 8003f12:	e004      	b.n	8003f1e <_vfiprintf_r+0x12a>
 8003f14:	4252      	negs	r2, r2
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	9207      	str	r2, [sp, #28]
 8003f1c:	9304      	str	r3, [sp, #16]
 8003f1e:	f898 3000 	ldrb.w	r3, [r8]
 8003f22:	2b2e      	cmp	r3, #46	; 0x2e
 8003f24:	d110      	bne.n	8003f48 <_vfiprintf_r+0x154>
 8003f26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f2a:	f108 0101 	add.w	r1, r8, #1
 8003f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f30:	d137      	bne.n	8003fa2 <_vfiprintf_r+0x1ae>
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	f108 0802 	add.w	r8, r8, #2
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	9203      	str	r2, [sp, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfb8      	it	lt
 8003f42:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f46:	9305      	str	r3, [sp, #20]
 8003f48:	4d31      	ldr	r5, [pc, #196]	; (8004010 <_vfiprintf_r+0x21c>)
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	f898 1000 	ldrb.w	r1, [r8]
 8003f50:	4628      	mov	r0, r5
 8003f52:	f000 fc5b 	bl	800480c <memchr>
 8003f56:	b140      	cbz	r0, 8003f6a <_vfiprintf_r+0x176>
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	1b40      	subs	r0, r0, r5
 8003f5c:	fa03 f000 	lsl.w	r0, r3, r0
 8003f60:	9b04      	ldr	r3, [sp, #16]
 8003f62:	f108 0801 	add.w	r8, r8, #1
 8003f66:	4303      	orrs	r3, r0
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	f898 1000 	ldrb.w	r1, [r8]
 8003f6e:	2206      	movs	r2, #6
 8003f70:	4828      	ldr	r0, [pc, #160]	; (8004014 <_vfiprintf_r+0x220>)
 8003f72:	f108 0701 	add.w	r7, r8, #1
 8003f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f7a:	f000 fc47 	bl	800480c <memchr>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d034      	beq.n	8003fec <_vfiprintf_r+0x1f8>
 8003f82:	4b25      	ldr	r3, [pc, #148]	; (8004018 <_vfiprintf_r+0x224>)
 8003f84:	bb03      	cbnz	r3, 8003fc8 <_vfiprintf_r+0x1d4>
 8003f86:	9b03      	ldr	r3, [sp, #12]
 8003f88:	3307      	adds	r3, #7
 8003f8a:	f023 0307 	bic.w	r3, r3, #7
 8003f8e:	3308      	adds	r3, #8
 8003f90:	9303      	str	r3, [sp, #12]
 8003f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f94:	444b      	add	r3, r9
 8003f96:	9309      	str	r3, [sp, #36]	; 0x24
 8003f98:	e74c      	b.n	8003e34 <_vfiprintf_r+0x40>
 8003f9a:	fb00 3202 	mla	r2, r0, r2, r3
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	e786      	b.n	8003eb0 <_vfiprintf_r+0xbc>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	250a      	movs	r5, #10
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	4688      	mov	r8, r1
 8003fac:	f898 2000 	ldrb.w	r2, [r8]
 8003fb0:	3101      	adds	r1, #1
 8003fb2:	3a30      	subs	r2, #48	; 0x30
 8003fb4:	2a09      	cmp	r2, #9
 8003fb6:	d903      	bls.n	8003fc0 <_vfiprintf_r+0x1cc>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0c5      	beq.n	8003f48 <_vfiprintf_r+0x154>
 8003fbc:	9005      	str	r0, [sp, #20]
 8003fbe:	e7c3      	b.n	8003f48 <_vfiprintf_r+0x154>
 8003fc0:	fb05 2000 	mla	r0, r5, r0, r2
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e7f0      	b.n	8003faa <_vfiprintf_r+0x1b6>
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <_vfiprintf_r+0x228>)
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fdc:	4681      	mov	r9, r0
 8003fde:	d1d8      	bne.n	8003f92 <_vfiprintf_r+0x19e>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	065b      	lsls	r3, r3, #25
 8003fe4:	f53f af7d 	bmi.w	8003ee2 <_vfiprintf_r+0xee>
 8003fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fea:	e77c      	b.n	8003ee6 <_vfiprintf_r+0xf2>
 8003fec:	ab03      	add	r3, sp, #12
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <_vfiprintf_r+0x228>)
 8003ff4:	a904      	add	r1, sp, #16
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f000 f88a 	bl	8004110 <_printf_i>
 8003ffc:	e7ec      	b.n	8003fd8 <_vfiprintf_r+0x1e4>
 8003ffe:	bf00      	nop
 8004000:	08004a7c 	.word	0x08004a7c
 8004004:	08004ac0 	.word	0x08004ac0
 8004008:	08004a9c 	.word	0x08004a9c
 800400c:	08004a5c 	.word	0x08004a5c
 8004010:	08004ac6 	.word	0x08004ac6
 8004014:	08004aca 	.word	0x08004aca
 8004018:	00000000 	.word	0x00000000
 800401c:	08003dd1 	.word	0x08003dd1

08004020 <_printf_common>:
 8004020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004024:	4691      	mov	r9, r2
 8004026:	461f      	mov	r7, r3
 8004028:	688a      	ldr	r2, [r1, #8]
 800402a:	690b      	ldr	r3, [r1, #16]
 800402c:	4606      	mov	r6, r0
 800402e:	4293      	cmp	r3, r2
 8004030:	bfb8      	it	lt
 8004032:	4613      	movlt	r3, r2
 8004034:	f8c9 3000 	str.w	r3, [r9]
 8004038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800403c:	460c      	mov	r4, r1
 800403e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004042:	b112      	cbz	r2, 800404a <_printf_common+0x2a>
 8004044:	3301      	adds	r3, #1
 8004046:	f8c9 3000 	str.w	r3, [r9]
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	0699      	lsls	r1, r3, #26
 800404e:	bf42      	ittt	mi
 8004050:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004054:	3302      	addmi	r3, #2
 8004056:	f8c9 3000 	strmi.w	r3, [r9]
 800405a:	6825      	ldr	r5, [r4, #0]
 800405c:	f015 0506 	ands.w	r5, r5, #6
 8004060:	d107      	bne.n	8004072 <_printf_common+0x52>
 8004062:	f104 0a19 	add.w	sl, r4, #25
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	f8d9 2000 	ldr.w	r2, [r9]
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	429d      	cmp	r5, r3
 8004070:	db2a      	blt.n	80040c8 <_printf_common+0xa8>
 8004072:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	3300      	adds	r3, #0
 800407a:	bf18      	it	ne
 800407c:	2301      	movne	r3, #1
 800407e:	0692      	lsls	r2, r2, #26
 8004080:	d42f      	bmi.n	80040e2 <_printf_common+0xc2>
 8004082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004086:	4639      	mov	r1, r7
 8004088:	4630      	mov	r0, r6
 800408a:	47c0      	blx	r8
 800408c:	3001      	adds	r0, #1
 800408e:	d022      	beq.n	80040d6 <_printf_common+0xb6>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	68e5      	ldr	r5, [r4, #12]
 8004094:	f003 0306 	and.w	r3, r3, #6
 8004098:	2b04      	cmp	r3, #4
 800409a:	bf18      	it	ne
 800409c:	2500      	movne	r5, #0
 800409e:	f8d9 2000 	ldr.w	r2, [r9]
 80040a2:	f04f 0900 	mov.w	r9, #0
 80040a6:	bf08      	it	eq
 80040a8:	1aad      	subeq	r5, r5, r2
 80040aa:	68a3      	ldr	r3, [r4, #8]
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	bf08      	it	eq
 80040b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040b4:	4293      	cmp	r3, r2
 80040b6:	bfc4      	itt	gt
 80040b8:	1a9b      	subgt	r3, r3, r2
 80040ba:	18ed      	addgt	r5, r5, r3
 80040bc:	341a      	adds	r4, #26
 80040be:	454d      	cmp	r5, r9
 80040c0:	d11b      	bne.n	80040fa <_printf_common+0xda>
 80040c2:	2000      	movs	r0, #0
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	2301      	movs	r3, #1
 80040ca:	4652      	mov	r2, sl
 80040cc:	4639      	mov	r1, r7
 80040ce:	4630      	mov	r0, r6
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d103      	bne.n	80040de <_printf_common+0xbe>
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040de:	3501      	adds	r5, #1
 80040e0:	e7c1      	b.n	8004066 <_printf_common+0x46>
 80040e2:	2030      	movs	r0, #48	; 0x30
 80040e4:	18e1      	adds	r1, r4, r3
 80040e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f0:	4422      	add	r2, r4
 80040f2:	3302      	adds	r3, #2
 80040f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040f8:	e7c3      	b.n	8004082 <_printf_common+0x62>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4622      	mov	r2, r4
 80040fe:	4639      	mov	r1, r7
 8004100:	4630      	mov	r0, r6
 8004102:	47c0      	blx	r8
 8004104:	3001      	adds	r0, #1
 8004106:	d0e6      	beq.n	80040d6 <_printf_common+0xb6>
 8004108:	f109 0901 	add.w	r9, r9, #1
 800410c:	e7d7      	b.n	80040be <_printf_common+0x9e>
	...

08004110 <_printf_i>:
 8004110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004114:	4617      	mov	r7, r2
 8004116:	7e0a      	ldrb	r2, [r1, #24]
 8004118:	b085      	sub	sp, #20
 800411a:	2a6e      	cmp	r2, #110	; 0x6e
 800411c:	4698      	mov	r8, r3
 800411e:	4606      	mov	r6, r0
 8004120:	460c      	mov	r4, r1
 8004122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004124:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004128:	f000 80bc 	beq.w	80042a4 <_printf_i+0x194>
 800412c:	d81a      	bhi.n	8004164 <_printf_i+0x54>
 800412e:	2a63      	cmp	r2, #99	; 0x63
 8004130:	d02e      	beq.n	8004190 <_printf_i+0x80>
 8004132:	d80a      	bhi.n	800414a <_printf_i+0x3a>
 8004134:	2a00      	cmp	r2, #0
 8004136:	f000 80c8 	beq.w	80042ca <_printf_i+0x1ba>
 800413a:	2a58      	cmp	r2, #88	; 0x58
 800413c:	f000 808a 	beq.w	8004254 <_printf_i+0x144>
 8004140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004144:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004148:	e02a      	b.n	80041a0 <_printf_i+0x90>
 800414a:	2a64      	cmp	r2, #100	; 0x64
 800414c:	d001      	beq.n	8004152 <_printf_i+0x42>
 800414e:	2a69      	cmp	r2, #105	; 0x69
 8004150:	d1f6      	bne.n	8004140 <_printf_i+0x30>
 8004152:	6821      	ldr	r1, [r4, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	f011 0f80 	tst.w	r1, #128	; 0x80
 800415a:	d023      	beq.n	80041a4 <_printf_i+0x94>
 800415c:	1d11      	adds	r1, r2, #4
 800415e:	6019      	str	r1, [r3, #0]
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	e027      	b.n	80041b4 <_printf_i+0xa4>
 8004164:	2a73      	cmp	r2, #115	; 0x73
 8004166:	f000 80b4 	beq.w	80042d2 <_printf_i+0x1c2>
 800416a:	d808      	bhi.n	800417e <_printf_i+0x6e>
 800416c:	2a6f      	cmp	r2, #111	; 0x6f
 800416e:	d02a      	beq.n	80041c6 <_printf_i+0xb6>
 8004170:	2a70      	cmp	r2, #112	; 0x70
 8004172:	d1e5      	bne.n	8004140 <_printf_i+0x30>
 8004174:	680a      	ldr	r2, [r1, #0]
 8004176:	f042 0220 	orr.w	r2, r2, #32
 800417a:	600a      	str	r2, [r1, #0]
 800417c:	e003      	b.n	8004186 <_printf_i+0x76>
 800417e:	2a75      	cmp	r2, #117	; 0x75
 8004180:	d021      	beq.n	80041c6 <_printf_i+0xb6>
 8004182:	2a78      	cmp	r2, #120	; 0x78
 8004184:	d1dc      	bne.n	8004140 <_printf_i+0x30>
 8004186:	2278      	movs	r2, #120	; 0x78
 8004188:	496f      	ldr	r1, [pc, #444]	; (8004348 <_printf_i+0x238>)
 800418a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800418e:	e064      	b.n	800425a <_printf_i+0x14a>
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004196:	1d11      	adds	r1, r2, #4
 8004198:	6019      	str	r1, [r3, #0]
 800419a:	6813      	ldr	r3, [r2, #0]
 800419c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0a3      	b.n	80042ec <_printf_i+0x1dc>
 80041a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80041a8:	f102 0104 	add.w	r1, r2, #4
 80041ac:	6019      	str	r1, [r3, #0]
 80041ae:	d0d7      	beq.n	8004160 <_printf_i+0x50>
 80041b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da03      	bge.n	80041c0 <_printf_i+0xb0>
 80041b8:	222d      	movs	r2, #45	; 0x2d
 80041ba:	425b      	negs	r3, r3
 80041bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80041c0:	4962      	ldr	r1, [pc, #392]	; (800434c <_printf_i+0x23c>)
 80041c2:	220a      	movs	r2, #10
 80041c4:	e017      	b.n	80041f6 <_printf_i+0xe6>
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80041ce:	d003      	beq.n	80041d8 <_printf_i+0xc8>
 80041d0:	1d08      	adds	r0, r1, #4
 80041d2:	6018      	str	r0, [r3, #0]
 80041d4:	680b      	ldr	r3, [r1, #0]
 80041d6:	e006      	b.n	80041e6 <_printf_i+0xd6>
 80041d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041dc:	f101 0004 	add.w	r0, r1, #4
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	d0f7      	beq.n	80041d4 <_printf_i+0xc4>
 80041e4:	880b      	ldrh	r3, [r1, #0]
 80041e6:	2a6f      	cmp	r2, #111	; 0x6f
 80041e8:	bf14      	ite	ne
 80041ea:	220a      	movne	r2, #10
 80041ec:	2208      	moveq	r2, #8
 80041ee:	4957      	ldr	r1, [pc, #348]	; (800434c <_printf_i+0x23c>)
 80041f0:	2000      	movs	r0, #0
 80041f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80041f6:	6865      	ldr	r5, [r4, #4]
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	60a5      	str	r5, [r4, #8]
 80041fc:	f2c0 809c 	blt.w	8004338 <_printf_i+0x228>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	f020 0004 	bic.w	r0, r0, #4
 8004206:	6020      	str	r0, [r4, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d13f      	bne.n	800428c <_printf_i+0x17c>
 800420c:	2d00      	cmp	r5, #0
 800420e:	f040 8095 	bne.w	800433c <_printf_i+0x22c>
 8004212:	4675      	mov	r5, lr
 8004214:	2a08      	cmp	r2, #8
 8004216:	d10b      	bne.n	8004230 <_printf_i+0x120>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	07da      	lsls	r2, r3, #31
 800421c:	d508      	bpl.n	8004230 <_printf_i+0x120>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	6862      	ldr	r2, [r4, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	bfde      	ittt	le
 8004226:	2330      	movle	r3, #48	; 0x30
 8004228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800422c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004230:	ebae 0305 	sub.w	r3, lr, r5
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	f8cd 8000 	str.w	r8, [sp]
 800423a:	463b      	mov	r3, r7
 800423c:	aa03      	add	r2, sp, #12
 800423e:	4621      	mov	r1, r4
 8004240:	4630      	mov	r0, r6
 8004242:	f7ff feed 	bl	8004020 <_printf_common>
 8004246:	3001      	adds	r0, #1
 8004248:	d155      	bne.n	80042f6 <_printf_i+0x1e6>
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	b005      	add	sp, #20
 8004250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004254:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004258:	493c      	ldr	r1, [pc, #240]	; (800434c <_printf_i+0x23c>)
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004262:	f100 0504 	add.w	r5, r0, #4
 8004266:	601d      	str	r5, [r3, #0]
 8004268:	d001      	beq.n	800426e <_printf_i+0x15e>
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	e002      	b.n	8004274 <_printf_i+0x164>
 800426e:	0655      	lsls	r5, r2, #25
 8004270:	d5fb      	bpl.n	800426a <_printf_i+0x15a>
 8004272:	8803      	ldrh	r3, [r0, #0]
 8004274:	07d0      	lsls	r0, r2, #31
 8004276:	bf44      	itt	mi
 8004278:	f042 0220 	orrmi.w	r2, r2, #32
 800427c:	6022      	strmi	r2, [r4, #0]
 800427e:	b91b      	cbnz	r3, 8004288 <_printf_i+0x178>
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	f022 0220 	bic.w	r2, r2, #32
 8004286:	6022      	str	r2, [r4, #0]
 8004288:	2210      	movs	r2, #16
 800428a:	e7b1      	b.n	80041f0 <_printf_i+0xe0>
 800428c:	4675      	mov	r5, lr
 800428e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004292:	fb02 3310 	mls	r3, r2, r0, r3
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800429c:	4603      	mov	r3, r0
 800429e:	2800      	cmp	r0, #0
 80042a0:	d1f5      	bne.n	800428e <_printf_i+0x17e>
 80042a2:	e7b7      	b.n	8004214 <_printf_i+0x104>
 80042a4:	6808      	ldr	r0, [r1, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042ac:	6949      	ldr	r1, [r1, #20]
 80042ae:	d004      	beq.n	80042ba <_printf_i+0x1aa>
 80042b0:	1d10      	adds	r0, r2, #4
 80042b2:	6018      	str	r0, [r3, #0]
 80042b4:	6813      	ldr	r3, [r2, #0]
 80042b6:	6019      	str	r1, [r3, #0]
 80042b8:	e007      	b.n	80042ca <_printf_i+0x1ba>
 80042ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042be:	f102 0004 	add.w	r0, r2, #4
 80042c2:	6018      	str	r0, [r3, #0]
 80042c4:	6813      	ldr	r3, [r2, #0]
 80042c6:	d0f6      	beq.n	80042b6 <_printf_i+0x1a6>
 80042c8:	8019      	strh	r1, [r3, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	4675      	mov	r5, lr
 80042ce:	6123      	str	r3, [r4, #16]
 80042d0:	e7b1      	b.n	8004236 <_printf_i+0x126>
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	1d11      	adds	r1, r2, #4
 80042d6:	6019      	str	r1, [r3, #0]
 80042d8:	6815      	ldr	r5, [r2, #0]
 80042da:	2100      	movs	r1, #0
 80042dc:	6862      	ldr	r2, [r4, #4]
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 fa94 	bl	800480c <memchr>
 80042e4:	b108      	cbz	r0, 80042ea <_printf_i+0x1da>
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	6060      	str	r0, [r4, #4]
 80042ea:	6863      	ldr	r3, [r4, #4]
 80042ec:	6123      	str	r3, [r4, #16]
 80042ee:	2300      	movs	r3, #0
 80042f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f4:	e79f      	b.n	8004236 <_printf_i+0x126>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	462a      	mov	r2, r5
 80042fa:	4639      	mov	r1, r7
 80042fc:	4630      	mov	r0, r6
 80042fe:	47c0      	blx	r8
 8004300:	3001      	adds	r0, #1
 8004302:	d0a2      	beq.n	800424a <_printf_i+0x13a>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	079b      	lsls	r3, r3, #30
 8004308:	d507      	bpl.n	800431a <_printf_i+0x20a>
 800430a:	2500      	movs	r5, #0
 800430c:	f104 0919 	add.w	r9, r4, #25
 8004310:	68e3      	ldr	r3, [r4, #12]
 8004312:	9a03      	ldr	r2, [sp, #12]
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	429d      	cmp	r5, r3
 8004318:	db05      	blt.n	8004326 <_printf_i+0x216>
 800431a:	68e0      	ldr	r0, [r4, #12]
 800431c:	9b03      	ldr	r3, [sp, #12]
 800431e:	4298      	cmp	r0, r3
 8004320:	bfb8      	it	lt
 8004322:	4618      	movlt	r0, r3
 8004324:	e793      	b.n	800424e <_printf_i+0x13e>
 8004326:	2301      	movs	r3, #1
 8004328:	464a      	mov	r2, r9
 800432a:	4639      	mov	r1, r7
 800432c:	4630      	mov	r0, r6
 800432e:	47c0      	blx	r8
 8004330:	3001      	adds	r0, #1
 8004332:	d08a      	beq.n	800424a <_printf_i+0x13a>
 8004334:	3501      	adds	r5, #1
 8004336:	e7eb      	b.n	8004310 <_printf_i+0x200>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1a7      	bne.n	800428c <_printf_i+0x17c>
 800433c:	780b      	ldrb	r3, [r1, #0]
 800433e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004346:	e765      	b.n	8004214 <_printf_i+0x104>
 8004348:	08004ae2 	.word	0x08004ae2
 800434c:	08004ad1 	.word	0x08004ad1

08004350 <_sbrk_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	2300      	movs	r3, #0
 8004354:	4c05      	ldr	r4, [pc, #20]	; (800436c <_sbrk_r+0x1c>)
 8004356:	4605      	mov	r5, r0
 8004358:	4608      	mov	r0, r1
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	f000 fb0e 	bl	800497c <_sbrk>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_sbrk_r+0x1a>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	b103      	cbz	r3, 800436a <_sbrk_r+0x1a>
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	200009ec 	.word	0x200009ec

08004370 <__sread>:
 8004370:	b510      	push	{r4, lr}
 8004372:	460c      	mov	r4, r1
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	f000 faa4 	bl	80048c4 <_read_r>
 800437c:	2800      	cmp	r0, #0
 800437e:	bfab      	itete	ge
 8004380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004382:	89a3      	ldrhlt	r3, [r4, #12]
 8004384:	181b      	addge	r3, r3, r0
 8004386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800438a:	bfac      	ite	ge
 800438c:	6563      	strge	r3, [r4, #84]	; 0x54
 800438e:	81a3      	strhlt	r3, [r4, #12]
 8004390:	bd10      	pop	{r4, pc}

08004392 <__swrite>:
 8004392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	461f      	mov	r7, r3
 8004398:	898b      	ldrh	r3, [r1, #12]
 800439a:	4605      	mov	r5, r0
 800439c:	05db      	lsls	r3, r3, #23
 800439e:	460c      	mov	r4, r1
 80043a0:	4616      	mov	r6, r2
 80043a2:	d505      	bpl.n	80043b0 <__swrite+0x1e>
 80043a4:	2302      	movs	r3, #2
 80043a6:	2200      	movs	r2, #0
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	f000 f9b8 	bl	8004720 <_lseek_r>
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	4632      	mov	r2, r6
 80043b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b8:	81a3      	strh	r3, [r4, #12]
 80043ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043be:	463b      	mov	r3, r7
 80043c0:	4628      	mov	r0, r5
 80043c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	f000 b869 	b.w	800449c <_write_r>

080043ca <__sseek>:
 80043ca:	b510      	push	{r4, lr}
 80043cc:	460c      	mov	r4, r1
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 f9a5 	bl	8004720 <_lseek_r>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	bf15      	itete	ne
 80043dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043e6:	81a3      	strheq	r3, [r4, #12]
 80043e8:	bf18      	it	ne
 80043ea:	81a3      	strhne	r3, [r4, #12]
 80043ec:	bd10      	pop	{r4, pc}

080043ee <__sclose>:
 80043ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f2:	f000 b8d3 	b.w	800459c <_close_r>
	...

080043f8 <__swbuf_r>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	460e      	mov	r6, r1
 80043fc:	4614      	mov	r4, r2
 80043fe:	4605      	mov	r5, r0
 8004400:	b118      	cbz	r0, 800440a <__swbuf_r+0x12>
 8004402:	6983      	ldr	r3, [r0, #24]
 8004404:	b90b      	cbnz	r3, 800440a <__swbuf_r+0x12>
 8004406:	f7ff fbe5 	bl	8003bd4 <__sinit>
 800440a:	4b21      	ldr	r3, [pc, #132]	; (8004490 <__swbuf_r+0x98>)
 800440c:	429c      	cmp	r4, r3
 800440e:	d12a      	bne.n	8004466 <__swbuf_r+0x6e>
 8004410:	686c      	ldr	r4, [r5, #4]
 8004412:	69a3      	ldr	r3, [r4, #24]
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	89a3      	ldrh	r3, [r4, #12]
 8004418:	071a      	lsls	r2, r3, #28
 800441a:	d52e      	bpl.n	800447a <__swbuf_r+0x82>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	b363      	cbz	r3, 800447a <__swbuf_r+0x82>
 8004420:	6923      	ldr	r3, [r4, #16]
 8004422:	6820      	ldr	r0, [r4, #0]
 8004424:	b2f6      	uxtb	r6, r6
 8004426:	1ac0      	subs	r0, r0, r3
 8004428:	6963      	ldr	r3, [r4, #20]
 800442a:	4637      	mov	r7, r6
 800442c:	4298      	cmp	r0, r3
 800442e:	db04      	blt.n	800443a <__swbuf_r+0x42>
 8004430:	4621      	mov	r1, r4
 8004432:	4628      	mov	r0, r5
 8004434:	f000 f94a 	bl	80046cc <_fflush_r>
 8004438:	bb28      	cbnz	r0, 8004486 <__swbuf_r+0x8e>
 800443a:	68a3      	ldr	r3, [r4, #8]
 800443c:	3001      	adds	r0, #1
 800443e:	3b01      	subs	r3, #1
 8004440:	60a3      	str	r3, [r4, #8]
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	6022      	str	r2, [r4, #0]
 8004448:	701e      	strb	r6, [r3, #0]
 800444a:	6963      	ldr	r3, [r4, #20]
 800444c:	4298      	cmp	r0, r3
 800444e:	d004      	beq.n	800445a <__swbuf_r+0x62>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	07db      	lsls	r3, r3, #31
 8004454:	d519      	bpl.n	800448a <__swbuf_r+0x92>
 8004456:	2e0a      	cmp	r6, #10
 8004458:	d117      	bne.n	800448a <__swbuf_r+0x92>
 800445a:	4621      	mov	r1, r4
 800445c:	4628      	mov	r0, r5
 800445e:	f000 f935 	bl	80046cc <_fflush_r>
 8004462:	b190      	cbz	r0, 800448a <__swbuf_r+0x92>
 8004464:	e00f      	b.n	8004486 <__swbuf_r+0x8e>
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <__swbuf_r+0x9c>)
 8004468:	429c      	cmp	r4, r3
 800446a:	d101      	bne.n	8004470 <__swbuf_r+0x78>
 800446c:	68ac      	ldr	r4, [r5, #8]
 800446e:	e7d0      	b.n	8004412 <__swbuf_r+0x1a>
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <__swbuf_r+0xa0>)
 8004472:	429c      	cmp	r4, r3
 8004474:	bf08      	it	eq
 8004476:	68ec      	ldreq	r4, [r5, #12]
 8004478:	e7cb      	b.n	8004412 <__swbuf_r+0x1a>
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	f000 f81f 	bl	80044c0 <__swsetup_r>
 8004482:	2800      	cmp	r0, #0
 8004484:	d0cc      	beq.n	8004420 <__swbuf_r+0x28>
 8004486:	f04f 37ff 	mov.w	r7, #4294967295
 800448a:	4638      	mov	r0, r7
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	bf00      	nop
 8004490:	08004a7c 	.word	0x08004a7c
 8004494:	08004a9c 	.word	0x08004a9c
 8004498:	08004a5c 	.word	0x08004a5c

0800449c <_write_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	4605      	mov	r5, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	2200      	movs	r2, #0
 80044a6:	4c05      	ldr	r4, [pc, #20]	; (80044bc <_write_r+0x20>)
 80044a8:	6022      	str	r2, [r4, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fa74 	bl	8004998 <_write>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_write_r+0x1e>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_write_r+0x1e>
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	200009ec 	.word	0x200009ec

080044c0 <__swsetup_r>:
 80044c0:	4b32      	ldr	r3, [pc, #200]	; (800458c <__swsetup_r+0xcc>)
 80044c2:	b570      	push	{r4, r5, r6, lr}
 80044c4:	681d      	ldr	r5, [r3, #0]
 80044c6:	4606      	mov	r6, r0
 80044c8:	460c      	mov	r4, r1
 80044ca:	b125      	cbz	r5, 80044d6 <__swsetup_r+0x16>
 80044cc:	69ab      	ldr	r3, [r5, #24]
 80044ce:	b913      	cbnz	r3, 80044d6 <__swsetup_r+0x16>
 80044d0:	4628      	mov	r0, r5
 80044d2:	f7ff fb7f 	bl	8003bd4 <__sinit>
 80044d6:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <__swsetup_r+0xd0>)
 80044d8:	429c      	cmp	r4, r3
 80044da:	d10f      	bne.n	80044fc <__swsetup_r+0x3c>
 80044dc:	686c      	ldr	r4, [r5, #4]
 80044de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	0715      	lsls	r5, r2, #28
 80044e6:	d42c      	bmi.n	8004542 <__swsetup_r+0x82>
 80044e8:	06d0      	lsls	r0, r2, #27
 80044ea:	d411      	bmi.n	8004510 <__swsetup_r+0x50>
 80044ec:	2209      	movs	r2, #9
 80044ee:	6032      	str	r2, [r6, #0]
 80044f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	f04f 30ff 	mov.w	r0, #4294967295
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	4b25      	ldr	r3, [pc, #148]	; (8004594 <__swsetup_r+0xd4>)
 80044fe:	429c      	cmp	r4, r3
 8004500:	d101      	bne.n	8004506 <__swsetup_r+0x46>
 8004502:	68ac      	ldr	r4, [r5, #8]
 8004504:	e7eb      	b.n	80044de <__swsetup_r+0x1e>
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <__swsetup_r+0xd8>)
 8004508:	429c      	cmp	r4, r3
 800450a:	bf08      	it	eq
 800450c:	68ec      	ldreq	r4, [r5, #12]
 800450e:	e7e6      	b.n	80044de <__swsetup_r+0x1e>
 8004510:	0751      	lsls	r1, r2, #29
 8004512:	d512      	bpl.n	800453a <__swsetup_r+0x7a>
 8004514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004516:	b141      	cbz	r1, 800452a <__swsetup_r+0x6a>
 8004518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800451c:	4299      	cmp	r1, r3
 800451e:	d002      	beq.n	8004526 <__swsetup_r+0x66>
 8004520:	4630      	mov	r0, r6
 8004522:	f000 f983 	bl	800482c <_free_r>
 8004526:	2300      	movs	r3, #0
 8004528:	6363      	str	r3, [r4, #52]	; 0x34
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	2300      	movs	r3, #0
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	81a3      	strh	r3, [r4, #12]
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	b94b      	cbnz	r3, 800455a <__swsetup_r+0x9a>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d003      	beq.n	800455a <__swsetup_r+0x9a>
 8004552:	4621      	mov	r1, r4
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f919 	bl	800478c <__smakebuf_r>
 800455a:	89a2      	ldrh	r2, [r4, #12]
 800455c:	f012 0301 	ands.w	r3, r2, #1
 8004560:	d00c      	beq.n	800457c <__swsetup_r+0xbc>
 8004562:	2300      	movs	r3, #0
 8004564:	60a3      	str	r3, [r4, #8]
 8004566:	6963      	ldr	r3, [r4, #20]
 8004568:	425b      	negs	r3, r3
 800456a:	61a3      	str	r3, [r4, #24]
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	b953      	cbnz	r3, 8004586 <__swsetup_r+0xc6>
 8004570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004574:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004578:	d1ba      	bne.n	80044f0 <__swsetup_r+0x30>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	0792      	lsls	r2, r2, #30
 800457e:	bf58      	it	pl
 8004580:	6963      	ldrpl	r3, [r4, #20]
 8004582:	60a3      	str	r3, [r4, #8]
 8004584:	e7f2      	b.n	800456c <__swsetup_r+0xac>
 8004586:	2000      	movs	r0, #0
 8004588:	e7f7      	b.n	800457a <__swsetup_r+0xba>
 800458a:	bf00      	nop
 800458c:	20000004 	.word	0x20000004
 8004590:	08004a7c 	.word	0x08004a7c
 8004594:	08004a9c 	.word	0x08004a9c
 8004598:	08004a5c 	.word	0x08004a5c

0800459c <_close_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	2300      	movs	r3, #0
 80045a0:	4c05      	ldr	r4, [pc, #20]	; (80045b8 <_close_r+0x1c>)
 80045a2:	4605      	mov	r5, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	f000 f9c0 	bl	800492c <_close>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_close_r+0x1a>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_close_r+0x1a>
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	200009ec 	.word	0x200009ec

080045bc <__sflush_r>:
 80045bc:	898a      	ldrh	r2, [r1, #12]
 80045be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c2:	4605      	mov	r5, r0
 80045c4:	0710      	lsls	r0, r2, #28
 80045c6:	460c      	mov	r4, r1
 80045c8:	d45a      	bmi.n	8004680 <__sflush_r+0xc4>
 80045ca:	684b      	ldr	r3, [r1, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dc05      	bgt.n	80045dc <__sflush_r+0x20>
 80045d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	dc02      	bgt.n	80045dc <__sflush_r+0x20>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045de:	2e00      	cmp	r6, #0
 80045e0:	d0f9      	beq.n	80045d6 <__sflush_r+0x1a>
 80045e2:	2300      	movs	r3, #0
 80045e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045e8:	682f      	ldr	r7, [r5, #0]
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	d033      	beq.n	8004656 <__sflush_r+0x9a>
 80045ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	075a      	lsls	r2, r3, #29
 80045f4:	d505      	bpl.n	8004602 <__sflush_r+0x46>
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	1ac0      	subs	r0, r0, r3
 80045fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045fc:	b10b      	cbz	r3, 8004602 <__sflush_r+0x46>
 80045fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004600:	1ac0      	subs	r0, r0, r3
 8004602:	2300      	movs	r3, #0
 8004604:	4602      	mov	r2, r0
 8004606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004608:	6a21      	ldr	r1, [r4, #32]
 800460a:	4628      	mov	r0, r5
 800460c:	47b0      	blx	r6
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	d106      	bne.n	8004622 <__sflush_r+0x66>
 8004614:	6829      	ldr	r1, [r5, #0]
 8004616:	291d      	cmp	r1, #29
 8004618:	d84b      	bhi.n	80046b2 <__sflush_r+0xf6>
 800461a:	4a2b      	ldr	r2, [pc, #172]	; (80046c8 <__sflush_r+0x10c>)
 800461c:	40ca      	lsrs	r2, r1
 800461e:	07d6      	lsls	r6, r2, #31
 8004620:	d547      	bpl.n	80046b2 <__sflush_r+0xf6>
 8004622:	2200      	movs	r2, #0
 8004624:	6062      	str	r2, [r4, #4]
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	04d9      	lsls	r1, r3, #19
 800462a:	6022      	str	r2, [r4, #0]
 800462c:	d504      	bpl.n	8004638 <__sflush_r+0x7c>
 800462e:	1c42      	adds	r2, r0, #1
 8004630:	d101      	bne.n	8004636 <__sflush_r+0x7a>
 8004632:	682b      	ldr	r3, [r5, #0]
 8004634:	b903      	cbnz	r3, 8004638 <__sflush_r+0x7c>
 8004636:	6560      	str	r0, [r4, #84]	; 0x54
 8004638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800463a:	602f      	str	r7, [r5, #0]
 800463c:	2900      	cmp	r1, #0
 800463e:	d0ca      	beq.n	80045d6 <__sflush_r+0x1a>
 8004640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004644:	4299      	cmp	r1, r3
 8004646:	d002      	beq.n	800464e <__sflush_r+0x92>
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f8ef 	bl	800482c <_free_r>
 800464e:	2000      	movs	r0, #0
 8004650:	6360      	str	r0, [r4, #52]	; 0x34
 8004652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004656:	6a21      	ldr	r1, [r4, #32]
 8004658:	2301      	movs	r3, #1
 800465a:	4628      	mov	r0, r5
 800465c:	47b0      	blx	r6
 800465e:	1c41      	adds	r1, r0, #1
 8004660:	d1c6      	bne.n	80045f0 <__sflush_r+0x34>
 8004662:	682b      	ldr	r3, [r5, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0c3      	beq.n	80045f0 <__sflush_r+0x34>
 8004668:	2b1d      	cmp	r3, #29
 800466a:	d001      	beq.n	8004670 <__sflush_r+0xb4>
 800466c:	2b16      	cmp	r3, #22
 800466e:	d101      	bne.n	8004674 <__sflush_r+0xb8>
 8004670:	602f      	str	r7, [r5, #0]
 8004672:	e7b0      	b.n	80045d6 <__sflush_r+0x1a>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004680:	690f      	ldr	r7, [r1, #16]
 8004682:	2f00      	cmp	r7, #0
 8004684:	d0a7      	beq.n	80045d6 <__sflush_r+0x1a>
 8004686:	0793      	lsls	r3, r2, #30
 8004688:	bf18      	it	ne
 800468a:	2300      	movne	r3, #0
 800468c:	680e      	ldr	r6, [r1, #0]
 800468e:	bf08      	it	eq
 8004690:	694b      	ldreq	r3, [r1, #20]
 8004692:	eba6 0807 	sub.w	r8, r6, r7
 8004696:	600f      	str	r7, [r1, #0]
 8004698:	608b      	str	r3, [r1, #8]
 800469a:	f1b8 0f00 	cmp.w	r8, #0
 800469e:	dd9a      	ble.n	80045d6 <__sflush_r+0x1a>
 80046a0:	4643      	mov	r3, r8
 80046a2:	463a      	mov	r2, r7
 80046a4:	6a21      	ldr	r1, [r4, #32]
 80046a6:	4628      	mov	r0, r5
 80046a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046aa:	47b0      	blx	r6
 80046ac:	2800      	cmp	r0, #0
 80046ae:	dc07      	bgt.n	80046c0 <__sflush_r+0x104>
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	4407      	add	r7, r0
 80046c2:	eba8 0800 	sub.w	r8, r8, r0
 80046c6:	e7e8      	b.n	800469a <__sflush_r+0xde>
 80046c8:	20400001 	.word	0x20400001

080046cc <_fflush_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	4605      	mov	r5, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	b1db      	cbz	r3, 800470e <_fflush_r+0x42>
 80046d6:	b118      	cbz	r0, 80046e0 <_fflush_r+0x14>
 80046d8:	6983      	ldr	r3, [r0, #24]
 80046da:	b90b      	cbnz	r3, 80046e0 <_fflush_r+0x14>
 80046dc:	f7ff fa7a 	bl	8003bd4 <__sinit>
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <_fflush_r+0x48>)
 80046e2:	429c      	cmp	r4, r3
 80046e4:	d109      	bne.n	80046fa <_fflush_r+0x2e>
 80046e6:	686c      	ldr	r4, [r5, #4]
 80046e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ec:	b17b      	cbz	r3, 800470e <_fflush_r+0x42>
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f6:	f7ff bf61 	b.w	80045bc <__sflush_r>
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <_fflush_r+0x4c>)
 80046fc:	429c      	cmp	r4, r3
 80046fe:	d101      	bne.n	8004704 <_fflush_r+0x38>
 8004700:	68ac      	ldr	r4, [r5, #8]
 8004702:	e7f1      	b.n	80046e8 <_fflush_r+0x1c>
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <_fflush_r+0x50>)
 8004706:	429c      	cmp	r4, r3
 8004708:	bf08      	it	eq
 800470a:	68ec      	ldreq	r4, [r5, #12]
 800470c:	e7ec      	b.n	80046e8 <_fflush_r+0x1c>
 800470e:	2000      	movs	r0, #0
 8004710:	bd38      	pop	{r3, r4, r5, pc}
 8004712:	bf00      	nop
 8004714:	08004a7c 	.word	0x08004a7c
 8004718:	08004a9c 	.word	0x08004a9c
 800471c:	08004a5c 	.word	0x08004a5c

08004720 <_lseek_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4605      	mov	r5, r0
 8004724:	4608      	mov	r0, r1
 8004726:	4611      	mov	r1, r2
 8004728:	2200      	movs	r2, #0
 800472a:	4c05      	ldr	r4, [pc, #20]	; (8004740 <_lseek_r+0x20>)
 800472c:	6022      	str	r2, [r4, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	f000 f914 	bl	800495c <_lseek>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_lseek_r+0x1e>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b103      	cbz	r3, 800473e <_lseek_r+0x1e>
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	200009ec 	.word	0x200009ec

08004744 <__swhatbuf_r>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	460e      	mov	r6, r1
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	b090      	sub	sp, #64	; 0x40
 800474e:	2900      	cmp	r1, #0
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	da07      	bge.n	8004766 <__swhatbuf_r+0x22>
 8004756:	2300      	movs	r3, #0
 8004758:	602b      	str	r3, [r5, #0]
 800475a:	89b3      	ldrh	r3, [r6, #12]
 800475c:	061a      	lsls	r2, r3, #24
 800475e:	d410      	bmi.n	8004782 <__swhatbuf_r+0x3e>
 8004760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004764:	e00e      	b.n	8004784 <__swhatbuf_r+0x40>
 8004766:	aa01      	add	r2, sp, #4
 8004768:	f000 f8be 	bl	80048e8 <_fstat_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	dbf2      	blt.n	8004756 <__swhatbuf_r+0x12>
 8004770:	9a02      	ldr	r2, [sp, #8]
 8004772:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004776:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800477a:	425a      	negs	r2, r3
 800477c:	415a      	adcs	r2, r3
 800477e:	602a      	str	r2, [r5, #0]
 8004780:	e7ee      	b.n	8004760 <__swhatbuf_r+0x1c>
 8004782:	2340      	movs	r3, #64	; 0x40
 8004784:	2000      	movs	r0, #0
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	b010      	add	sp, #64	; 0x40
 800478a:	bd70      	pop	{r4, r5, r6, pc}

0800478c <__smakebuf_r>:
 800478c:	898b      	ldrh	r3, [r1, #12]
 800478e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004790:	079d      	lsls	r5, r3, #30
 8004792:	4606      	mov	r6, r0
 8004794:	460c      	mov	r4, r1
 8004796:	d507      	bpl.n	80047a8 <__smakebuf_r+0x1c>
 8004798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	2301      	movs	r3, #1
 80047a2:	6163      	str	r3, [r4, #20]
 80047a4:	b002      	add	sp, #8
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	ab01      	add	r3, sp, #4
 80047aa:	466a      	mov	r2, sp
 80047ac:	f7ff ffca 	bl	8004744 <__swhatbuf_r>
 80047b0:	9900      	ldr	r1, [sp, #0]
 80047b2:	4605      	mov	r5, r0
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7ff fa97 	bl	8003ce8 <_malloc_r>
 80047ba:	b948      	cbnz	r0, 80047d0 <__smakebuf_r+0x44>
 80047bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c0:	059a      	lsls	r2, r3, #22
 80047c2:	d4ef      	bmi.n	80047a4 <__smakebuf_r+0x18>
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	e7e3      	b.n	8004798 <__smakebuf_r+0xc>
 80047d0:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <__smakebuf_r+0x7c>)
 80047d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	6020      	str	r0, [r4, #0]
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	6120      	str	r0, [r4, #16]
 80047e2:	6163      	str	r3, [r4, #20]
 80047e4:	9b01      	ldr	r3, [sp, #4]
 80047e6:	b15b      	cbz	r3, 8004800 <__smakebuf_r+0x74>
 80047e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 f88d 	bl	800490c <_isatty_r>
 80047f2:	b128      	cbz	r0, 8004800 <__smakebuf_r+0x74>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	431d      	orrs	r5, r3
 8004804:	81a5      	strh	r5, [r4, #12]
 8004806:	e7cd      	b.n	80047a4 <__smakebuf_r+0x18>
 8004808:	08003b55 	.word	0x08003b55

0800480c <memchr>:
 800480c:	b510      	push	{r4, lr}
 800480e:	b2c9      	uxtb	r1, r1
 8004810:	4402      	add	r2, r0
 8004812:	4290      	cmp	r0, r2
 8004814:	4603      	mov	r3, r0
 8004816:	d101      	bne.n	800481c <memchr+0x10>
 8004818:	2000      	movs	r0, #0
 800481a:	bd10      	pop	{r4, pc}
 800481c:	781c      	ldrb	r4, [r3, #0]
 800481e:	3001      	adds	r0, #1
 8004820:	428c      	cmp	r4, r1
 8004822:	d1f6      	bne.n	8004812 <memchr+0x6>
 8004824:	4618      	mov	r0, r3
 8004826:	bd10      	pop	{r4, pc}

08004828 <__malloc_lock>:
 8004828:	4770      	bx	lr

0800482a <__malloc_unlock>:
 800482a:	4770      	bx	lr

0800482c <_free_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4605      	mov	r5, r0
 8004830:	2900      	cmp	r1, #0
 8004832:	d043      	beq.n	80048bc <_free_r+0x90>
 8004834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004838:	1f0c      	subs	r4, r1, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	bfb8      	it	lt
 800483e:	18e4      	addlt	r4, r4, r3
 8004840:	f7ff fff2 	bl	8004828 <__malloc_lock>
 8004844:	4a1e      	ldr	r2, [pc, #120]	; (80048c0 <_free_r+0x94>)
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	4610      	mov	r0, r2
 800484a:	b933      	cbnz	r3, 800485a <_free_r+0x2e>
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	6014      	str	r4, [r2, #0]
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004856:	f7ff bfe8 	b.w	800482a <__malloc_unlock>
 800485a:	42a3      	cmp	r3, r4
 800485c:	d90b      	bls.n	8004876 <_free_r+0x4a>
 800485e:	6821      	ldr	r1, [r4, #0]
 8004860:	1862      	adds	r2, r4, r1
 8004862:	4293      	cmp	r3, r2
 8004864:	bf01      	itttt	eq
 8004866:	681a      	ldreq	r2, [r3, #0]
 8004868:	685b      	ldreq	r3, [r3, #4]
 800486a:	1852      	addeq	r2, r2, r1
 800486c:	6022      	streq	r2, [r4, #0]
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	6004      	str	r4, [r0, #0]
 8004872:	e7ed      	b.n	8004850 <_free_r+0x24>
 8004874:	4613      	mov	r3, r2
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	b10a      	cbz	r2, 800487e <_free_r+0x52>
 800487a:	42a2      	cmp	r2, r4
 800487c:	d9fa      	bls.n	8004874 <_free_r+0x48>
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	1858      	adds	r0, r3, r1
 8004882:	42a0      	cmp	r0, r4
 8004884:	d10b      	bne.n	800489e <_free_r+0x72>
 8004886:	6820      	ldr	r0, [r4, #0]
 8004888:	4401      	add	r1, r0
 800488a:	1858      	adds	r0, r3, r1
 800488c:	4282      	cmp	r2, r0
 800488e:	6019      	str	r1, [r3, #0]
 8004890:	d1de      	bne.n	8004850 <_free_r+0x24>
 8004892:	6810      	ldr	r0, [r2, #0]
 8004894:	6852      	ldr	r2, [r2, #4]
 8004896:	4401      	add	r1, r0
 8004898:	6019      	str	r1, [r3, #0]
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	e7d8      	b.n	8004850 <_free_r+0x24>
 800489e:	d902      	bls.n	80048a6 <_free_r+0x7a>
 80048a0:	230c      	movs	r3, #12
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	e7d4      	b.n	8004850 <_free_r+0x24>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	1821      	adds	r1, r4, r0
 80048aa:	428a      	cmp	r2, r1
 80048ac:	bf01      	itttt	eq
 80048ae:	6811      	ldreq	r1, [r2, #0]
 80048b0:	6852      	ldreq	r2, [r2, #4]
 80048b2:	1809      	addeq	r1, r1, r0
 80048b4:	6021      	streq	r1, [r4, #0]
 80048b6:	6062      	str	r2, [r4, #4]
 80048b8:	605c      	str	r4, [r3, #4]
 80048ba:	e7c9      	b.n	8004850 <_free_r+0x24>
 80048bc:	bd38      	pop	{r3, r4, r5, pc}
 80048be:	bf00      	nop
 80048c0:	20000168 	.word	0x20000168

080048c4 <_read_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4605      	mov	r5, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	2200      	movs	r2, #0
 80048ce:	4c05      	ldr	r4, [pc, #20]	; (80048e4 <_read_r+0x20>)
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 f84a 	bl	800496c <_read>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_read_r+0x1e>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_read_r+0x1e>
 80048e0:	602b      	str	r3, [r5, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200009ec 	.word	0x200009ec

080048e8 <_fstat_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	2300      	movs	r3, #0
 80048ec:	4c06      	ldr	r4, [pc, #24]	; (8004908 <_fstat_r+0x20>)
 80048ee:	4605      	mov	r5, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	f000 f821 	bl	800493c <_fstat>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d102      	bne.n	8004904 <_fstat_r+0x1c>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	b103      	cbz	r3, 8004904 <_fstat_r+0x1c>
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	200009ec 	.word	0x200009ec

0800490c <_isatty_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	2300      	movs	r3, #0
 8004910:	4c05      	ldr	r4, [pc, #20]	; (8004928 <_isatty_r+0x1c>)
 8004912:	4605      	mov	r5, r0
 8004914:	4608      	mov	r0, r1
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	f000 f818 	bl	800494c <_isatty>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_isatty_r+0x1a>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	b103      	cbz	r3, 8004926 <_isatty_r+0x1a>
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	200009ec 	.word	0x200009ec

0800492c <_close>:
 800492c:	2258      	movs	r2, #88	; 0x58
 800492e:	4b02      	ldr	r3, [pc, #8]	; (8004938 <_close+0xc>)
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	4770      	bx	lr
 8004938:	200009ec 	.word	0x200009ec

0800493c <_fstat>:
 800493c:	2258      	movs	r2, #88	; 0x58
 800493e:	4b02      	ldr	r3, [pc, #8]	; (8004948 <_fstat+0xc>)
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	4770      	bx	lr
 8004948:	200009ec 	.word	0x200009ec

0800494c <_isatty>:
 800494c:	2258      	movs	r2, #88	; 0x58
 800494e:	4b02      	ldr	r3, [pc, #8]	; (8004958 <_isatty+0xc>)
 8004950:	2000      	movs	r0, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	200009ec 	.word	0x200009ec

0800495c <_lseek>:
 800495c:	2258      	movs	r2, #88	; 0x58
 800495e:	4b02      	ldr	r3, [pc, #8]	; (8004968 <_lseek+0xc>)
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	4770      	bx	lr
 8004968:	200009ec 	.word	0x200009ec

0800496c <_read>:
 800496c:	2258      	movs	r2, #88	; 0x58
 800496e:	4b02      	ldr	r3, [pc, #8]	; (8004978 <_read+0xc>)
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	4770      	bx	lr
 8004978:	200009ec 	.word	0x200009ec

0800497c <_sbrk>:
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <_sbrk+0x14>)
 800497e:	4602      	mov	r2, r0
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	b909      	cbnz	r1, 8004988 <_sbrk+0xc>
 8004984:	4903      	ldr	r1, [pc, #12]	; (8004994 <_sbrk+0x18>)
 8004986:	6019      	str	r1, [r3, #0]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	4402      	add	r2, r0
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4770      	bx	lr
 8004990:	20000170 	.word	0x20000170
 8004994:	200009f0 	.word	0x200009f0

08004998 <_write>:
 8004998:	2258      	movs	r2, #88	; 0x58
 800499a:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <_write+0xc>)
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	4770      	bx	lr
 80049a4:	200009ec 	.word	0x200009ec

080049a8 <_init>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	bf00      	nop
 80049ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ae:	bc08      	pop	{r3}
 80049b0:	469e      	mov	lr, r3
 80049b2:	4770      	bx	lr

080049b4 <_fini>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr
