
E:\A\xf\Code\GitHub\mcu_code\TinyRtu.c\tinyRtu\Debug\tinyRtu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001490  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001674  08001674  00011674  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016c0  080016c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080016c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000004  080016c8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000a00  20000038  080016c8  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e996  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002544  00000000  00000000  0002e9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000293c  00000000  00000000  00030f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000580  00000000  00000000  00033848  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000840  00000000  00000000  00033dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000043ce  00000000  00000000  00034608  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002233  00000000  00000000  000389d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ac09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c60  00000000  00000000  0003ac88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000004 	.word	0x20000004
 8000200:	00000000 	.word	0x00000000
 8000204:	0800165c 	.word	0x0800165c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000008 	.word	0x20000008
 8000220:	0800165c 	.word	0x0800165c

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000228:	f000 fd0c 	bl	8000c44 <HAL_RCC_GetHCLKFreq>
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb0 f0f3 	udiv	r0, r0, r3
 8000234:	f000 f888 	bl	8000348 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000238:	2200      	movs	r2, #0
 800023a:	4621      	mov	r1, r4
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f000 f842 	bl	80002c8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000244:	2000      	movs	r0, #0
 8000246:	bd10      	pop	{r4, pc}

08000248 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <HAL_Init+0x20>)
{
 800024a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800024e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000256:	f000 f825 	bl	80002a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800025a:	2000      	movs	r0, #0
 800025c:	f7ff ffe2 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000260:	f001 f930 	bl	80014c4 <HAL_MspInit>
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd08      	pop	{r3, pc}
 8000268:	40022000 	.word	0x40022000

0800026c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800026c:	4a02      	ldr	r2, [pc, #8]	; (8000278 <HAL_IncTick+0xc>)
 800026e:	6813      	ldr	r3, [r2, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000020 	.word	0x20000020

0800027c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800027c:	4b01      	ldr	r3, [pc, #4]	; (8000284 <HAL_GetTick+0x8>)
 800027e:	6818      	ldr	r0, [r3, #0]
}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000288:	b513      	push	{r0, r1, r4, lr}
 800028a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800028c:	f7ff fff6 	bl	800027c <HAL_GetTick>
 8000290:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000292:	f7ff fff3 	bl	800027c <HAL_GetTick>
 8000296:	9b01      	ldr	r3, [sp, #4]
 8000298:	1b00      	subs	r0, r0, r4
 800029a:	4298      	cmp	r0, r3
 800029c:	d3f9      	bcc.n	8000292 <HAL_Delay+0xa>
  {
  }
}
 800029e:	b002      	add	sp, #8
 80002a0:	bd10      	pop	{r4, pc}
	...

080002a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002a6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002b2:	041b      	lsls	r3, r3, #16
 80002b4:	0c1b      	lsrs	r3, r3, #16
 80002b6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002c0:	60d3      	str	r3, [r2, #12]
 80002c2:	4770      	bx	lr
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002ca:	b530      	push	{r4, r5, lr}
 80002cc:	68dc      	ldr	r4, [r3, #12]
 80002ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d8:	2b04      	cmp	r3, #4
 80002da:	bf28      	it	cs
 80002dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e4:	bf98      	it	ls
 80002e6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e8:	fa05 f303 	lsl.w	r3, r5, r3
 80002ec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f0:	bf88      	it	hi
 80002f2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	4019      	ands	r1, r3
 80002f6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002f8:	fa05 f404 	lsl.w	r4, r5, r4
 80002fc:	3c01      	subs	r4, #1
 80002fe:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000300:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000302:	ea42 0201 	orr.w	r2, r2, r1
 8000306:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	bfaf      	iteee	ge
 800030c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	4b06      	ldrlt	r3, [pc, #24]	; (800032c <HAL_NVIC_SetPriority+0x64>)
 8000312:	f000 000f 	andlt.w	r0, r0, #15
 8000316:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	bfa5      	ittet	ge
 800031a:	b2d2      	uxtbge	r2, r2
 800031c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000320:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000326:	bd30      	pop	{r4, r5, pc}
 8000328:	e000ed00 	.word	0xe000ed00
 800032c:	e000ed14 	.word	0xe000ed14

08000330 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000330:	2301      	movs	r3, #1
 8000332:	0942      	lsrs	r2, r0, #5
 8000334:	f000 001f 	and.w	r0, r0, #31
 8000338:	fa03 f000 	lsl.w	r0, r3, r0
 800033c:	4b01      	ldr	r3, [pc, #4]	; (8000344 <HAL_NVIC_EnableIRQ+0x14>)
 800033e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100

08000348 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000348:	3801      	subs	r0, #1
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d20a      	bcs.n	8000366 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000356:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000360:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000366:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000376:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	bf0c      	ite	eq
 800037c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000380:	f022 0204 	bicne.w	r2, r2, #4
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	4770      	bx	lr
 8000388:	e000e010 	.word	0xe000e010

0800038c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800038c:	4770      	bx	lr

0800038e <HAL_SYSTICK_IRQHandler>:
{
 800038e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000390:	f7ff fffc 	bl	800038c <HAL_SYSTICK_Callback>
 8000394:	bd08      	pop	{r3, pc}
	...

08000398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 800039c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800039e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003a0:	4f6c      	ldr	r7, [pc, #432]	; (8000554 <HAL_GPIO_Init+0x1bc>)
 80003a2:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003a4:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000560 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80003a8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000564 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 80003ac:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b0:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80003b2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003b6:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003ba:	45a0      	cmp	r8, r4
 80003bc:	f040 8085 	bne.w	80004ca <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80003c0:	684d      	ldr	r5, [r1, #4]
 80003c2:	2d12      	cmp	r5, #18
 80003c4:	f000 80b7 	beq.w	8000536 <HAL_GPIO_Init+0x19e>
 80003c8:	f200 808d 	bhi.w	80004e6 <HAL_GPIO_Init+0x14e>
 80003cc:	2d02      	cmp	r5, #2
 80003ce:	f000 80af 	beq.w	8000530 <HAL_GPIO_Init+0x198>
 80003d2:	f200 8081 	bhi.w	80004d8 <HAL_GPIO_Init+0x140>
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	f000 8091 	beq.w	80004fe <HAL_GPIO_Init+0x166>
 80003dc:	2d01      	cmp	r5, #1
 80003de:	f000 80a5 	beq.w	800052c <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003e2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e6:	2cff      	cmp	r4, #255	; 0xff
 80003e8:	bf93      	iteet	ls
 80003ea:	4682      	movls	sl, r0
 80003ec:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003f0:	3d08      	subhi	r5, #8
 80003f2:	f8d0 b000 	ldrls.w	fp, [r0]
 80003f6:	bf92      	itee	ls
 80003f8:	00b5      	lslls	r5, r6, #2
 80003fa:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003fe:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000400:	fa09 f805 	lsl.w	r8, r9, r5
 8000404:	ea2b 0808 	bic.w	r8, fp, r8
 8000408:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800040c:	bf88      	it	hi
 800040e:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000412:	ea48 0505 	orr.w	r5, r8, r5
 8000416:	f8ca 5000 	str.w	r5, [sl]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800041a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800041e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000422:	d052      	beq.n	80004ca <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000424:	69bd      	ldr	r5, [r7, #24]
 8000426:	f026 0803 	bic.w	r8, r6, #3
 800042a:	f045 0501 	orr.w	r5, r5, #1
 800042e:	61bd      	str	r5, [r7, #24]
 8000430:	69bd      	ldr	r5, [r7, #24]
 8000432:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000436:	f005 0501 	and.w	r5, r5, #1
 800043a:	9501      	str	r5, [sp, #4]
 800043c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000440:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000444:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000446:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 800044a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800044e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000452:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000456:	4d41      	ldr	r5, [pc, #260]	; (800055c <HAL_GPIO_Init+0x1c4>)
 8000458:	42a8      	cmp	r0, r5
 800045a:	d071      	beq.n	8000540 <HAL_GPIO_Init+0x1a8>
 800045c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000460:	42a8      	cmp	r0, r5
 8000462:	d06f      	beq.n	8000544 <HAL_GPIO_Init+0x1ac>
 8000464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000468:	42a8      	cmp	r0, r5
 800046a:	d06d      	beq.n	8000548 <HAL_GPIO_Init+0x1b0>
 800046c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000470:	42a8      	cmp	r0, r5
 8000472:	d06b      	beq.n	800054c <HAL_GPIO_Init+0x1b4>
 8000474:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000478:	42a8      	cmp	r0, r5
 800047a:	d069      	beq.n	8000550 <HAL_GPIO_Init+0x1b8>
 800047c:	4570      	cmp	r0, lr
 800047e:	bf0c      	ite	eq
 8000480:	2505      	moveq	r5, #5
 8000482:	2506      	movne	r5, #6
 8000484:	fa05 f50b 	lsl.w	r5, r5, fp
 8000488:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 800048c:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000490:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000492:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000496:	bf14      	ite	ne
 8000498:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800049a:	43a5      	biceq	r5, r4
 800049c:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800049e:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004a0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80004a4:	bf14      	ite	ne
 80004a6:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80004a8:	43a5      	biceq	r5, r4
 80004aa:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004ac:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ae:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004b2:	bf14      	ite	ne
 80004b4:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80004b6:	43a5      	biceq	r5, r4
 80004b8:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004ba:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004bc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004c0:	bf14      	ite	ne
 80004c2:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80004c4:	ea25 0404 	biceq.w	r4, r5, r4
 80004c8:	60dc      	str	r4, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80004ca:	3601      	adds	r6, #1
 80004cc:	2e10      	cmp	r6, #16
 80004ce:	f47f af6d 	bne.w	80003ac <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80004d2:	b003      	add	sp, #12
 80004d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004d8:	2d03      	cmp	r5, #3
 80004da:	d025      	beq.n	8000528 <HAL_GPIO_Init+0x190>
 80004dc:	2d11      	cmp	r5, #17
 80004de:	d180      	bne.n	80003e2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004e0:	68ca      	ldr	r2, [r1, #12]
 80004e2:	3204      	adds	r2, #4
          break;
 80004e4:	e77d      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80004e6:	4565      	cmp	r5, ip
 80004e8:	d009      	beq.n	80004fe <HAL_GPIO_Init+0x166>
 80004ea:	d812      	bhi.n	8000512 <HAL_GPIO_Init+0x17a>
 80004ec:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000568 <HAL_GPIO_Init+0x1d0>
 80004f0:	454d      	cmp	r5, r9
 80004f2:	d004      	beq.n	80004fe <HAL_GPIO_Init+0x166>
 80004f4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004f8:	454d      	cmp	r5, r9
 80004fa:	f47f af72 	bne.w	80003e2 <HAL_GPIO_Init+0x4a>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80004fe:	688a      	ldr	r2, [r1, #8]
 8000500:	b1e2      	cbz	r2, 800053c <HAL_GPIO_Init+0x1a4>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000502:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000504:	bf0c      	ite	eq
 8000506:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800050a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800050e:	2208      	movs	r2, #8
 8000510:	e767      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000512:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800056c <HAL_GPIO_Init+0x1d4>
 8000516:	454d      	cmp	r5, r9
 8000518:	d0f1      	beq.n	80004fe <HAL_GPIO_Init+0x166>
 800051a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800051e:	454d      	cmp	r5, r9
 8000520:	d0ed      	beq.n	80004fe <HAL_GPIO_Init+0x166>
 8000522:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000526:	e7e7      	b.n	80004f8 <HAL_GPIO_Init+0x160>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000528:	2200      	movs	r2, #0
 800052a:	e75a      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800052c:	68ca      	ldr	r2, [r1, #12]
          break;
 800052e:	e758      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000530:	68ca      	ldr	r2, [r1, #12]
 8000532:	3208      	adds	r2, #8
          break;
 8000534:	e755      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000536:	68ca      	ldr	r2, [r1, #12]
 8000538:	320c      	adds	r2, #12
          break;
 800053a:	e752      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800053c:	2204      	movs	r2, #4
 800053e:	e750      	b.n	80003e2 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000540:	2500      	movs	r5, #0
 8000542:	e79f      	b.n	8000484 <HAL_GPIO_Init+0xec>
 8000544:	2501      	movs	r5, #1
 8000546:	e79d      	b.n	8000484 <HAL_GPIO_Init+0xec>
 8000548:	2502      	movs	r5, #2
 800054a:	e79b      	b.n	8000484 <HAL_GPIO_Init+0xec>
 800054c:	2503      	movs	r5, #3
 800054e:	e799      	b.n	8000484 <HAL_GPIO_Init+0xec>
 8000550:	2504      	movs	r5, #4
 8000552:	e797      	b.n	8000484 <HAL_GPIO_Init+0xec>
 8000554:	40021000 	.word	0x40021000
 8000558:	40010400 	.word	0x40010400
 800055c:	40010800 	.word	0x40010800
 8000560:	40011c00 	.word	0x40011c00
 8000564:	10210000 	.word	0x10210000
 8000568:	10110000 	.word	0x10110000
 800056c:	10310000 	.word	0x10310000

08000570 <HAL_PWR_EnableBkUpAccess>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	fa93 f3a3 	rbit	r3, r3
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000578:	fab3 f383 	clz	r3, r3
 800057c:	2201      	movs	r2, #1
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000584:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	4770      	bx	lr

0800058c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800058c:	6803      	ldr	r3, [r0, #0]
{
 800058e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000592:	07de      	lsls	r6, r3, #31
{
 8000594:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000596:	d434      	bmi.n	8000602 <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000598:	682b      	ldr	r3, [r5, #0]
 800059a:	079c      	lsls	r4, r3, #30
 800059c:	f100 80a7 	bmi.w	80006ee <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005a0:	682b      	ldr	r3, [r5, #0]
 80005a2:	071a      	lsls	r2, r3, #28
 80005a4:	d523      	bpl.n	80005ee <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005a6:	69aa      	ldr	r2, [r5, #24]
 80005a8:	4cbe      	ldr	r4, [pc, #760]	; (80008a4 <HAL_RCC_OscConfig+0x318>)
 80005aa:	2301      	movs	r3, #1
 80005ac:	49be      	ldr	r1, [pc, #760]	; (80008a8 <HAL_RCC_OscConfig+0x31c>)
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	f000 8115 	beq.w	80007de <HAL_RCC_OscConfig+0x252>
 80005b4:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80005b8:	fab2 f282 	clz	r2, r2
 80005bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80005c0:	f7ff fe5c 	bl	800027c <HAL_GetTick>
 80005c4:	2602      	movs	r6, #2
 80005c6:	4607      	mov	r7, r0
 80005c8:	fa96 f3a6 	rbit	r3, r6
 80005cc:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005d2:	fa96 f3a6 	rbit	r3, r6
 80005d6:	fab3 f383 	clz	r3, r3
 80005da:	f003 031f 	and.w	r3, r3, #31
 80005de:	fa22 f303 	lsr.w	r3, r2, r3
 80005e2:	07db      	lsls	r3, r3, #31
 80005e4:	f140 80f4 	bpl.w	80007d0 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff fe4d 	bl	8000288 <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005ee:	682b      	ldr	r3, [r5, #0]
 80005f0:	0759      	lsls	r1, r3, #29
 80005f2:	f100 8114 	bmi.w	800081e <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005f6:	69ea      	ldr	r2, [r5, #28]
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	f040 8193 	bne.w	8000924 <HAL_RCC_OscConfig+0x398>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005fe:	2000      	movs	r0, #0
 8000600:	e020      	b.n	8000644 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000602:	4ca8      	ldr	r4, [pc, #672]	; (80008a4 <HAL_RCC_OscConfig+0x318>)
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	f003 030c 	and.w	r3, r3, #12
 800060a:	2b04      	cmp	r3, #4
 800060c:	d007      	beq.n	800061e <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800060e:	6863      	ldr	r3, [r4, #4]
 8000610:	f003 030c 	and.w	r3, r3, #12
 8000614:	2b08      	cmp	r3, #8
 8000616:	d118      	bne.n	800064a <HAL_RCC_OscConfig+0xbe>
 8000618:	6863      	ldr	r3, [r4, #4]
 800061a:	03d8      	lsls	r0, r3, #15
 800061c:	d515      	bpl.n	800064a <HAL_RCC_OscConfig+0xbe>
 800061e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000622:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000626:	6822      	ldr	r2, [r4, #0]
 8000628:	fa93 f3a3 	rbit	r3, r3
 800062c:	fab3 f383 	clz	r3, r3
 8000630:	f003 031f 	and.w	r3, r3, #31
 8000634:	fa22 f303 	lsr.w	r3, r2, r3
 8000638:	07d9      	lsls	r1, r3, #31
 800063a:	d5ad      	bpl.n	8000598 <HAL_RCC_OscConfig+0xc>
 800063c:	686b      	ldr	r3, [r5, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1aa      	bne.n	8000598 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000642:	2001      	movs	r0, #1
}
 8000644:	b003      	add	sp, #12
 8000646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800064a:	686b      	ldr	r3, [r5, #4]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d11c      	bne.n	800068c <HAL_RCC_OscConfig+0x100>
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000658:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800065a:	f7ff fe0f 	bl	800027c <HAL_GetTick>
 800065e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000662:	4607      	mov	r7, r0
 8000664:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000668:	6822      	ldr	r2, [r4, #0]
 800066a:	fa96 f3a6 	rbit	r3, r6
 800066e:	fab3 f383 	clz	r3, r3
 8000672:	f003 031f 	and.w	r3, r3, #31
 8000676:	fa22 f303 	lsr.w	r3, r2, r3
 800067a:	07da      	lsls	r2, r3, #31
 800067c:	d48c      	bmi.n	8000598 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800067e:	f7ff fdfd 	bl	800027c <HAL_GetTick>
 8000682:	1bc0      	subs	r0, r0, r7
 8000684:	2864      	cmp	r0, #100	; 0x64
 8000686:	d9ed      	bls.n	8000664 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000688:	2003      	movs	r0, #3
 800068a:	e7db      	b.n	8000644 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800068c:	bb03      	cbnz	r3, 80006d0 <HAL_RCC_OscConfig+0x144>
 800068e:	6823      	ldr	r3, [r4, #0]
 8000690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000698:	6023      	str	r3, [r4, #0]
 800069a:	6823      	ldr	r3, [r4, #0]
 800069c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006a2:	f7ff fdeb 	bl	800027c <HAL_GetTick>
 80006a6:	4607      	mov	r7, r0
 80006a8:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ac:	6822      	ldr	r2, [r4, #0]
 80006ae:	fa96 f3a6 	rbit	r3, r6
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	f003 031f 	and.w	r3, r3, #31
 80006ba:	fa22 f303 	lsr.w	r3, r2, r3
 80006be:	07db      	lsls	r3, r3, #31
 80006c0:	f57f af6a 	bpl.w	8000598 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006c4:	f7ff fdda 	bl	800027c <HAL_GetTick>
 80006c8:	1bc0      	subs	r0, r0, r7
 80006ca:	2864      	cmp	r0, #100	; 0x64
 80006cc:	d9ec      	bls.n	80006a8 <HAL_RCC_OscConfig+0x11c>
 80006ce:	e7db      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	d103      	bne.n	80006e0 <HAL_RCC_OscConfig+0x154>
 80006d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006dc:	6023      	str	r3, [r4, #0]
 80006de:	e7b8      	b.n	8000652 <HAL_RCC_OscConfig+0xc6>
 80006e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e4:	6023      	str	r3, [r4, #0]
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ec:	e7b4      	b.n	8000658 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006ee:	4c6d      	ldr	r4, [pc, #436]	; (80008a4 <HAL_RCC_OscConfig+0x318>)
 80006f0:	6863      	ldr	r3, [r4, #4]
 80006f2:	f013 0f0c 	tst.w	r3, #12
 80006f6:	d007      	beq.n	8000708 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006f8:	6863      	ldr	r3, [r4, #4]
 80006fa:	f003 030c 	and.w	r3, r3, #12
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d120      	bne.n	8000744 <HAL_RCC_OscConfig+0x1b8>
 8000702:	6863      	ldr	r3, [r4, #4]
 8000704:	03df      	lsls	r7, r3, #15
 8000706:	d41d      	bmi.n	8000744 <HAL_RCC_OscConfig+0x1b8>
 8000708:	2302      	movs	r3, #2
 800070a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800070e:	6822      	ldr	r2, [r4, #0]
 8000710:	fa93 f3a3 	rbit	r3, r3
 8000714:	fab3 f383 	clz	r3, r3
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	fa22 f303 	lsr.w	r3, r2, r3
 8000720:	07de      	lsls	r6, r3, #31
 8000722:	d502      	bpl.n	800072a <HAL_RCC_OscConfig+0x19e>
 8000724:	692b      	ldr	r3, [r5, #16]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d18b      	bne.n	8000642 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800072a:	6821      	ldr	r1, [r4, #0]
 800072c:	23f8      	movs	r3, #248	; 0xf8
 800072e:	fa93 f3a3 	rbit	r3, r3
 8000732:	fab3 f283 	clz	r2, r3
 8000736:	696b      	ldr	r3, [r5, #20]
 8000738:	4093      	lsls	r3, r2
 800073a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800073e:	4313      	orrs	r3, r2
 8000740:	6023      	str	r3, [r4, #0]
 8000742:	e72d      	b.n	80005a0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000744:	692a      	ldr	r2, [r5, #16]
 8000746:	2301      	movs	r3, #1
 8000748:	b302      	cbz	r2, 800078c <HAL_RCC_OscConfig+0x200>
 800074a:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	0092      	lsls	r2, r2, #2
 8000754:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000758:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800075c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800075e:	f7ff fd8d 	bl	800027c <HAL_GetTick>
 8000762:	2602      	movs	r6, #2
 8000764:	4607      	mov	r7, r0
 8000766:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800076a:	6822      	ldr	r2, [r4, #0]
 800076c:	fa96 f3a6 	rbit	r3, r6
 8000770:	fab3 f383 	clz	r3, r3
 8000774:	f003 031f 	and.w	r3, r3, #31
 8000778:	fa22 f303 	lsr.w	r3, r2, r3
 800077c:	07d8      	lsls	r0, r3, #31
 800077e:	d4d4      	bmi.n	800072a <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000780:	f7ff fd7c 	bl	800027c <HAL_GetTick>
 8000784:	1bc0      	subs	r0, r0, r7
 8000786:	2802      	cmp	r0, #2
 8000788:	d9ed      	bls.n	8000766 <HAL_RCC_OscConfig+0x1da>
 800078a:	e77d      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
 800078c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000790:	fab3 f383 	clz	r3, r3
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800079a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800079e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007a0:	f7ff fd6c 	bl	800027c <HAL_GetTick>
 80007a4:	2602      	movs	r6, #2
 80007a6:	4607      	mov	r7, r0
 80007a8:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ac:	6822      	ldr	r2, [r4, #0]
 80007ae:	fa96 f3a6 	rbit	r3, r6
 80007b2:	fab3 f383 	clz	r3, r3
 80007b6:	f003 031f 	and.w	r3, r3, #31
 80007ba:	fa22 f303 	lsr.w	r3, r2, r3
 80007be:	07d9      	lsls	r1, r3, #31
 80007c0:	f57f aeee 	bpl.w	80005a0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007c4:	f7ff fd5a 	bl	800027c <HAL_GetTick>
 80007c8:	1bc0      	subs	r0, r0, r7
 80007ca:	2802      	cmp	r0, #2
 80007cc:	d9ec      	bls.n	80007a8 <HAL_RCC_OscConfig+0x21c>
 80007ce:	e75b      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007d0:	f7ff fd54 	bl	800027c <HAL_GetTick>
 80007d4:	1bc0      	subs	r0, r0, r7
 80007d6:	2802      	cmp	r0, #2
 80007d8:	f67f aef6 	bls.w	80005c8 <HAL_RCC_OscConfig+0x3c>
 80007dc:	e754      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
 80007de:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 80007e2:	fab3 f383 	clz	r3, r3
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 80007ea:	f7ff fd47 	bl	800027c <HAL_GetTick>
 80007ee:	2602      	movs	r6, #2
 80007f0:	4607      	mov	r7, r0
 80007f2:	fa96 f3a6 	rbit	r3, r6
 80007f6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007fc:	fa96 f3a6 	rbit	r3, r6
 8000800:	fab3 f383 	clz	r3, r3
 8000804:	f003 031f 	and.w	r3, r3, #31
 8000808:	fa22 f303 	lsr.w	r3, r2, r3
 800080c:	07d8      	lsls	r0, r3, #31
 800080e:	f57f aeee 	bpl.w	80005ee <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000812:	f7ff fd33 	bl	800027c <HAL_GetTick>
 8000816:	1bc0      	subs	r0, r0, r7
 8000818:	2802      	cmp	r0, #2
 800081a:	d9ea      	bls.n	80007f2 <HAL_RCC_OscConfig+0x266>
 800081c:	e734      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4c21      	ldr	r4, [pc, #132]	; (80008a4 <HAL_RCC_OscConfig+0x318>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000820:	4e22      	ldr	r6, [pc, #136]	; (80008ac <HAL_RCC_OscConfig+0x320>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	69e3      	ldr	r3, [r4, #28]
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61e3      	str	r3, [r4, #28]
 800082a:	69e3      	ldr	r3, [r4, #28]
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000834:	6833      	ldr	r3, [r6, #0]
 8000836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800083c:	f7ff fd1e 	bl	800027c <HAL_GetTick>
 8000840:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000842:	6833      	ldr	r3, [r6, #0]
 8000844:	05da      	lsls	r2, r3, #23
 8000846:	d526      	bpl.n	8000896 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000848:	68eb      	ldr	r3, [r5, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d130      	bne.n	80008b0 <HAL_RCC_OscConfig+0x324>
 800084e:	6a23      	ldr	r3, [r4, #32]
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000856:	f7ff fd11 	bl	800027c <HAL_GetTick>
 800085a:	2602      	movs	r6, #2
 800085c:	4681      	mov	r9, r0
 800085e:	46b0      	mov	r8, r6
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000860:	f241 3788 	movw	r7, #5000	; 0x1388
 8000864:	fa96 f3a6 	rbit	r3, r6
 8000868:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800086c:	2b00      	cmp	r3, #0
 800086e:	d055      	beq.n	800091c <HAL_RCC_OscConfig+0x390>
 8000870:	6a22      	ldr	r2, [r4, #32]
 8000872:	fa98 f3a8 	rbit	r3, r8
 8000876:	fab3 f383 	clz	r3, r3
 800087a:	f003 031f 	and.w	r3, r3, #31
 800087e:	fa22 f303 	lsr.w	r3, r2, r3
 8000882:	07db      	lsls	r3, r3, #31
 8000884:	f53f aeb7 	bmi.w	80005f6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000888:	f7ff fcf8 	bl	800027c <HAL_GetTick>
 800088c:	eba0 0009 	sub.w	r0, r0, r9
 8000890:	42b8      	cmp	r0, r7
 8000892:	d9e7      	bls.n	8000864 <HAL_RCC_OscConfig+0x2d8>
 8000894:	e6f8      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000896:	f7ff fcf1 	bl	800027c <HAL_GetTick>
 800089a:	1bc0      	subs	r0, r0, r7
 800089c:	2864      	cmp	r0, #100	; 0x64
 800089e:	d9d0      	bls.n	8000842 <HAL_RCC_OscConfig+0x2b6>
 80008a0:	e6f2      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	42420480 	.word	0x42420480
 80008ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008b0:	bb33      	cbnz	r3, 8000900 <HAL_RCC_OscConfig+0x374>
 80008b2:	6a23      	ldr	r3, [r4, #32]
 80008b4:	2602      	movs	r6, #2
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	6223      	str	r3, [r4, #32]
 80008bc:	6a23      	ldr	r3, [r4, #32]
 80008be:	4637      	mov	r7, r6
 80008c0:	f023 0304 	bic.w	r3, r3, #4
 80008c4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008c6:	f7ff fcd9 	bl	800027c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ca:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80008ce:	4680      	mov	r8, r0
 80008d0:	fa96 f3a6 	rbit	r3, r6
 80008d4:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008d8:	b313      	cbz	r3, 8000920 <HAL_RCC_OscConfig+0x394>
 80008da:	6a22      	ldr	r2, [r4, #32]
 80008dc:	fa97 f3a7 	rbit	r3, r7
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	f003 031f 	and.w	r3, r3, #31
 80008e8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ec:	07d8      	lsls	r0, r3, #31
 80008ee:	f57f ae82 	bpl.w	80005f6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f2:	f7ff fcc3 	bl	800027c <HAL_GetTick>
 80008f6:	eba0 0008 	sub.w	r0, r0, r8
 80008fa:	4548      	cmp	r0, r9
 80008fc:	d9e8      	bls.n	80008d0 <HAL_RCC_OscConfig+0x344>
 80008fe:	e6c3      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000900:	2b05      	cmp	r3, #5
 8000902:	6a23      	ldr	r3, [r4, #32]
 8000904:	d103      	bne.n	800090e <HAL_RCC_OscConfig+0x382>
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6223      	str	r3, [r4, #32]
 800090c:	e79f      	b.n	800084e <HAL_RCC_OscConfig+0x2c2>
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6223      	str	r3, [r4, #32]
 8000914:	6a23      	ldr	r3, [r4, #32]
 8000916:	f023 0304 	bic.w	r3, r3, #4
 800091a:	e79b      	b.n	8000854 <HAL_RCC_OscConfig+0x2c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800091c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800091e:	e7a8      	b.n	8000872 <HAL_RCC_OscConfig+0x2e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000920:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000922:	e7db      	b.n	80008dc <HAL_RCC_OscConfig+0x350>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000924:	4c44      	ldr	r4, [pc, #272]	; (8000a38 <HAL_RCC_OscConfig+0x4ac>)
 8000926:	6863      	ldr	r3, [r4, #4]
 8000928:	f003 030c 	and.w	r3, r3, #12
 800092c:	2b08      	cmp	r3, #8
 800092e:	f43f ae88 	beq.w	8000642 <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000932:	2a02      	cmp	r2, #2
 8000934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000938:	d159      	bne.n	80009ee <HAL_RCC_OscConfig+0x462>
 800093a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800093e:	fab3 f383 	clz	r3, r3
 8000942:	2200      	movs	r2, #0
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800094a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800094e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000950:	f7ff fc94 	bl	800027c <HAL_GetTick>
 8000954:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000958:	4607      	mov	r7, r0
 800095a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800095e:	6822      	ldr	r2, [r4, #0]
 8000960:	fa96 f3a6 	rbit	r3, r6
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	07d9      	lsls	r1, r3, #31
 8000972:	d436      	bmi.n	80009e2 <HAL_RCC_OscConfig+0x456>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000974:	6a2b      	ldr	r3, [r5, #32]
 8000976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097a:	d105      	bne.n	8000988 <HAL_RCC_OscConfig+0x3fc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800097c:	6862      	ldr	r2, [r4, #4]
 800097e:	68a9      	ldr	r1, [r5, #8]
 8000980:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000984:	430a      	orrs	r2, r1
 8000986:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000988:	6862      	ldr	r2, [r4, #4]
 800098a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800098c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000990:	430b      	orrs	r3, r1
 8000992:	4313      	orrs	r3, r2
 8000994:	6063      	str	r3, [r4, #4]
 8000996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800099a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	2201      	movs	r2, #1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009aa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fc64 	bl	800027c <HAL_GetTick>
 80009b4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009b8:	4606      	mov	r6, r0
 80009ba:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009be:	6822      	ldr	r2, [r4, #0]
 80009c0:	fa95 f3a5 	rbit	r3, r5
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	f003 031f 	and.w	r3, r3, #31
 80009cc:	fa22 f303 	lsr.w	r3, r2, r3
 80009d0:	07da      	lsls	r2, r3, #31
 80009d2:	f53f ae14 	bmi.w	80005fe <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d6:	f7ff fc51 	bl	800027c <HAL_GetTick>
 80009da:	1b80      	subs	r0, r0, r6
 80009dc:	2802      	cmp	r0, #2
 80009de:	d9ec      	bls.n	80009ba <HAL_RCC_OscConfig+0x42e>
 80009e0:	e652      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e2:	f7ff fc4b 	bl	800027c <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d9b6      	bls.n	800095a <HAL_RCC_OscConfig+0x3ce>
 80009ec:	e64c      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
 80009ee:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009f2:	fab3 f383 	clz	r3, r3
 80009f6:	2200      	movs	r2, #0
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80009fe:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a04:	f7ff fc3a 	bl	800027c <HAL_GetTick>
 8000a08:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a0c:	4606      	mov	r6, r0
 8000a0e:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	fa95 f3a5 	rbit	r3, r5
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	fa22 f303 	lsr.w	r3, r2, r3
 8000a24:	07db      	lsls	r3, r3, #31
 8000a26:	f57f adea 	bpl.w	80005fe <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a2a:	f7ff fc27 	bl	800027c <HAL_GetTick>
 8000a2e:	1b80      	subs	r0, r0, r6
 8000a30:	2802      	cmp	r0, #2
 8000a32:	d9ec      	bls.n	8000a0e <HAL_RCC_OscConfig+0x482>
 8000a34:	e628      	b.n	8000688 <HAL_RCC_OscConfig+0xfc>
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a3c:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 8000a40:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a42:	ac02      	add	r4, sp, #8
 8000a44:	f103 0510 	add.w	r5, r3, #16
 8000a48:	4622      	mov	r2, r4
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	6859      	ldr	r1, [r3, #4]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	c203      	stmia	r2!, {r0, r1}
 8000a52:	42ab      	cmp	r3, r5
 8000a54:	4614      	mov	r4, r2
 8000a56:	d1f7      	bne.n	8000a48 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a5e:	2302      	movs	r3, #2
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000a60:	4c1a      	ldr	r4, [pc, #104]	; (8000acc <HAL_RCC_GetSysClockFreq+0x90>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000a62:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a66:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a68:	f001 030c 	and.w	r3, r1, #12
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d028      	beq.n	8000ac2 <HAL_RCC_GetSysClockFreq+0x86>
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d002      	beq.n	8000a7a <HAL_RCC_GetSysClockFreq+0x3e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000a74:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <HAL_RCC_GetSysClockFreq+0x94>)
      break;
    }
  }
  return sysclockfreq;
}
 8000a76:	b007      	add	sp, #28
 8000a78:	bd30      	pop	{r4, r5, pc}
 8000a7a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a7e:	fa93 f3a3 	rbit	r3, r3
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000a82:	fab3 f283 	clz	r2, r3
 8000a86:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	aa06      	add	r2, sp, #24
 8000a8e:	4413      	add	r3, r2
 8000a90:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a94:	03cb      	lsls	r3, r1, #15
 8000a96:	d512      	bpl.n	8000abe <HAL_RCC_GetSysClockFreq+0x82>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000a98:	6863      	ldr	r3, [r4, #4]
 8000a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a9e:	fa92 f2a2 	rbit	r2, r2
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	aa06      	add	r2, sp, #24
 8000aae:	4413      	add	r3, r2
 8000ab0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ab6:	fbb3 f3f2 	udiv	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aba:	4358      	muls	r0, r3
 8000abc:	e7db      	b.n	8000a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ac0:	e7fb      	b.n	8000aba <HAL_RCC_GetSysClockFreq+0x7e>
      sysclockfreq = HSE_VALUE;
 8000ac2:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <HAL_RCC_GetSysClockFreq+0x98>)
  return sysclockfreq;
 8000ac4:	e7d7      	b.n	8000a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8000ac6:	bf00      	nop
 8000ac8:	08001674 	.word	0x08001674
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	007a1200 	.word	0x007a1200
 8000ad4:	00f42400 	.word	0x00f42400
 8000ad8:	003d0900 	.word	0x003d0900

08000adc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000adc:	4a55      	ldr	r2, [pc, #340]	; (8000c34 <HAL_RCC_ClockConfig+0x158>)
{
 8000ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ae2:	6813      	ldr	r3, [r2, #0]
{
 8000ae4:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	428b      	cmp	r3, r1
{
 8000aec:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000aee:	d330      	bcc.n	8000b52 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000af0:	6832      	ldr	r2, [r6, #0]
 8000af2:	0794      	lsls	r4, r2, #30
 8000af4:	d43a      	bmi.n	8000b6c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000af6:	07d0      	lsls	r0, r2, #31
 8000af8:	d440      	bmi.n	8000b7c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_RCC_ClockConfig+0x158>)
 8000afc:	6813      	ldr	r3, [r2, #0]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	429d      	cmp	r5, r3
 8000b04:	f0c0 8084 	bcc.w	8000c10 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b08:	6832      	ldr	r2, [r6, #0]
 8000b0a:	4c4b      	ldr	r4, [pc, #300]	; (8000c38 <HAL_RCC_ClockConfig+0x15c>)
 8000b0c:	f012 0f04 	tst.w	r2, #4
 8000b10:	f040 8089 	bne.w	8000c26 <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b14:	0713      	lsls	r3, r2, #28
 8000b16:	d506      	bpl.n	8000b26 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	6932      	ldr	r2, [r6, #16]
 8000b1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b24:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b26:	f7ff ff89 	bl	8000a3c <HAL_RCC_GetSysClockFreq>
 8000b2a:	6863      	ldr	r3, [r4, #4]
 8000b2c:	22f0      	movs	r2, #240	; 0xf0
 8000b2e:	fa92 f2a2 	rbit	r2, r2
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	4a3f      	ldr	r2, [pc, #252]	; (8000c3c <HAL_RCC_ClockConfig+0x160>)
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	40d8      	lsrs	r0, r3
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <HAL_RCC_ClockConfig+0x164>)
 8000b44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fb6c 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000b4c:	2000      	movs	r0, #0
}
 8000b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f023 0307 	bic.w	r3, r3, #7
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	4299      	cmp	r1, r3
 8000b64:	d0c4      	beq.n	8000af0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
 8000b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b6c:	4932      	ldr	r1, [pc, #200]	; (8000c38 <HAL_RCC_ClockConfig+0x15c>)
 8000b6e:	68b0      	ldr	r0, [r6, #8]
 8000b70:	684b      	ldr	r3, [r1, #4]
 8000b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b76:	4303      	orrs	r3, r0
 8000b78:	604b      	str	r3, [r1, #4]
 8000b7a:	e7bc      	b.n	8000af6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b7c:	6872      	ldr	r2, [r6, #4]
 8000b7e:	4c2e      	ldr	r4, [pc, #184]	; (8000c38 <HAL_RCC_ClockConfig+0x15c>)
 8000b80:	2a01      	cmp	r2, #1
 8000b82:	d128      	bne.n	8000bd6 <HAL_RCC_ClockConfig+0xfa>
 8000b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b88:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8c:	6821      	ldr	r1, [r4, #0]
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000b9e:	07d9      	lsls	r1, r3, #31
 8000ba0:	d5e1      	bpl.n	8000b66 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ba2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000bb0:	f7ff fb64 	bl	800027c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000bb6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d112      	bne.n	8000be2 <HAL_RCC_ClockConfig+0x106>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bbc:	6863      	ldr	r3, [r4, #4]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d099      	beq.n	8000afa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc6:	f7ff fb59 	bl	800027c <HAL_GetTick>
 8000bca:	1bc0      	subs	r0, r0, r7
 8000bcc:	4540      	cmp	r0, r8
 8000bce:	d9f5      	bls.n	8000bbc <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd6:	2a02      	cmp	r2, #2
 8000bd8:	bf0c      	ite	eq
 8000bda:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000bde:	2302      	movne	r3, #2
 8000be0:	e7d2      	b.n	8000b88 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d10f      	bne.n	8000c06 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d084      	beq.n	8000afa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bf0:	f7ff fb44 	bl	800027c <HAL_GetTick>
 8000bf4:	1bc0      	subs	r0, r0, r7
 8000bf6:	4540      	cmp	r0, r8
 8000bf8:	d9f5      	bls.n	8000be6 <HAL_RCC_ClockConfig+0x10a>
 8000bfa:	e7e9      	b.n	8000bd0 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bfc:	f7ff fb3e 	bl	800027c <HAL_GetTick>
 8000c00:	1bc0      	subs	r0, r0, r7
 8000c02:	4540      	cmp	r0, r8
 8000c04:	d8e4      	bhi.n	8000bd0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	f013 0f0c 	tst.w	r3, #12
 8000c0c:	d1f6      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x120>
 8000c0e:	e774      	b.n	8000afa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	f023 0307 	bic.w	r3, r3, #7
 8000c16:	432b      	orrs	r3, r5
 8000c18:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	429d      	cmp	r5, r3
 8000c22:	d1a0      	bne.n	8000b66 <HAL_RCC_ClockConfig+0x8a>
 8000c24:	e770      	b.n	8000b08 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	68f1      	ldr	r1, [r6, #12]
 8000c2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	6063      	str	r3, [r4, #4]
 8000c32:	e76f      	b.n	8000b14 <HAL_RCC_ClockConfig+0x38>
 8000c34:	40022000 	.word	0x40022000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	080016a1 	.word	0x080016a1
 8000c40:	20000000 	.word	0x20000000

08000c44 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000c44:	4b01      	ldr	r3, [pc, #4]	; (8000c4c <HAL_RCC_GetHCLKFreq+0x8>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	fa92 f2a2 	rbit	r2, r2
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c64:	40d3      	lsrs	r3, r2
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c68:	5cd3      	ldrb	r3, [r2, r3]
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c6c:	6810      	ldr	r0, [r2, #0]
} 
 8000c6e:	40d8      	lsrs	r0, r3
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	080016b1 	.word	0x080016b1
 8000c7c:	20000000 	.word	0x20000000

08000c80 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c80:	6803      	ldr	r3, [r0, #0]
{
 8000c82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c86:	07dc      	lsls	r4, r3, #31
{
 8000c88:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c8a:	d51e      	bpl.n	8000cca <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	4c3c      	ldr	r4, [pc, #240]	; (8000d80 <HAL_RCCEx_PeriphCLKConfig+0x100>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c8e:	4e3d      	ldr	r6, [pc, #244]	; (8000d84 <HAL_RCCEx_PeriphCLKConfig+0x104>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	69e3      	ldr	r3, [r4, #28]
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	61e3      	str	r3, [r4, #28]
 8000c98:	69e3      	ldr	r3, [r4, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca2:	6833      	ldr	r3, [r6, #0]
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca8:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000caa:	f7ff fae7 	bl	800027c <HAL_GetTick>
 8000cae:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000cb0:	6833      	ldr	r3, [r6, #0]
 8000cb2:	05d8      	lsls	r0, r3, #23
 8000cb4:	d51f      	bpl.n	8000cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000cb6:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cb8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000cbc:	d124      	bne.n	8000d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000cbe:	6a23      	ldr	r3, [r4, #32]
 8000cc0:	686a      	ldr	r2, [r5, #4]
 8000cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	6223      	str	r3, [r4, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000cca:	6828      	ldr	r0, [r5, #0]
 8000ccc:	0783      	lsls	r3, r0, #30
 8000cce:	d506      	bpl.n	8000cde <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000cd2:	68a9      	ldr	r1, [r5, #8]
 8000cd4:	6853      	ldr	r3, [r2, #4]
 8000cd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000cde:	f010 0010 	ands.w	r0, r0, #16
 8000ce2:	d00e      	beq.n	8000d02 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ce4:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000ce6:	6969      	ldr	r1, [r5, #20]
 8000ce8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000cea:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000cec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000cf0:	430b      	orrs	r3, r1
 8000cf2:	6053      	str	r3, [r2, #4]
 8000cf4:	e005      	b.n	8000d02 <HAL_RCCEx_PeriphCLKConfig+0x82>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf6:	f7ff fac1 	bl	800027c <HAL_GetTick>
 8000cfa:	1bc0      	subs	r0, r0, r7
 8000cfc:	2864      	cmp	r0, #100	; 0x64
 8000cfe:	d9d7      	bls.n	8000cb0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        return HAL_TIMEOUT;
 8000d00:	2003      	movs	r0, #3
}
 8000d02:	b003      	add	sp, #12
 8000d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d08:	686a      	ldr	r2, [r5, #4]
 8000d0a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d0d5      	beq.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d12:	6a21      	ldr	r1, [r4, #32]
 8000d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d18:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8000d1c:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d20:	2701      	movs	r7, #1
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000d28:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 8000d2c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d30:	2200      	movs	r2, #0
 8000d32:	fab3 f383 	clz	r3, r3
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d36:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      RCC->BDCR = temp_reg;
 8000d3c:	6226      	str	r6, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d3e:	d5be      	bpl.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000d40:	f7ff fa9c 	bl	800027c <HAL_GetTick>
 8000d44:	2602      	movs	r6, #2
 8000d46:	4680      	mov	r8, r0
 8000d48:	4637      	mov	r7, r6
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d4a:	f241 3988 	movw	r9, #5000	; 0x1388
 8000d4e:	fa96 f3a6 	rbit	r3, r6
 8000d52:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d56:	b18b      	cbz	r3, 8000d7c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8000d58:	6a22      	ldr	r2, [r4, #32]
 8000d5a:	fa97 f3a7 	rbit	r3, r7
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6a:	07da      	lsls	r2, r3, #31
 8000d6c:	d4a7      	bmi.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fa85 	bl	800027c <HAL_GetTick>
 8000d72:	eba0 0008 	sub.w	r0, r0, r8
 8000d76:	4548      	cmp	r0, r9
 8000d78:	d9e9      	bls.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8000d7a:	e7c1      	b.n	8000d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d7e:	e7ec      	b.n	8000d5a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40007000 	.word	0x40007000
 8000d88:	42420400 	.word	0x42420400

08000d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	b570      	push	{r4, r5, r6, lr}
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>)
{
 8000d92:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d94:	ad02      	add	r5, sp, #8
 8000d96:	f103 0610 	add.w	r6, r3, #16
 8000d9a:	462c      	mov	r4, r5
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	6859      	ldr	r1, [r3, #4]
 8000da0:	3308      	adds	r3, #8
 8000da2:	c403      	stmia	r4!, {r0, r1}
 8000da4:	42b3      	cmp	r3, r6
 8000da6:	4625      	mov	r5, r4
 8000da8:	d1f7      	bne.n	8000d9a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000daa:	2301      	movs	r3, #1
 8000dac:	f88d 3004 	strb.w	r3, [sp, #4]
 8000db0:	2302      	movs	r3, #2
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000db2:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000db4:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000db8:	280f      	cmp	r0, #15
 8000dba:	d870      	bhi.n	8000e9e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8000dbc:	e8df f000 	tbb	[pc, r0]
 8000dc0:	396f5c3e 	.word	0x396f5c3e
 8000dc4:	396f6f6f 	.word	0x396f6f6f
 8000dc8:	6f6f6f6f 	.word	0x6f6f6f6f
 8000dcc:	086f6f6f 	.word	0x086f6f6f
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8000dd0:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
 8000dd2:	6854      	ldr	r4, [r2, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000dd4:	6810      	ldr	r0, [r2, #0]
 8000dd6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000dda:	d043      	beq.n	8000e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8000ddc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000de0:	fa93 f3a3 	rbit	r3, r3
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 8000dec:	40cb      	lsrs	r3, r1
 8000dee:	a906      	add	r1, sp, #24
 8000df0:	440b      	add	r3, r1
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000df2:	03e1      	lsls	r1, r4, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000df4:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000df8:	d519      	bpl.n	8000e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000dfa:	6853      	ldr	r3, [r2, #4]
 8000dfc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000e00:	fa91 f1a1 	rbit	r1, r1
 8000e04:	fab1 f181 	clz	r1, r1
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	40cb      	lsrs	r3, r1
 8000e0e:	a906      	add	r1, sp, #24
 8000e10:	440b      	add	r3, r1
 8000e12:	f813 1c14 	ldrb.w	r1, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
 8000e18:	fbb3 f3f1 	udiv	r3, r3, r1
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e1c:	4358      	muls	r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000e1e:	6853      	ldr	r3, [r2, #4]
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	d41f      	bmi.n	8000e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 8000e24:	2303      	movs	r3, #3
 8000e26:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8000e28:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000e2c:	e01a      	b.n	8000e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
 8000e30:	e7f4      	b.n	8000e1c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
    {
      break;
    }
  }
  return(frequency);
}
 8000e32:	b006      	add	sp, #24
 8000e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 8000e38:	f7ff be00 	b.w	8000a3c <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000e3c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000e40:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
 8000e42:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000e44:	4019      	ands	r1, r3
 8000e46:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000e4a:	d025      	beq.n	8000e98 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e54:	d108      	bne.n	8000e68 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
        frequency = LSI_VALUE;
 8000e56:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000e5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000e5c:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128;
 8000e60:	bf08      	it	eq
 8000e62:	2000      	moveq	r0, #0
}
 8000e64:	b006      	add	sp, #24
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e6c:	d117      	bne.n	8000e9e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8000e6e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128;
 8000e70:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8000e72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e76:	e7f3      	b.n	8000e60 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8000e78:	f7ff feea 	bl	8000c50 <HAL_RCC_GetPCLK2Freq>
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	fa92 f2a2 	rbit	r2, r2
 8000e88:	fab2 f282 	clz	r2, r2
 8000e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e90:	40d3      	lsrs	r3, r2
 8000e92:	3301      	adds	r3, #1
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	e7c7      	b.n	8000e28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        frequency = LSE_VALUE;
 8000e98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e9c:	e7e2      	b.n	8000e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
        frequency = 0;
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	e7e0      	b.n	8000e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8000ea2:	bf00      	nop
 8000ea4:	08001684 	.word	0x08001684
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	00f42400 	.word	0x00f42400
 8000eb0:	003d0900 	.word	0x003d0900
 8000eb4:	0001e848 	.word	0x0001e848

08000eb8 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, high2 = 0, low = 0;
  uint32_t timecounter = 0;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000eb8:	6803      	ldr	r3, [r0, #0]
{
 8000eba:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000ebc:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000ebe:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000ec0:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000ec2:	b295      	uxth	r5, r2
 8000ec4:	b28c      	uxth	r4, r1
 8000ec6:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16 ) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000ec8:	bf1d      	ittte	ne
 8000eca:	69d8      	ldrne	r0, [r3, #28]
 8000ecc:	b280      	uxthne	r0, r0
 8000ece:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16 ) | low);
 8000ed2:	b280      	uxtheq	r0, r0
 8000ed4:	bf08      	it	eq
 8000ed6:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000eda:	bd30      	pop	{r4, r5, pc}

08000edc <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0, low = 0;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000edc:	6803      	ldr	r3, [r0, #0]
 8000ede:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16 ) | low);
 8000ee2:	b29b      	uxth	r3, r3
}
 8000ee4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ee8:	4770      	bx	lr

08000eea <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8000eea:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8000eec:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000eee:	f000 000f 	and.w	r0, r0, #15
 8000ef2:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000ef6:	b2c0      	uxtb	r0, r0
 8000ef8:	4770      	bx	lr

08000efa <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8000efa:	b510      	push	{r4, lr}
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8000efc:	f44f 74c8 	mov.w	r4, #400	; 0x190
  if(nMonth < 3)
 8000f00:	2902      	cmp	r1, #2
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 8000f02:	bf94      	ite	ls
 8000f04:	f200 73cf 	addwls	r3, r0, #1999	; 0x7cf
  year = 2000 + nYear;
 8000f08:	f500 63fa 	addhi.w	r3, r0, #2000	; 0x7d0
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8000f0c:	fbb3 f4f4 	udiv	r4, r3, r4
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + ((year-1)/4) - ((year-1)/100) + ((year-1)/400)) % 7;
 8000f10:	bf94      	ite	ls
 8000f12:	f200 70d4 	addwls	r0, r0, #2004	; 0x7d4
    weekday = (((23 * nMonth)/9) + nDay + 4 + year + (year/4) - (year/100) + (year/400) - 2 ) % 7; 
 8000f16:	f200 70d2 	addwhi	r0, r0, #2002	; 0x7d2
 8000f1a:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8000f1e:	4420      	add	r0, r4
 8000f20:	2464      	movs	r4, #100	; 0x64
 8000f22:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f26:	1ac0      	subs	r0, r0, r3
 8000f28:	2317      	movs	r3, #23
 8000f2a:	4359      	muls	r1, r3
 8000f2c:	2309      	movs	r3, #9
 8000f2e:	fb91 f1f3 	sdiv	r1, r1, r3
 8000f32:	440a      	add	r2, r1
 8000f34:	4410      	add	r0, r2
 8000f36:	2207      	movs	r2, #7
 8000f38:	fbb0 f2f2 	udiv	r2, r0, r2
 8000f3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000f40:	1a80      	subs	r0, r0, r2
  }

  return (uint8_t)weekday;
}
 8000f42:	b2c0      	uxtb	r0, r0
 8000f44:	bd10      	pop	{r4, pc}

08000f46 <RTC_EnterInitMode>:
{
 8000f46:	b538      	push	{r3, r4, r5, lr}
 8000f48:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000f4a:	f7ff f997 	bl	800027c <HAL_GetTick>
 8000f4e:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	0692      	lsls	r2, r2, #26
 8000f56:	d505      	bpl.n	8000f64 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000f58:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8000f5a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000f5c:	f042 0210 	orr.w	r2, r2, #16
 8000f60:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000f64:	f7ff f98a 	bl	800027c <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f6e:	d9ef      	bls.n	8000f50 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000f70:	2003      	movs	r0, #3
}
 8000f72:	bd38      	pop	{r3, r4, r5, pc}

08000f74 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000f74:	6802      	ldr	r2, [r0, #0]
{
 8000f76:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000f78:	6853      	ldr	r3, [r2, #4]
{
 8000f7a:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000f7c:	f023 0310 	bic.w	r3, r3, #16
 8000f80:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000f82:	f7ff f97b 	bl	800027c <HAL_GetTick>
 8000f86:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	069b      	lsls	r3, r3, #26
 8000f8e:	d501      	bpl.n	8000f94 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8000f90:	2000      	movs	r0, #0
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000f94:	f7ff f972 	bl	800027c <HAL_GetTick>
 8000f98:	1b40      	subs	r0, r0, r5
 8000f9a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f9e:	d9f3      	bls.n	8000f88 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000fa0:	2003      	movs	r0, #3
}
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}

08000fa4 <RTC_WriteTimeCounter>:
{
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4605      	mov	r5, r0
 8000fa8:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000faa:	f7ff ffcc 	bl	8000f46 <RTC_EnterInitMode>
 8000fae:	b958      	cbnz	r0, 8000fc8 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000fb4:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16));
 8000fb6:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000fb8:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000fba:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000fbc:	f7ff ffda 	bl	8000f74 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000fc0:	3000      	adds	r0, #0
 8000fc2:	bf18      	it	ne
 8000fc4:	2001      	movne	r0, #1
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	2001      	movs	r0, #1
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}

08000fcc <RTC_WriteAlarmCounter>:
{
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4605      	mov	r5, r0
 8000fd0:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000fd2:	f7ff ffb8 	bl	8000f46 <RTC_EnterInitMode>
 8000fd6:	b958      	cbnz	r0, 8000ff0 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000fdc:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16));
 8000fde:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000fe0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000fe2:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000fe4:	f7ff ffc6 	bl	8000f74 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000fe8:	3000      	adds	r0, #0
 8000fea:	bf18      	it	ne
 8000fec:	2001      	movne	r0, #1
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	2001      	movs	r0, #1
}
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}

08000ff4 <HAL_RTC_SetTime>:
{
 8000ff4:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	b1e0      	cbz	r0, 8001034 <HAL_RTC_SetTime+0x40>
 8000ffa:	b1d9      	cbz	r1, 8001034 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000ffc:	7c03      	ldrb	r3, [r0, #16]
 8000ffe:	2602      	movs	r6, #2
 8001000:	2b01      	cmp	r3, #1
 8001002:	d046      	beq.n	8001092 <HAL_RTC_SetTime+0x9e>
 8001004:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001006:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8001008:	7403      	strb	r3, [r0, #16]
 800100a:	7808      	ldrb	r0, [r1, #0]
 800100c:	784e      	ldrb	r6, [r1, #1]
 800100e:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8001010:	b992      	cbnz	r2, 8001038 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60) + \
 8001012:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 8001014:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60) + \
 8001018:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600) + \
 800101a:	fb03 5000 	mla	r0, r3, r0, r5
 800101e:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001020:	4629      	mov	r1, r5
 8001022:	4620      	mov	r0, r4
 8001024:	f7ff ffbe 	bl	8000fa4 <RTC_WriteTimeCounter>
 8001028:	4606      	mov	r6, r0
 800102a:	b1b0      	cbz	r0, 800105a <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800102c:	2304      	movs	r3, #4
 800102e:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001030:	2300      	movs	r3, #0
 8001032:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8001034:	2601      	movs	r6, #1
 8001036:	e02c      	b.n	8001092 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8001038:	f7ff ff57 	bl	8000eea <RTC_Bcd2ToByte>
 800103c:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60) + \
 800103e:	4630      	mov	r0, r6
 8001040:	f7ff ff53 	bl	8000eea <RTC_Bcd2ToByte>
 8001044:	233c      	movs	r3, #60	; 0x3c
 8001046:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8001048:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800104c:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8001050:	4608      	mov	r0, r1
 8001052:	f7ff ff4a 	bl	8000eea <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600) + \
 8001056:	4405      	add	r5, r0
 8001058:	e7e2      	b.n	8001020 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800105a:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800105c:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800105e:	6853      	ldr	r3, [r2, #4]
 8001060:	f023 0305 	bic.w	r3, r3, #5
 8001064:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001066:	f7ff ff39 	bl	8000edc <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800106a:	1c43      	adds	r3, r0, #1
 800106c:	d00d      	beq.n	800108a <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 800106e:	4285      	cmp	r5, r0
 8001070:	d90b      	bls.n	800108a <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001072:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001076:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff ffa6 	bl	8000fcc <RTC_WriteAlarmCounter>
 8001080:	b118      	cbz	r0, 800108a <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001082:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001084:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001086:	7463      	strb	r3, [r4, #17]
 8001088:	e7d4      	b.n	8001034 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800108a:	2301      	movs	r3, #1
 800108c:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 800108e:	2300      	movs	r3, #0
 8001090:	7423      	strb	r3, [r4, #16]
}
 8001092:	4630      	mov	r0, r6
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_RTC_SetDate>:
{
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 800109c:	4604      	mov	r4, r0
 800109e:	b358      	cbz	r0, 80010f8 <HAL_RTC_SetDate+0x60>
 80010a0:	b351      	cbz	r1, 80010f8 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 80010a2:	7c03      	ldrb	r3, [r0, #16]
 80010a4:	2002      	movs	r0, #2
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d027      	beq.n	80010fa <HAL_RTC_SetDate+0x62>
 80010aa:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80010ac:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 80010ae:	7423      	strb	r3, [r4, #16]
 80010b0:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 80010b2:	bb1a      	cbnz	r2, 80010fc <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80010b4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80010b6:	784b      	ldrb	r3, [r1, #1]
 80010b8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80010ba:	788b      	ldrb	r3, [r1, #2]
 80010bc:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80010be:	7ba2      	ldrb	r2, [r4, #14]
 80010c0:	7b61      	ldrb	r1, [r4, #13]
 80010c2:	7be0      	ldrb	r0, [r4, #15]
 80010c4:	f7ff ff19 	bl	8000efa <RTC_WeekDayNum>
 80010c8:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80010ca:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff fef3 	bl	8000eb8 <RTC_ReadTimeCounter>
  if (hours > 24)
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_RTC_SetDate+0xac>)
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d930      	bls.n	800113a <HAL_RTC_SetDate+0xa2>
 80010d8:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80010dc:	fbb0 f5f3 	udiv	r5, r0, r3
 80010e0:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff ff5c 	bl	8000fa4 <RTC_WriteTimeCounter>
 80010ec:	4606      	mov	r6, r0
 80010ee:	b188      	cbz	r0, 8001114 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80010f0:	2304      	movs	r3, #4
 80010f2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80010f4:	2300      	movs	r3, #0
 80010f6:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
}
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80010fc:	f7ff fef5 	bl	8000eea <RTC_Bcd2ToByte>
 8001100:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001102:	7848      	ldrb	r0, [r1, #1]
 8001104:	f7ff fef1 	bl	8000eea <RTC_Bcd2ToByte>
 8001108:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800110a:	7888      	ldrb	r0, [r1, #2]
 800110c:	f7ff feed 	bl	8000eea <RTC_Bcd2ToByte>
 8001110:	73a0      	strb	r0, [r4, #14]
 8001112:	e7d4      	b.n	80010be <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff fee1 	bl	8000edc <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800111a:	1c43      	adds	r3, r0, #1
 800111c:	d00d      	beq.n	800113a <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 800111e:	4285      	cmp	r5, r0
 8001120:	d90b      	bls.n	800113a <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001122:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001126:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff ff4e 	bl	8000fcc <RTC_WriteAlarmCounter>
 8001130:	b118      	cbz	r0, 800113a <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001132:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001134:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001136:	7463      	strb	r3, [r4, #17]
 8001138:	e7de      	b.n	80010f8 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 800113a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800113c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800113e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001140:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8001142:	bd70      	pop	{r4, r5, r6, pc}
 8001144:	00015f8f 	.word	0x00015f8f

08001148 <HAL_RTC_WaitForSynchro>:
{
 8001148:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800114a:	4604      	mov	r4, r0
 800114c:	b1a8      	cbz	r0, 800117a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800114e:	6802      	ldr	r2, [r0, #0]
 8001150:	6853      	ldr	r3, [r2, #4]
 8001152:	f023 0308 	bic.w	r3, r3, #8
 8001156:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001158:	f7ff f890 	bl	800027c <HAL_GetTick>
 800115c:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	071b      	lsls	r3, r3, #28
 8001164:	d501      	bpl.n	800116a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001166:	2000      	movs	r0, #0
 8001168:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800116a:	f7ff f887 	bl	800027c <HAL_GetTick>
 800116e:	1b40      	subs	r0, r0, r5
 8001170:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001174:	d9f3      	bls.n	800115e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001176:	2003      	movs	r0, #3
}
 8001178:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 800117a:	2001      	movs	r0, #1
 800117c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001180 <HAL_RTC_Init>:
{
 8001180:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001182:	4604      	mov	r4, r0
 8001184:	b170      	cbz	r0, 80011a4 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001186:	7c43      	ldrb	r3, [r0, #17]
 8001188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800118c:	b913      	cbnz	r3, 8001194 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800118e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001190:	f000 f96c 	bl	800146c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001194:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001196:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001198:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800119a:	f7ff ffd5 	bl	8001148 <HAL_RTC_WaitForSynchro>
 800119e:	b118      	cbz	r0, 80011a8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80011a0:	2304      	movs	r3, #4
 80011a2:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
}
 80011a6:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fecc 	bl	8000f46 <RTC_EnterInitMode>
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d1f6      	bne.n	80011a0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80011b2:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80011b4:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80011b6:	6853      	ldr	r3, [r2, #4]
 80011b8:	f023 0307 	bic.w	r3, r3, #7
 80011bc:	6053      	str	r3, [r2, #4]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80011c0:	b118      	cbz	r0, 80011ca <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80011c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80011c4:	f021 0101 	bic.w	r1, r1, #1
 80011c8:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80011ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011cc:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80011d0:	4303      	orrs	r3, r0
 80011d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80011d4:	6860      	ldr	r0, [r4, #4]
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	d105      	bne.n	80011e6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff fdd6 	bl	8000d8c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0)
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d0dd      	beq.n	80011a0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1;
 80011e4:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16));
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	6893      	ldr	r3, [r2, #8]
 80011ea:	f023 030f 	bic.w	r3, r3, #15
 80011ee:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80011f2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80011f4:	68d3      	ldr	r3, [r2, #12]
 80011f6:	b280      	uxth	r0, r0
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	4318      	orrs	r0, r3
 80011fe:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001200:	4620      	mov	r0, r4
 8001202:	f7ff feb7 	bl	8000f74 <RTC_ExitInitMode>
 8001206:	2301      	movs	r3, #1
 8001208:	b110      	cbz	r0, 8001210 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800120a:	2204      	movs	r2, #4
 800120c:	7462      	strb	r2, [r4, #17]
 800120e:	e7c9      	b.n	80011a4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00;
 8001210:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001212:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01;
 8001214:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001216:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001218:	bd10      	pop	{r4, pc}
 800121a:	bf00      	nop
 800121c:	40006c00 	.word	0x40006c00

08001220 <HAL_RTCEx_RTCEventCallback>:
 8001220:	4770      	bx	lr

08001222 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8001222:	4770      	bx	lr

08001224 <HAL_RTCEx_RTCIRQHandler>:
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001224:	6803      	ldr	r3, [r0, #0]
{
 8001226:	b510      	push	{r4, lr}
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001228:	681a      	ldr	r2, [r3, #0]
{
 800122a:	4604      	mov	r4, r0
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800122c:	07d1      	lsls	r1, r2, #31
 800122e:	d511      	bpl.n	8001254 <HAL_RTCEx_RTCIRQHandler+0x30>
    if(__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	07d2      	lsls	r2, r2, #31
 8001234:	d50e      	bpl.n	8001254 <HAL_RTCEx_RTCIRQHandler+0x30>
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	075b      	lsls	r3, r3, #29
 800123a:	d50c      	bpl.n	8001256 <HAL_RTCEx_RTCIRQHandler+0x32>
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800123c:	f7ff fff1 	bl	8001222 <HAL_RTCEx_RTCEventErrorCallback>
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8001240:	f06f 0204 	mvn.w	r2, #4
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	605a      	str	r2, [r3, #4]
        hrtc->State = HAL_RTC_STATE_ERROR; 
 8001248:	2304      	movs	r3, #4
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800124a:	f06f 0201 	mvn.w	r2, #1
        hrtc->State = HAL_RTC_STATE_READY; 
 800124e:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8001256:	f7ff ffe3 	bl	8001220 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY; 
 800125a:	2301      	movs	r3, #1
 800125c:	e7f5      	b.n	800124a <HAL_RTCEx_RTCIRQHandler+0x26>

0800125e <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
  tmp += (BackupRegister * 4);
 800125e:	0089      	lsls	r1, r1, #2
 8001260:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001264:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8001268:	b292      	uxth	r2, r2
 800126a:	600a      	str	r2, [r1, #0]
 800126c:	4770      	bx	lr

0800126e <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
  backupregister += (BackupRegister * 4);
 800126e:	0089      	lsls	r1, r1, #2
 8001270:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001274:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8001278:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 800127a:	b280      	uxth	r0, r0
 800127c:	4770      	bx	lr
	...

08001280 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <MX_GPIO_Init+0xb0>)
{
 8001282:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001284:	699a      	ldr	r2, [r3, #24]
{
 8001286:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800128c:	619a      	str	r2, [r3, #24]
 800128e:	699a      	ldr	r2, [r3, #24]
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2403      	movs	r4, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001292:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001296:	9201      	str	r2, [sp, #4]
 8001298:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800129a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	a906      	add	r1, sp, #24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	f042 0210 	orr.w	r2, r2, #16
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	f002 0210 	and.w	r2, r2, #16
 80012b0:	9202      	str	r2, [sp, #8]
 80012b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	f042 0204 	orr.w	r2, r2, #4
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	f002 0204 	and.w	r2, r2, #4
 80012c2:	9203      	str	r2, [sp, #12]
 80012c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	f042 0208 	orr.w	r2, r2, #8
 80012cc:	619a      	str	r2, [r3, #24]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	f002 0208 	and.w	r2, r2, #8
 80012d4:	9204      	str	r2, [sp, #16]
 80012d6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	619a      	str	r2, [r3, #24]
 80012e0:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80012e2:	9506      	str	r5, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	9305      	str	r3, [sp, #20]
 80012ea:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ec:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ee:	f7ff f853 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2 
                           PC3 PC4 PC5 PC6 
                           PC7 PC8 PC9 PC10 
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80012f2:	f643 73ff 	movw	r3, #16383	; 0x3fff
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	a906      	add	r1, sp, #24
 80012f8:	480f      	ldr	r0, [pc, #60]	; (8001338 <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 80012fa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f7ff f84b 	bl	8000398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA11 
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001302:	f649 73ff 	movw	r3, #40959	; 0x9fff
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	a906      	add	r1, sp, #24
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_GPIO_Init+0xbc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800130a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f7ff f843 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	a906      	add	r1, sp, #24
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <MX_GPIO_Init+0xc0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001316:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001318:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f7ff f83d 	bl	8000398 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131e:	a906      	add	r1, sp, #24
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001322:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001324:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f7ff f837 	bl	8000398 <HAL_GPIO_Init>

}
 800132a:	b00b      	add	sp, #44	; 0x2c
 800132c:	bd30      	pop	{r4, r5, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	40011800 	.word	0x40011800
 8001338:	40011000 	.word	0x40011000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40011400 	.word	0x40011400

08001348 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001348:	2305      	movs	r3, #5
{
 800134a:	b510      	push	{r4, lr}
 800134c:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800134e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001354:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001356:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001358:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800135c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800135e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f7ff f914 	bl	800058c <HAL_RCC_OscConfig>
 8001364:	4601      	mov	r1, r0
 8001366:	b100      	cbz	r0, 800136a <SystemClock_Config+0x22>
 8001368:	e7fe      	b.n	8001368 <SystemClock_Config+0x20>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001376:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001378:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137c:	f7ff fbae 	bl	8000adc <HAL_RCC_ClockConfig>
 8001380:	b100      	cbz	r0, 8001384 <SystemClock_Config+0x3c>
 8001382:	e7fe      	b.n	8001382 <SystemClock_Config+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800138a:	9406      	str	r4, [sp, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800138c:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138e:	f7ff fc77 	bl	8000c80 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4604      	mov	r4, r0
 8001394:	b100      	cbz	r0, 8001398 <SystemClock_Config+0x50>
 8001396:	e7fe      	b.n	8001396 <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001398:	f7ff fc54 	bl	8000c44 <HAL_RCC_GetHCLKFreq>
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a4:	f7fe ffd0 	bl	8000348 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013a8:	2004      	movs	r0, #4
 80013aa:	f7fe ffe3 	bl	8000374 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013ae:	4622      	mov	r2, r4
 80013b0:	4621      	mov	r1, r4
 80013b2:	f04f 30ff 	mov.w	r0, #4294967295
 80013b6:	f7fe ff87 	bl	80002c8 <HAL_NVIC_SetPriority>
}
 80013ba:	b016      	add	sp, #88	; 0x58
 80013bc:	bd10      	pop	{r4, pc}

080013be <main>:
{
 80013be:	b508      	push	{r3, lr}
  HAL_Init();
 80013c0:	f7fe ff42 	bl	8000248 <HAL_Init>
  SystemClock_Config();
 80013c4:	f7ff ffc0 	bl	8001348 <SystemClock_Config>
  MX_GPIO_Init();
 80013c8:	f7ff ff5a 	bl	8001280 <MX_GPIO_Init>
  MX_RTC_Init();
 80013cc:	f000 f802 	bl	80013d4 <MX_RTC_Init>
 80013d0:	e7fe      	b.n	80013d0 <main+0x12>

080013d2 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80013d2:	e7fe      	b.n	80013d2 <_Error_Handler>

080013d4 <MX_RTC_Init>:

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80013dc:	b513      	push	{r0, r1, r4, lr}
  hrtc.Instance = RTC;
 80013de:	4820      	ldr	r0, [pc, #128]	; (8001460 <MX_RTC_Init+0x8c>)
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80013e0:	4920      	ldr	r1, [pc, #128]	; (8001464 <MX_RTC_Init+0x90>)
 80013e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013e6:	f7ff fecb 	bl	8001180 <HAL_RTC_Init>
 80013ea:	b118      	cbz	r0, 80013f4 <MX_RTC_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 80013ec:	213e      	movs	r1, #62	; 0x3e
 80013ee:	481e      	ldr	r0, [pc, #120]	; (8001468 <MX_RTC_Init+0x94>)
 80013f0:	f7ff ffef 	bl	80013d2 <_Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80013f4:	2101      	movs	r1, #1
 80013f6:	481a      	ldr	r0, [pc, #104]	; (8001460 <MX_RTC_Init+0x8c>)
 80013f8:	f7ff ff39 	bl	800126e <HAL_RTCEx_BKUPRead>
 80013fc:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001400:	4298      	cmp	r0, r3
 8001402:	d02a      	beq.n	800145a <MX_RTC_Init+0x86>
  sTime.Hours = 0x1;
 8001404:	2401      	movs	r4, #1
  sTime.Minutes = 0x0;
 8001406:	2300      	movs	r3, #0
  sTime.Seconds = 0x0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001408:	4622      	mov	r2, r4
 800140a:	4669      	mov	r1, sp
 800140c:	4814      	ldr	r0, [pc, #80]	; (8001460 <MX_RTC_Init+0x8c>)
  sTime.Hours = 0x1;
 800140e:	f88d 4000 	strb.w	r4, [sp]
  sTime.Minutes = 0x0;
 8001412:	f88d 3001 	strb.w	r3, [sp, #1]
  sTime.Seconds = 0x0;
 8001416:	f88d 3002 	strb.w	r3, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800141a:	f7ff fdeb 	bl	8000ff4 <HAL_RTC_SetTime>
 800141e:	b118      	cbz	r0, 8001428 <MX_RTC_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001420:	214a      	movs	r1, #74	; 0x4a
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_RTC_Init+0x94>)
 8001424:	f7ff ffd5 	bl	80013d2 <_Error_Handler>
  }

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x0;
 8001428:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800142a:	2201      	movs	r2, #1
 800142c:	a901      	add	r1, sp, #4
 800142e:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_RTC_Init+0x8c>)
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001430:	f88d 4004 	strb.w	r4, [sp, #4]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001434:	f88d 4005 	strb.w	r4, [sp, #5]
  DateToUpdate.Date = 0x1;
 8001438:	f88d 4006 	strb.w	r4, [sp, #6]
  DateToUpdate.Year = 0x0;
 800143c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001440:	f7ff fe2a 	bl	8001098 <HAL_RTC_SetDate>
 8001444:	b118      	cbz	r0, 800144e <MX_RTC_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001446:	2154      	movs	r1, #84	; 0x54
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_RTC_Init+0x94>)
 800144a:	f7ff ffc2 	bl	80013d2 <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 800144e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001452:	2101      	movs	r1, #1
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <MX_RTC_Init+0x8c>)
 8001456:	f7ff ff02 	bl	800125e <HAL_RTCEx_BKUPWrite>
  }

}
 800145a:	b002      	add	sp, #8
 800145c:	bd10      	pop	{r4, pc}
 800145e:	bf00      	nop
 8001460:	20000024 	.word	0x20000024
 8001464:	40002800 	.word	0x40002800
 8001468:	08001694 	.word	0x08001694

0800146c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800146c:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_RTC_MspInit+0x4c>)
 8001470:	6802      	ldr	r2, [r0, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d11d      	bne.n	80014b2 <HAL_RTC_MspInit+0x46>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001476:	f7ff f87b 	bl	8000570 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_RTC_MspInit+0x50>)
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001482:	61da      	str	r2, [r3, #28]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	9b01      	ldr	r3, [sp, #4]
 800148e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001492:	fa93 f3a3 	rbit	r3, r3
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001496:	2101      	movs	r1, #1
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_RTC_MspInit+0x54>)

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800149e:	2003      	movs	r0, #3
    __HAL_RCC_RTC_ENABLE();
 80014a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	4611      	mov	r1, r2
 80014a8:	f7fe ff0e 	bl	80002c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7fe ff3f 	bl	8000330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014b2:	b003      	add	sp, #12
 80014b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b8:	40002800 	.word	0x40002800
 80014bc:	40021000 	.word	0x40021000
 80014c0:	42420400 	.word	0x42420400

080014c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_MspInit+0x84>)
{
 80014c6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	f7fe fee2 	bl	80002a4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f06f 000b 	mvn.w	r0, #11
 80014e6:	4611      	mov	r1, r2
 80014e8:	f7fe feee 	bl	80002c8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f06f 000a 	mvn.w	r0, #10
 80014f2:	4611      	mov	r1, r2
 80014f4:	f7fe fee8 	bl	80002c8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f06f 0009 	mvn.w	r0, #9
 80014fe:	4611      	mov	r1, r2
 8001500:	f7fe fee2 	bl	80002c8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	f06f 0004 	mvn.w	r0, #4
 800150a:	4611      	mov	r1, r2
 800150c:	f7fe fedc 	bl	80002c8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	f06f 0003 	mvn.w	r0, #3
 8001516:	4611      	mov	r1, r2
 8001518:	f7fe fed6 	bl	80002c8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	f06f 0001 	mvn.w	r0, #1
 8001522:	4611      	mov	r1, r2
 8001524:	f7fe fed0 	bl	80002c8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	4611      	mov	r1, r2
 8001530:	f7fe feca 	bl	80002c8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_MspInit+0x88>)
 8001536:	6853      	ldr	r3, [r2, #4]
 8001538:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	b003      	add	sp, #12
 8001544:	f85d fb04 	ldr.w	pc, [sp], #4
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000

08001550 <NMI_Handler>:
 8001550:	4770      	bx	lr

08001552 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler>

08001554 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler>

08001556 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler>

08001558 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler>

0800155a <SVC_Handler>:
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001562:	f7fe fe83 	bl	800026c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800156a:	f7fe bf10 	b.w	800038e <HAL_SYSTICK_IRQHandler>
	...

08001570 <RTC_IRQHandler>:
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001570:	4801      	ldr	r0, [pc, #4]	; (8001578 <RTC_IRQHandler+0x8>)
 8001572:	f7ff be57 	b.w	8001224 <HAL_RTCEx_RTCIRQHandler>
 8001576:	bf00      	nop
 8001578:	20000024 	.word	0x20000024

0800157c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <SystemInit+0x40>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <SystemInit+0x44>)
 800158a:	400a      	ands	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001594:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001598:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80015a8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80015aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <SystemInit+0x48>)
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	f8ff0000 	.word	0xf8ff0000
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ca:	e003      	b.n	80015d4 <LoopCopyDataInit>

080015cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015d2:	3104      	adds	r1, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015d4:	480a      	ldr	r0, [pc, #40]	; (8001600 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015dc:	d3f6      	bcc.n	80015cc <CopyDataInit>
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015e0:	e002      	b.n	80015e8 <LoopFillZerobss>

080015e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015e4:	f842 3b04 	str.w	r3, [r2], #4

080015e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015ec:	d3f9      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ee:	f7ff ffc5 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f000 f80f 	bl	8001614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f6:	f7ff fee2 	bl	80013be <main>
  bx lr
 80015fa:	4770      	bx	lr
  ldr r3, =_sidata
 80015fc:	080016c4 	.word	0x080016c4
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001604:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001608:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800160c:	20000038 	.word	0x20000038

08001610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_2_IRQHandler>
	...

08001614 <__libc_init_array>:
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	2500      	movs	r5, #0
 8001618:	4e0c      	ldr	r6, [pc, #48]	; (800164c <__libc_init_array+0x38>)
 800161a:	4c0d      	ldr	r4, [pc, #52]	; (8001650 <__libc_init_array+0x3c>)
 800161c:	1ba4      	subs	r4, r4, r6
 800161e:	10a4      	asrs	r4, r4, #2
 8001620:	42a5      	cmp	r5, r4
 8001622:	d109      	bne.n	8001638 <__libc_init_array+0x24>
 8001624:	f000 f81a 	bl	800165c <_init>
 8001628:	2500      	movs	r5, #0
 800162a:	4e0a      	ldr	r6, [pc, #40]	; (8001654 <__libc_init_array+0x40>)
 800162c:	4c0a      	ldr	r4, [pc, #40]	; (8001658 <__libc_init_array+0x44>)
 800162e:	1ba4      	subs	r4, r4, r6
 8001630:	10a4      	asrs	r4, r4, #2
 8001632:	42a5      	cmp	r5, r4
 8001634:	d105      	bne.n	8001642 <__libc_init_array+0x2e>
 8001636:	bd70      	pop	{r4, r5, r6, pc}
 8001638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800163c:	4798      	blx	r3
 800163e:	3501      	adds	r5, #1
 8001640:	e7ee      	b.n	8001620 <__libc_init_array+0xc>
 8001642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001646:	4798      	blx	r3
 8001648:	3501      	adds	r5, #1
 800164a:	e7f2      	b.n	8001632 <__libc_init_array+0x1e>
 800164c:	080016bc 	.word	0x080016bc
 8001650:	080016bc 	.word	0x080016bc
 8001654:	080016bc 	.word	0x080016bc
 8001658:	080016c0 	.word	0x080016c0

0800165c <_init>:
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	bf00      	nop
 8001660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001662:	bc08      	pop	{r3}
 8001664:	469e      	mov	lr, r3
 8001666:	4770      	bx	lr

08001668 <_fini>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	bf00      	nop
 800166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166e:	bc08      	pop	{r3}
 8001670:	469e      	mov	lr, r3
 8001672:	4770      	bx	lr
